{
  "contractName": "TokenStaking",
  "sourceName": "contracts/staking/TokenStaking.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract T",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IKeepTokenStaking",
          "name": "_keepStakingContract",
          "type": "address"
        },
        {
          "internalType": "contract INuCypherStakingEscrow",
          "name": "_nucypherStakingContract",
          "type": "address"
        },
        {
          "internalType": "contract VendingMachine",
          "name": "_keepVendingMachine",
          "type": "address"
        },
        {
          "internalType": "contract VendingMachine",
          "name": "_nucypherVendingMachine",
          "type": "address"
        },
        {
          "internalType": "contract KeepStake",
          "name": "_keepStake",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum TokenStaking.ApplicationStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ApplicationStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ceiling",
          "type": "uint256"
        }
      ],
      "name": "AuthorizationCeilingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        }
      ],
      "name": "AuthorizationDecreaseApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        }
      ],
      "name": "AuthorizationDecreaseRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        }
      ],
      "name": "AuthorizationIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "successfulCall",
          "type": "bool"
        }
      ],
      "name": "AuthorizationInvoluntaryDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGovernance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "GovernanceTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "MinimumStakeAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "NotificationRewardPushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "NotificationRewardSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "NotificationRewardWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "notifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifierRewarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerRefreshed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "panicButton",
          "type": "address"
        }
      ],
      "name": "PanicButtonSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "SlashingProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "penalty",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "StakeDiscrepancyPenaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IStaking.StakeType",
          "name": "stakeType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "discrepancy",
          "type": "bool"
        }
      ],
      "name": "TokensSeized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "ToppedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "applicationInfo",
      "outputs": [
        {
          "internalType": "enum TokenStaking.ApplicationStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "panicButton",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applications",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "approveApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "approveAuthorizationDecrease",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authorizationCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "authorizedStake",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct Checkpoints.Checkpoint",
          "name": "checkpoint",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegateVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "disableApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "forceDecreaseAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getApplicationsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "getAvailableToAuthorize",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "availableTValue",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "enum IStaking.StakeType",
          "name": "stakeTypes",
          "type": "uint8"
        }
      ],
      "name": "getMinStaked",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlashingQueueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "getStartStakingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "increaseAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTStakeAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notificationReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifiersTreasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "notifyKeepStakeDiscrepancy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "notifyNuStakeDiscrepancy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "pauseApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "processSlashing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "pushNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "refreshKeepStakeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "requestAuthorizationDecrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "requestAuthorizationDecrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "rolesOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "rewardMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "notifier",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_stakingProviders",
          "type": "address[]"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ceiling",
          "type": "uint256"
        }
      ],
      "name": "setAuthorizationCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "setMinimumStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "setNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "panicButton",
          "type": "address"
        }
      ],
      "name": "setPanicButton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "penalty",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setStakeDiscrepancyPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "address[]",
          "name": "_stakingProviders",
          "type": "address[]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slashingQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slashingQueueIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDiscrepancyPenalty",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDiscrepancyRewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakeKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "name": "stakeNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakedNu",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nuAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "tStake",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "keepInTStake",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "nuInTStake",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "topUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "topUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "topUpNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuvnor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "unstakeKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "unstakeNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "unstakeT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "withdrawNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200633b3803806200633b833981016040819052620000359162000380565b6000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200007157600080fd5b505afa15801562000086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ac919062000414565b1180156200013f5750604051630a57ebcf60e11b8152600060048201819052906001600160a01b038716906314afd79e9060240160206040518083038186803b158015620000f957600080fd5b505afa1580156200010e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013491906200042e565b6001600160a01b0316145b8015620001c55750604051630bc5b6f360e11b8152600060048201526001600160a01b0385169063178b6de69060240160206040518083038186803b1580156200018857600080fd5b505afa1580156200019d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c3919062000414565b155b8015620001e35750620001e3816200035860201b620039ce1760201c565b620002345760405162461bcd60e51b815260206004820152601660248201527f57726f6e6720696e70757420706172616d657465727300000000000000000000604482015260640160405180910390fd5b6001600160a01b0380871660805285811660a05281811660c05284811660e052604080516371ca337d60e01b81529051918516916371ca337d91600480820192602092909190829003018186803b1580156200028f57600080fd5b505afa158015620002a4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ca919062000414565b6101008181525050816001600160a01b03166371ca337d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200030c57600080fd5b505afa15801562000321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000347919062000414565b610120525062000455945050505050565b6001600160a01b03163b151590565b6001600160a01b03811681146200037d57600080fd5b50565b60008060008060008060c087890312156200039a57600080fd5b8651620003a78162000367565b6020880151909650620003ba8162000367565b6040880151909550620003cd8162000367565b6060880151909450620003e08162000367565b6080880151909350620003f38162000367565b60a0880151909250620004068162000367565b809150509295509295509295565b6000602082840312156200042757600080fd5b5051919050565b6000602082840312156200044157600080fd5b81516200044e8162000367565b9392505050565b60805160a05160c05160e0516101005161012051615dee6200054d6000396000818161101101528181611779015281816128040152818161418b015261481e015260008181610cf401528181613cb3015281816142640152614b3a01526000818161276c015281816140e301526149060152600081816114210152612c51015260008181610c4d015281816114dc01528181611595015281816119360152818161240001528181613da9015281816141be0152614aa8015260008181610a8901528181610fb501528181611b1001528181611ef201528181612b6e0152818161306f015281816132e801526147a90152615dee6000f3fe608060405234801561001057600080fd5b50600436106102b45760003560e01c8063067e6bb1146102b95780630fa78bf41461030357806316934fc4146103185780631d5270d31461038857806328c8c55f1461039b5780632c686ca0146103ae5780632cd62915146103c15780632de94807146103d857806332719e06146104505780633a46b1a814610477578063402121af1461048a578063434457481461049d57806344e97423146104b0578063483046bb146104b95780634a11fae3146104cc5780634ec0a9fe146104df57806356f958ee146104f2578063570ea46114610505578063587cde1e1461051857806358ccdf38146105385780635961d5e91461054b5780635aa6e6751461055e5780635f2d5030146105715780636d08f5b0146105845780636d9b9a34146105975780636da91d8b146105aa5780636fcfff45146105bd5780637368dba2146105e557806375e0ae5a146105ee578063793c1365146106015780637d0379f01461060a5780638129fc1c1461061d57806381b0a0ce1461062557806383ddba8f1461063857806386d18a251461064b5780638b7adc091461065e5780638e46ecb6146106715780638e539e8c146106845780639ab24eb014610697578063a0d6ff9a146106aa578063a7bb8ba8146106bd578063ad30e4cd146106c6578063af5f24ad146106ce578063b1958150146106e1578063b626ca3e146106f4578063be2f335114610707578063d38bfff41461071a578063d3e25ef31461072d578063d3ecb6cd14610740578063dfefadff14610753578063e009245a14610766578063e3ae4d0a146107ac578063eaa86492146107bf578063ef47bf40146107d2578063f07f91c5146107e5578063f1127ed8146107f8578063f1f6c31514610835578063f6e0faeb14610856578063f848beff14610882578063ffd2f98414610895575b600080fd5b6102ec6102c73660046152f9565b603a6020526000908152604090205460ff81169061010090046001600160a01b031682565b6040516102fa92919061532c565b60405180910390f35b610316610311366004615366565b61089d565b005b61035e6103263660046152f9565b6001600160a01b031660009081526039602052604090206002810154600182015491546001600160601b039182169392821692911690565b604080516001600160601b03948516815292841660208401529216918101919091526060016102fa565b610316610396366004615366565b6108ab565b6103166103a93660046153b6565b610982565b6103166103bc3660046152f9565b610abf565b6103ca60345481565b6040519081526020016102fa565b6104266103e63660046152f9565b6001600160a01b03908116600090815260396020526040902080546001820154600290920154600160601b91829004841694928290048416939190041690565b604080516001600160a01b03948516815292841660208401529216918101919091526060016102fa565b60335461046a90600160a01b90046001600160601b031681565b6040516102fa91906153eb565b61046a6104853660046153ff565b610bdb565b6103166104983660046152f9565b610c06565b6103166104ab3660046152f9565b610e30565b6103ca60365481565b6103166104c736600461542b565b610f27565b6103ca6104da3660046152f9565b610fe9565b6103166104ed3660046152f9565b61103c565b6103166105003660046152f9565b611207565b6103166105133660046152f9565b61135a565b61052b6105263660046152f9565b6116bb565b6040516102fa9190615446565b6103166105463660046153b6565b6116d9565b61031661055936600461545a565b6118bc565b60335461052b906001600160a01b031681565b61031661057f3660046154b4565b611b49565b61031661059236600461542b565b611d8d565b6103166105a53660046153b6565b611e12565b61046a6105b83660046154fb565b611f22565b6105d06105cb3660046152f9565b612091565b60405163ffffffff90911681526020016102fa565b6103ca60385481565b61046a6105fc3660046152f9565b6120b3565b6103ca60375481565b61031661061836600461552d565b612236565b6103166122c1565b610316610633366004615549565b612386565b610316610646366004615640565b61258e565b6103166106593660046152f9565b61259a565b61046a61066c366004615366565b612691565b61031661067f3660046152f9565b612711565b61046a6106923660046156a9565b6128fe565b61046a6106a53660046152f9565b61290b565b6103166106b83660046152f9565b61299c565b6103ca603d5481565b603b546103ca565b6103166106dc3660046152f9565b612ba7565b6103166106ef3660046156a9565b612d44565b610316610702366004615366565b612da3565b6103166107153660046156a9565b612ef1565b6103166107283660046152f9565b613096565b61031661073b36600461542b565b6130c9565b61031661074e3660046153b6565b613130565b61052b6107613660046156a9565b613321565b61046a610774366004615366565b6001600160a01b039182166000908152603960209081526040808320939094168252600390920190915220546001600160601b031690565b6103166107ba3660046152f9565b61334b565b60355461046a906001600160601b031681565b6103166107e03660046152f9565b6134af565b6103166107f33660046156c2565b6135f8565b61080b61080636600461570f565b613605565b60408051825163ffffffff1681526020928301516001600160601b031692810192909252016102fa565b6108486108433660046156a9565b6136b1565b6040516102fa929190615746565b6103ca6108643660046152f9565b6001600160a01b031660009081526039602052604090206005015490565b6103166108903660046154b4565b6136ec565b603c546103ca565b6108a782826139dd565b5050565b6033546001600160a01b031633146108de5760405162461bcd60e51b81526004016108d590615768565b60405180910390fd5b6001600160a01b0382166000908152603a602052604090206001815460ff16600381111561090e5761090e615316565b1461092b5760405162461bcd60e51b81526004016108d59061579e565b80546001600160a01b038084166101008102610100600160a81b0319909316929092178355604051908516907f5a38ebc6ef9570e77e12b2162c48413d53357005add9be886ab130a58d44feb890600090a3505050565b6001600160a01b03828116600090815260396020526040902054600160601b9004166109c05760405162461bcd60e51b81526004016108d5906157d3565b6000816001600160601b0316116109e95760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b038216600090815260396020526040812060028101805491928492610a1f9084906001600160601b031661584a565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550826001600160a01b0316600080516020615d5983398151915283604051610a6a91906153eb565b60405180910390a2610a7c8383613af8565b610aba6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633306001600160601b038616613b04565b505050565b6001600160a01b038082166000908152603a60205260409020548291610100909104163314610b305760405162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206973206e6f74207468652070616e696320627574746f6e000060448201526064016108d5565b6001600160a01b0382166000908152603a602052604090206001815460ff166003811115610b6057610b60615316565b14610ba75760405162461bcd60e51b815260206004820152601760248201527621b0b713ba103830bab9b29030b8383634b1b0ba34b7b760491b60448201526064016108d5565b805460ff1916600290811782556040516001600160a01b03851690600080516020615cd983398151915290600090a3505050565b6001600160a01b0382166000908152600260205260408120610bfd9083613b10565b90505b92915050565b6001600160a01b038116600090815260396020526040902060018101546001600160601b0316610c485760405162461bcd60e51b81526004016108d590615875565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fab46d66856040518263ffffffff1660e01b8152600401610c979190615446565b60606040518083038186803b158015610caf57600080fd5b505afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce7919061589f565b92505091506000610d18837f0000000000000000000000000000000000000000000000000000000000000000613c0a565b5060018501549091506001600160601b03908116908216811180610d3b57508215155b610d575760405162461bcd60e51b81526004016108d5906158cd565b6001850180546001600160601b0319166001600160601b0384811691909117909155603554603654610d8f9288928a92911690613c5c565b506001850154600090610dab906001600160601b0316846158fe565b905060011515876001600160a01b0316600080516020615cf983398151915283604051610dd891906153eb565b60405180910390a38315610df9576001860180546001600160601b03191690555b6001860154610e1c908890610e17906001600160601b0316856158fe565b613e25565b610e27878783613e31565b50505050505050565b6033546001600160a01b03163314610e5a5760405162461bcd60e51b81526004016108d590615768565b6001600160a01b0381166000908152603a602052604090206001815460ff166003811115610e8a57610e8a615316565b1480610eab57506002815460ff166003811115610ea957610ea9615316565b145b610ef35760405162461bcd60e51b815260206004820152601960248201527821b0b713ba103234b9b0b136329030b8383634b1b0ba34b7b760391b60448201526064016108d5565b805460ff1916600390811782555b6040516001600160a01b03841690600080516020615cd983398151915290600090a35050565b6000816001600160601b031611610f505760405162461bcd60e51b81526004016108d5906157fe565b806001600160601b031660376000828254610f6b9190615926565b90915550506040517f9de5348508c6ad1f6ff7fcfb84e126bb094784e85bf83f7e3801bc44f9c6dc9790610fa09083906153eb565b60405180910390a1610fe66001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633306001600160601b038516613b04565b50565b6001600160a01b038116600090815260396020526040812054611035906001600160601b03167f0000000000000000000000000000000000000000000000000000000000000000614090565b5092915050565b6001600160a01b038082166000908152603960205260409020548291600160601b90910416158015906110a157506001600160a01b0381163314806110a157506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6110bd5760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b038216600090815260396020526040902060018101546001600160601b0316806111255760405162461bcd60e51b81526020600482015260126024820152714e6f7468696e6720746f20756e7374616b6560701b60448201526064016108d5565b611130846001611f22565b6001600160601b0316156111845760405162461bcd60e51b815260206004820152601b60248201527a12d9595c081cdd185ad9481cdd1a5b1b08185d5d1a1bdc9a5e9959602a1b60448201526064016108d5565b426201518083600501546111989190615926565b11156111b65760405162461bcd60e51b81526004016108d59061596d565b836001600160a01b0316600080516020615d39833981519152826040516111dd91906153eb565b60405180910390a26001820180546001600160601b03191690556112018482613e25565b50505050565b6001600160a01b038082166000908152603960205260409020548291600160601b909104161580159061126c57506001600160a01b03811633148061126c57506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6112885760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b038083166000908152603960205260408120805490926112b791600160601b900416856140de565b82549091506001600160601b03908116908216116112e75760405162461bcd60e51b81526004016108d5906157d3565b81546000906112ff906001600160601b0316836158fe565b9050846001600160a01b0316600080516020615d598339815191528260405161132891906153eb565b60405180910390a282546001600160601b0319166001600160601b0383161783556113538582613af8565b5050505050565b6001600160a01b0381166113805760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b03808216600090815260396020526040902080549091600160601b90910416156113c35760405162461bcd60e51b81526004016108d5906159a4565b60006113ce836141b9565b90506001600160601b0381166113f65760405162461bcd60e51b81526004016108d5906159d8565b6001820180546001600160601b0319166001600160601b03831617905560405162f9934b60e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301f326969061145e908690600401615446565b60206040518083038186803b15801561147657600080fd5b505afa15801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae9190615a01565b82546001600160601b0316600160601b6001600160a01b039283160217835560405163fb1677b160e01b81527f00000000000000000000000000000000000000000000000000000000000000009091169063fb1677b190611513908690600401615446565b60206040518083038186803b15801561152b57600080fd5b505afa15801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190615a01565b6002830180546001600160601b0316600160601b6001600160a01b039384160217905560405163ba7bffd360e01b81527f00000000000000000000000000000000000000000000000000000000000000009091169063ba7bffd3906115cc908690600401615446565b60206040518083038186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c9190615a01565b6001830180546001600160a01b0392909216600160601b026001600160601b039092169190911790554260058301556116558382613af8565b81546001600160a01b0380851691600160601b9004166001808501546002860154604051600080516020615d79833981519152926116ae926001600160a01b03600160601b928390048116939290910416908890615a1e565b60405180910390a4505050565b6001600160a01b039081166000908152600160205260409020541690565b6001600160a01b038083166000908152603960205260409020548391600160601b909104161580159061173e57506001600160a01b03811633148061173e57506001600160a01b03818116600090815260396020526040902054600160601b90041633145b61175a5760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b03831660009081526039602052604081209061179d847f0000000000000000000000000000000000000000000000000000000000000000614090565b91506117ab905081856158fe565b93506000846001600160601b03161180156117ed575081546001600160601b03166117d7866000611f22565b6117e1908661584a565b6001600160601b031611155b6118095760405162461bcd60e51b81526004016108d590615a4a565b4262015180836005015461181d9190615926565b111561183b5760405162461bcd60e51b81526004016108d59061596d565b8154849083906000906118589084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055506118868585613e25565b846001600160a01b0316600080516020615d39833981519152856040516118ad91906153eb565b60405180910390a25050505050565b6001600160a01b038416158015906118dc57506001600160a01b03831615155b80156118f057506001600160a01b03821615155b61190c5760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b038085166000908152603960205260408082209051637d5a36b360e11b815290927f0000000000000000000000000000000000000000000000000000000000000000169063fab46d669061196b908990600401615446565b60606040518083038186803b15801561198357600080fd5b505afa158015611997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bb919061589f565b50915050801580156119dc57508154600160601b90046001600160a01b0316155b6119f85760405162461bcd60e51b81526004016108d5906159a4565b6000836001600160601b0316118015611a2757506033546001600160601b03600160a01b909104811690841610155b611a715760405162461bcd60e51b815260206004820152601b60248201527a416d6f756e74206973206c657373207468616e206d696e696d756d60281b60448201526064016108d5565b8154600160601b3381026001600160601b039283161784556001840180546001600160a01b03898116840291851691909117909155918516918616026001600160601b031916176002830155426005830155611acd8684613af8565b6001600160a01b038616336002600080516020615d79833981519152888888604051611afb93929190615a1e565b60405180910390a4611b416001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633306001600160601b038716613b04565b505050505050565b6001600160a01b038084166000908152603960205260409020600201548491600160601b909104163314611b8f5760405162461bcd60e51b81526004016108d590615a77565b6001600160a01b0383166000908152603a602052604090206001815460ff166003811115611bbf57611bbf615316565b14611bdc5760405162461bcd60e51b81526004016108d59061579e565b6000836001600160601b031611611c055760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b0380861660009081526039602090815260408083209388168352600390930190522080546001600160601b0380861691161015611c875760405162461bcd60e51b8152602060048201526019602482015278105b5bdd5b9d08195e18d959591cc8185d5d1a1bdc9a5e9959603a1b60448201526064016108d5565b80546001600160601b03808616600160601b02600160601b600160c01b0319831681178455600092611cbf92889281169116176158fe565b82546040519192506001600160a01b0380891692908a16917f132e76775c4e3b4b2c36fe4acc18d539b6c34b984ac6ba494a5996c48d8a017491611d0e916001600160601b0316908690615a9f565b60405180910390a381546040516306a7f7a960e41b81526001600160a01b03881691636a7f7a9091611d52918b916001600160601b03909116908690600401615ab9565b600060405180830381600087803b158015611d6c57600080fd5b505af1158015611d80573d6000803e3d6000fd5b5050505050505050505050565b6033546001600160a01b03163314611db75760405162461bcd60e51b81526004016108d590615768565b603380546001600160a01b0316600160a01b6001600160601b038416021790556040517f91d1e8918c0ec490b6eccd803db78273458f0a7d4b3915e062f1402e9521f51890611e079083906153eb565b60405180910390a150565b6033546001600160a01b03163314611e3c5760405162461bcd60e51b81526004016108d590615768565b603754816001600160601b03161115611e8b5760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b60448201526064016108d5565b806001600160601b031660376000828254611ea69190615ae3565b90915550506040517f7083cb4f4c81bb6d7425a5bde6b6969cd8c446730ed572607ef79246bc44ee4290611edd9084908490615746565b60405180910390a16108a76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016836001600160601b038416614291565b6001600160a01b038216600090815260396020526040812081805b6004830154811015611fb4576000836004018281548110611f6057611f60615afa565b60009182526020808320909101546001600160a01b031680835260038701909152604090912054909150611f9e9084906001600160601b031661429c565b9250508080611fac90615b10565b915050611f3d565b5080611fc557600092505050610c00565b6002846002811115611fd957611fd9615316565b14612004576002820154611ff79082906001600160601b03166142b3565b6120019082615ae3565b90505b600084600281111561201857612018615316565b146120405781546120339082906001600160601b03166142b3565b61203d9082615ae3565b90505b600184600281111561205457612054615316565b1461207f5760018201546120729082906001600160601b03166142b3565b61207c9082615ae3565b90505b612088816142c2565b95945050505050565b6001600160a01b038116600090815260026020526040812054610c009061432e565b336000908152603a602052604081206001815460ff1660038111156120da576120da615316565b146120f75760405162461bcd60e51b81526004016108d59061579e565b6001600160a01b0383166000908152603960209081526040808320338452600381019092529091208054600160601b90046001600160601b031661217b5760405162461bcd60e51b815260206004820152601b60248201527a4e6f206465617574686f72697a696e6720696e2070726f6365737360281b60448201526064016108d5565b80546001600160601b0380821691600160601b90041682600061219e83856158fe565b82546101009290920a6001600160601b038181021990931691831602179091558354600160601b600160c01b0319811685556040513393506001600160a01b038a1692600080516020615d19833981519152926122019287929190911690615a9f565b60405180910390a381546001600160601b031661222357612223836001614393565b50546001600160601b0316949350505050565b6033546001600160a01b031633146122605760405162461bcd60e51b81526004016108d590615768565b603580546001600160601b0319166001600160601b038416908117909155603682905560408051918252602082018390527f3f84f36f8e044bbbc00d303ae27c8871614781ac684742a3d8db7eb2eb98785f91015b60405180910390a15050565b600054610100900460ff166122dc5760005460ff16156122e4565b6122e461451a565b6123475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108d5565b600054610100900460ff16158015612369576000805461ffff19166101011790555b6123723361452b565b8015610fe6576000805461ff001916905550565b6001600160a01b038316158015906123a657506001600160a01b03821615155b80156123ba57506001600160a01b03811615155b6123d65760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b038084166000908152603960205260408082209051637d5a36b360e11b815290927f0000000000000000000000000000000000000000000000000000000000000000169063fab46d6690612435908890600401615446565b60606040518083038186803b15801561244d57600080fd5b505afa158015612461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612485919061589f565b50915050801580156124a657508154600160601b90046001600160a01b0316155b6124c25760405162461bcd60e51b81526004016108d5906159a4565b60006124ce33876140de565b90506000816001600160601b0316116124f95760405162461bcd60e51b81526004016108d5906159d8565b600160601b3381026001600160601b038084169190911785556002850180546001600160a01b0388811685029184169190911790915560018601805491891690930291161790554260058401556125508682613af8565b6001600160a01b038616336000600080516020615d7983398151915288888660405161257e93929190615a1e565b60405180910390a4505050505050565b6112018484848461457e565b6001600160a01b038116600090815260396020526040812090805b600483015481101561263e5760008360040182815481106125d8576125d8615afa565b60009182526020808320909101546001600160a01b0316808352600387019091526040909120549091506001600160601b031680156126295761261c868383611b49565b612626818561584a565b93505b5050808061263690615b10565b9150506125b5565b506000816001600160601b031611610aba5760405162461bcd60e51b8152602060048201526016602482015275139bdd1a1a5b99c81dd85cc8185d5d1a1bdc9a5e995960521b60448201526064016108d5565b6001600160a01b03821660009081526039602052604081208054600182015460028301546001600160601b03928316926126ce928116911661584a565b6126d8919061584a565b6001600160a01b0384166000908152600383016020526040902054909250612709906001600160601b0316836158fe565b949350505050565b6001600160a01b038116600090815260396020526040902080546001600160601b03166127505760405162461bcd60e51b81526004016108d590615875565b8054604051630bc5b6f360e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263178b6de6926127aa92600160601b9091041690600401615446565b60206040518083038186803b1580156127c257600080fd5b505afa1580156127d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fa9190615b2b565b90506000612828827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b5083549091506001600160601b03908116908216811161285a5760405162461bcd60e51b81526004016108d5906158cd565b83546001600160601b0319166001600160601b0383811691909117855560355460365461288a92879216906147d0565b5083546000906128a3906001600160601b0316846158fe565b905060011515866001600160a01b0316600080516020615cf9833981519152836040516128d091906153eb565b60405180910390a36128e3868683613e31565b8454611b41908790610e17906001600160601b0316856158fe565b6000610c00600383613b10565b6001600160a01b0381166000908152600260205260408120548015612992576001600160a01b038316600090815260026020526040902061298d90612951600184615ae3565b8154811061296157612961615afa565b90600052602060002090600291828204019190066010029054906101000a90046001600160801b031690565b612995565b60005b9392505050565b6001600160a01b038082166000908152603960205260409020548291600160601b9091041615801590612a0157506001600160a01b038116331480612a0157506001600160a01b03818116600090815260396020526040902054600160601b90041633145b612a1d5760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b0382166000908152603960205260409020600481015415612a805760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481cdd1a5b1b08185d5d1a1bdc9a5e995960521b60448201526064016108d5565b42620151808260050154612a949190615926565b1115612ab25760405162461bcd60e51b81526004016108d59061596d565b8054600182015460028301546000926001600160601b0390811692612adb92908216911661584a565b612ae5919061584a565b9050836001600160a01b0316600080516020615d3983398151915282604051612b0e91906153eb565b60405180910390a26002820180546001600160601b031980821690925560018401805483169055835490911683556001600160601b0316612b4f8583613e25565b6001600160601b03811615611353578254611353906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691600160601b9004166001600160601b038416614291565b6001600160a01b038082166000908152603960205260409020548291600160601b9091041615801590612c0c57506001600160a01b038116331480612c0c57506001600160a01b03818116600090815260396020526040902054600160601b90041633145b612c285760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b03808316600090815260396020526040808220905162f9934b60e11b815290927f000000000000000000000000000000000000000000000000000000000000000016906301f3269690612c86908790600401615446565b60206040518083038186803b158015612c9e57600080fd5b505afa158015612cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd69190615a01565b82546040519192506001600160a01b0380841692600160601b909204811691908716907fda8908ea0ecabda6b6dec96ed40b9c47ffbf9be10f30912965c984face902e1490600090a481546001600160a01b03909116600160601b026001600160601b039091161790555050565b6033546001600160a01b03163314612d6e5760405162461bcd60e51b81526004016108d590615768565b60348190556040518181527ff82f602e8097a5c312216f60ca94cd1ff03aac29893f9adef7ed7e6ae33c76e290602001611e07565b60036001600160a01b0382166000908152603a602052604090205460ff166003811115612dd257612dd2615316565b14612e1d5760405162461bcd60e51b815260206004820152601b60248201527a105c1c1b1a58d85d1a5bdb881a5cc81b9bdd08191a5cd8589b1959602a1b60448201526064016108d5565b6001600160a01b038083166000908152603960209081526040808320938516835260038401909152902080546001600160601b031680612e9f5760405162461bcd60e51b815260206004820152601d60248201527f4170706c69636174696f6e206973206e6f7420617574686f72697a656400000060448201526064016108d5565b81546001600160c01b03191682556040516001600160a01b038086169190871690600080516020615d1983398151915290612ede908590600090615a9f565b60405180910390a3611353836001614393565b603c54603d54108015612f045750600081115b612f455760405162461bcd60e51b81526020600482015260126024820152714e6f7468696e6720746f2070726f6365737360701b60448201526064016108d5565b600081603d54612f559190615926565b9050612f6681603c805490506142b3565b9050603d5481612f769190615ae3565b603d549092506000905b82811015612fd2576000603c8281548110612f9d57612f9d615afa565b906000526020600020019050612fb28161496e565b612fbc908461584a565b9250508080612fca90615b10565b915050612f80565b603d8190556000612fed6001600160601b0384166005614c9c565b9050612ff8816142c2565b61300290846158fe565b6001600160601b03166037600082825461301c9190615926565b9091555050604080518681526020810183905233917f8efe68d059265c97157a10a6aadc9afe80dfa0e96fc959c4de863300e244e156910160405180910390a28015611353576113536001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383614291565b6033546001600160a01b031633146130c05760405162461bcd60e51b81526004016108d590615768565b610fe68161452b565b6033546001600160a01b031633146130f35760405162461bcd60e51b81526004016108d590615768565b6001600160601b0381166038556040517fd579c7b509b9a61b7408309a980bcfcbbf0f336f1b2bb0a760d71f72f0cf313290611e079083906153eb565b6001600160a01b038083166000908152603960205260409020548391600160601b909104161580159061319557506001600160a01b03811633148061319557506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6131b15760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b03831660009081526039602052604090206001600160601b0383161580159061320d57506002808201546001600160601b0316906131f7908690611f22565b613201908561584a565b6001600160601b031611155b6132295760405162461bcd60e51b81526004016108d590615a4a565b4262015180826005015461323d9190615926565b111561325b5760405162461bcd60e51b81526004016108d59061596d565b60028101805484919060009061327b9084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055506132a98484613e25565b836001600160a01b0316600080516020615d39833981519152846040516132d091906153eb565b60405180910390a28054611201906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691600160601b9004166001600160601b038616614291565b603b818154811061333157600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146133755760405162461bcd60e51b81526004016108d590615768565b6001600160a01b03811661339b5760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b0381166000908152603a6020526040812090815460ff1660038111156133ca576133ca615316565b14806133eb57506002815460ff1660038111156133e9576133e9615316565b145b6134335760405162461bcd60e51b815260206004820152601960248201527821b0b713ba1030b8383937bb329030b8383634b1b0ba34b7b760391b60448201526064016108d5565b6000815460ff16600381111561344b5761344b615316565b141561349d57603b80546001810182556000919091527fbbe3212124853f8b0084a66a2d057c2966e251e132af3691db153ab65f0d1a4d0180546001600160a01b0319166001600160a01b0384161790555b805460ff191660019081178255610f01565b6001600160a01b038082166000908152603960205260409020548291600160601b909104161580159061351457506001600160a01b03811633148061351457506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6135305760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b038216600090815260396020526040812090613552846141b9565b60018301549091506001600160601b03908116908216116135855760405162461bcd60e51b81526004016108d5906157d3565b60018201546000906135a0906001600160601b0316836158fe565b9050846001600160a01b0316600080516020615d59833981519152826040516135c991906153eb565b60405180910390a26001830180546001600160601b0319166001600160601b0384161790556113538582613af8565b6108a7826000808461457e565b60408051808201909152600080825260208201526001600160a01b0383166000908152600260205260408120805482916136869163ffffffff871690811061364f5761364f615afa565b90600052602060002090600291828204019190066010029054906101000a90046001600160801b031663ffffffff606082901c1691565b6040805180820190915263ffffffff90921682526001600160601b0316602082015295945050505050565b603c81815481106136c157600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b90046001600160601b031682565b6001600160a01b038084166000908152603960205260409020600201548491600160601b9091041633146137325760405162461bcd60e51b81526004016108d590615a77565b6001600160a01b0383166000908152603a602052604090206001815460ff16600381111561376257613762615316565b1461377f5760405162461bcd60e51b81526004016108d59061579e565b6001600160a01b038086166000908152603960209081526040808320938816835260038401909152902080546001600160601b0316806138425760345415806137cd57506034546004840154105b6138115760405162461bcd60e51b8152602060048201526015602482015274546f6f206d616e79206170706c69636174696f6e7360581b60448201526064016108d5565b600483018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0389161790555b600061384e8989612691565b9050866001600160601b0316816001600160601b031610156138b25760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f756768207374616b6520746f20617574686f72697a6500000060448201526064016108d5565b8254879084906000906138cf9084906001600160601b031661584a565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550876001600160a01b0316896001600160a01b03167f87f9f9f59204f53d57a89a817c6083a17979cd0531791c91e18551a56e3cfdd7848660000160009054906101000a90046001600160601b031660405161394f929190615a9f565b60405180910390a3825460405163c9bacaad60e01b81526001600160a01b038a169163c9bacaad91613991918d9187916001600160601b031690600401615ab9565b600060405180830381600087803b1580156139ab57600080fd5b505af11580156139bf573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b03163b151590565b6001600160a01b03808316600090815260396020526040902080549091600160601b909104163314613a475760405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b60448201526064016108d5565b8054600182015460028301546000926001600160601b0390811692613a7092908216911661584a565b613a7a919061584a565b90506000613a87856116bb565b6001600160a01b0386811660008181526001602052604080822080546001600160a01b0319168a8616908117909155905194955093928516927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46113538185846001600160601b0316614cb4565b6108a782826001614dbe565b61120184848484614e98565b6000438210613b5c5760405162461bcd60e51b8152602060048201526018602482015277109b1bd8dac81b9bdd081e595d0819195d195c9b5a5b995960421b60448201526064016108d5565b825460005b81811015613be5576000613b758284614f03565b90506000613bb8878381548110613b8e57613b8e615afa565b6000918252602090912060028204015463ffffffff60019092166010026101000a900460601c1690565b9050858163ffffffff161115613bd057819350613bde565b613bdb826001615926565b92505b5050613b61565b8115613bff57613bfa85612951600185615ae3565b612088565b506000949350505050565b600080613c1e66038d7ea4c6800085615b5a565b90506000613c2c8286615ae3565b9050613c5266038d7ea4c68000613c438684615b6e565b613c4d9190615b8d565b6142c2565b9250509250929050565b60018401546000906001600160601b0316613c78575081612709565b60018501546000906001600160601b0390811690851611613c9a575082613caa565b5060018501546001600160601b03165b600080613cd7837f0000000000000000000000000000000000000000000000000000000000000000614090565b915091508160001415613cef57859350505050612709565b613cf981846158fe565b6001890180549194508491600090613d1b9084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055508286613d4b91906158fe565b60408051600180825281830190925291975060009190602080830190803683370190505090508781600081518110613d8557613d85615afa565b6001600160a01b039283166020918202929092010152604051629055e960e41b81527f0000000000000000000000000000000000000000000000000000000000000000909116906309055e9090613de69086908a9033908790600401615ba1565b600060405180830381600087803b158015613e0057600080fd5b505af1158015613e14573d6000803e3d6000fd5b50989b9a5050505050505050505050565b6108a782826000614dbe565b6001820154825460028401546000926001600160601b0390811692613e5a92908216911661584a565b613e64919061584a565b90506000805b600485015481101561407f576000856004018281548110613e8d57613e8d615afa565b60009182526020808320909101546001600160a01b03168083526003890190915260409091208054919250906001600160601b0390811690613ed690613c4d9083908a166142b3565b82548390600090613ef19084906001600160601b03166158fe565b82546101009290920a6001600160601b038181021990931691831602179091558354888216911611159050613f3a5781546001600160601b0319166001600160601b0387161782555b815460405163052a151d60e21b81526001916001600160a01b038616916314a85474916203d09091613f7c918f9188916001600160601b031690600401615ab9565b600060405180830381600088803b158015613f9657600080fd5b5087f193505050508015613fa8575060015b613fb0575060005b82546001600160601b03808216600160601b909204161115613ff1578254600160601b6001600160601b03821602600160601b600160c01b03199091161783555b8254604051821515916001600160a01b0380881692908e16917f0f0171fffaa54732b1f79a3164b315658061a1a51bf8c1010fbed908a8e333f9916140439188916001600160601b0390911690615a9f565b60405180910390a482546001600160601b0316614068578561406481615b10565b9650505b50505050808061407790615b10565b915050613e6a565b508015611353576113538482614393565b6000806140a9613c4d846001600160601b038716615b5a565b905060006140b782866158fe565b6001600160601b03169050836140d466038d7ea4c6800083615b6e565b613c529190615b8d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633223ff4b85856040518363ffffffff1660e01b815260040161412f929190615c0b565b602060405180830381600087803b15801561414957600080fd5b505af115801561415d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141819190615b2b565b905060006141af827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b5095945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663afff33ef84306040518363ffffffff1660e01b815260040161420a929190615c0b565b60206040518083038186803b15801561422257600080fd5b505afa158015614236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425a9190615b2b565b90506000614288827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b50949350505050565b610aba838383614f1e565b6000818310156142ac5781610bfd565b5090919050565b60008183106142ac5781610bfd565b60006001600160601b0382111561432a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b60648201526084016108d5565b5090565b600063ffffffff82111561432a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016108d5565b6004820154818114156143ae57610aba6004840160006152a6565b600080806143bc8585615ae3565b90505b80821080156143cd57508483105b156144c75760008660040183815481106143e9576143e9615afa565b60009182526020808320909101546001600160a01b031680835260038a019091526040909120549091506001600160601b03166144b3576004870160016144308688615ae3565b61443a9190615ae3565b8154811061444a5761444a615afa565b6000918252602090912001546004880180546001600160a01b03909216918590811061447857614478615afa565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055836144ab81615b10565b9450506144c1565b826144bd81615b10565b9350505b506143bf565b8091505b83821015611b4157856004018054806144e6576144e6615c25565b600082815260209020810160001990810180546001600160a01b03191690550190558161451281615b10565b9250506144cb565b6000614525306139ce565b15905090565b603380546001600160a01b038381166001600160a01b03198316179092556040519116907f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80906122b59083908590615c0b565b6000846001600160601b0316118015614598575060008151115b6145b45760405162461bcd60e51b81526004016108d5906157fe565b336000908152603a602052604090206001815460ff1660038111156145db576145db615316565b146145f85760405162461bcd60e51b81526004016108d59061579e565b603c5460005b83518110156146f157600084828151811061461b5761461b615afa565b6020908102919091018101516001600160a01b038116600090815260398352604080822033835260030190935291822054909250614666906001600160601b03908116908b166142b3565b9050806146745750506146df565b603c6040518060400160405280846001600160a01b03168152602001614699846142c2565b6001600160601b039081169091528254600181018455600093845260209384902083519490930151909116600160a01b026001600160a01b039093169290921791015550505b806146e981615b10565b9150506145fe565b506001600160a01b03841615611b4157600061472b8660385484603c8054905061471b9190615ae3565b6147259190615b6e565b90614c9c565b9050614739816037546142b3565b9050846001600160a01b03167f104879b09c38b3b66d79ce8f4cbdcfbe117b79797db65a37ef151d22b5e314718260405161477691815260200190565b60405180910390a28015610e275780603760008282546147969190615ae3565b90915550610e2790506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168683614291565b82546000906001600160601b03166147e9575081612995565b83546000906001600160601b0390811690851611614808575082614815565b5083546001600160601b03165b600080614842837f0000000000000000000000000000000000000000000000000000000000000000614090565b91509150816000141561485a57859350505050612995565b61486481846158fe565b8754909350839088906000906148849084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b0316021790555082866148b491906158fe565b955060006148c786614725856005614c9c565b8854604051632673086360e21b81526001600160a01b03600160601b9092048216600482015260248101869052336044820152606481018390529192507f000000000000000000000000000000000000000000000000000000000000000016906399cc218c90608401600060405180830381600087803b15801561494a57600080fd5b505af115801561495e573d6000803e3d6000fd5b50989a9950505050505050505050565b80546001600160a01b0381166000908152603960205260408120805460018201546002830154939492936001600160601b03600160a01b90940484169386938116926149be92908216911661584a565b6149c8919061584a565b60028401549091506001600160601b031615614a625760028301546001600160601b03908116908316116149fe57819350614a0f565b60028301546001600160601b031693505b600283018054859190600090614a2f9084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055508382614a5f91906158fe565b91505b6000826001600160601b0316118015614a87575060018301546001600160601b031615155b15614b9d578454604051637d5a36b360e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263fab46d6692614ade921690600401615446565b60606040518083038186803b158015614af657600080fd5b505afa158015614b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2e919061589f565b505090506000614b5e827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b506001860180546001600160601b0319166001600160601b0383161790558754909150614b989086906001600160a01b0316866064613c5c565b935050505b6000826001600160601b0316118015614bbf575082546001600160601b031615155b15614bd357614bd0838360646147d0565b91505b8454600090614bf3908490600160a01b90046001600160601b03166158fe565b86546040519192506000916001600160a01b0390911690600080516020615cf983398151915290614c259085906153eb565b60405180910390a38554614c43906001600160a01b03168583613e31565b8354600185015460028601546000926001600160601b0390811692614c6c92908216911661584a565b614c76919061584a565b8754909150614c92906001600160a01b0316610e1783866158fe565b5050505050919050565b60006064614caa8385615b6e565b610bfd9190615b8d565b816001600160a01b0316836001600160a01b031614158015614cd65750600081115b15610aba576001600160a01b03831615614d52576001600160a01b03831660009081526002602052604081208190614d1190614f4e85614f5a565b91509150846001600160a01b0316600080516020615d998339815191528383604051614d47929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610aba576001600160a01b03821660009081526002602052604081208190614d88906150b685614f5a565b91509150836001600160a01b0316600080516020615d9983398151915283836040516118ad929190918252602082015260400190565b6001600160601b038216614dd157505050565b614df6600382614de357614f4e614de7565b6150b65b846001600160601b0316614f5a565b50506000614e03846116bb565b90506001600160a01b03811615611201576001600160a01b03811660009081526002602052604081208190614e529085614e3f57614f4e614e43565b6150b65b876001600160601b0316614f5a565b91509150826001600160a01b0316600080516020615d998339815191528383604051614e88929190918252602082015260400190565b60405180910390a2505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526150c2565b6000614f126002848418615b8d565b610bfd90848416615926565b6040516001600160a01b038316602482015260448101829052610aba90849063a9059cbb60e01b90606401614ecc565b6000610bfd8284615ae3565b825460009081908015614f7b57614f7686612951600184615ae3565b614f7e565b60005b6001600160601b03169250614f9783858763ffffffff16565b91508015615057576000614fc087614fb0600185615ae3565b81548110613b8e57613b8e615afa565b9050438163ffffffff16141561505557614ff981614fdd856142c2565b6001600160601b031660609190911b63ffffffff60601b161790565b87615005600185615ae3565b8154811061501557615015615afa565b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b0316021790555050506150ae565b505b8561506d6150644361432e565b614fdd856142c2565b81546001818101845560009384526020909320600282040180546001600160801b03938416601093909516929092026101000a938402929093021916179055505b935093915050565b6000610bfd8284615926565b6000615117826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166151949092919063ffffffff16565b805190915015610aba57808060200190518101906151359190615c3b565b610aba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108d5565b60606127098484600085856151a8856139ce565b6151f45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108d5565b600080866001600160a01b031685876040516152109190615c89565b60006040518083038185875af1925050503d806000811461524d576040519150601f19603f3d011682016040523d82523d6000602084013e615252565b606091505b509150915061526282828661526d565b979650505050505050565b6060831561527c575081612995565b82511561528c5782518084602001fd5b8160405162461bcd60e51b81526004016108d59190615ca5565b5080546000825590600052602060002090810190610fe691905b8082111561432a57600081556001016152c0565b6001600160a01b0381168114610fe657600080fd5b80356152f4816152d4565b919050565b60006020828403121561530b57600080fd5b8135612995816152d4565b634e487b7160e01b600052602160045260246000fd5b604081016004841061534e57634e487b7160e01b600052602160045260246000fd5b9281526001600160a01b039190911660209091015290565b6000806040838503121561537957600080fd5b8235615384816152d4565b91506020830135615394816152d4565b809150509250929050565b80356001600160601b03811681146152f457600080fd5b600080604083850312156153c957600080fd5b82356153d4816152d4565b91506153e26020840161539f565b90509250929050565b6001600160601b0391909116815260200190565b6000806040838503121561541257600080fd5b823561541d816152d4565b946020939093013593505050565b60006020828403121561543d57600080fd5b610bfd8261539f565b6001600160a01b0391909116815260200190565b6000806000806080858703121561547057600080fd5b843561547b816152d4565b9350602085013561548b816152d4565b9250604085013561549b816152d4565b91506154a96060860161539f565b905092959194509250565b6000806000606084860312156154c957600080fd5b83356154d4816152d4565b925060208401356154e4816152d4565b91506154f26040850161539f565b90509250925092565b6000806040838503121561550e57600080fd5b8235615519816152d4565b915060208301356003811061539457600080fd5b6000806040838503121561554057600080fd5b61541d8361539f565b60008060006060848603121561555e57600080fd5b8335615569816152d4565b92506020840135615579816152d4565b91506040840135615589816152d4565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126155bb57600080fd5b813560206001600160401b03808311156155d7576155d7615594565b8260051b604051601f19603f830116810181811084821117156155fc576155fc615594565b60405293845285810183019383810192508785111561561a57600080fd5b83870191505b8482101561526257615631826152e9565b83529183019190830190615620565b6000806000806080858703121561565657600080fd5b61565f8561539f565b9350602085013592506040850135615676816152d4565b915060608501356001600160401b0381111561569157600080fd5b61569d878288016155aa565b91505092959194509250565b6000602082840312156156bb57600080fd5b5035919050565b600080604083850312156156d557600080fd5b6156de8361539f565b915060208301356001600160401b038111156156f957600080fd5b615705858286016155aa565b9150509250929050565b6000806040838503121561572257600080fd5b823561572d816152d4565b9150602083013563ffffffff8116811461539457600080fd5b6001600160a01b039290921682526001600160601b0316602082015260400190565b6020808252601c908201527b43616c6c6572206973206e6f742074686520676f7665726e616e636560201b604082015260600190565b6020808252601b908201527a105c1c1b1a58d85d1a5bdb881a5cc81b9bdd08185c1c1c9bdd9959602a1b604082015260600190565b60208082526011908201527004e6f7468696e6720746f20746f702d757607c1b604082015260600190565b6020808252601c908201527b14185c985b595d195c9cc81b5d5cdd081899481cdc1958da599a595960221b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b0382811684821680830382111561586c5761586c615834565b01949350505050565b60208082526010908201526f09cdee8d0d2dcce40e8de40e6d8c2e6d60831b604082015260600190565b6000806000606084860312156158b457600080fd5b8351925060208401519150604084015190509250925092565b6020808252601790820152765468657265206973206e6f2064697363726570616e637960481b604082015260600190565b60006001600160601b038381169083168181101561591e5761591e615834565b039392505050565b6000821982111561593957615939615834565b500190565b6020808252601590820152742737ba1037bbb732b91037b910383937bb34b232b960591b604082015260600190565b6020808252601e908201527f43616e277420756e7374616b65206561726c696572207468616e203234680000604082015260600190565b6020808252601a908201527950726f766964657220697320616c726561647920696e2075736560301b604082015260600190565b6020808252600f908201526e4e6f7468696e6720746f2073796e6360881b604082015260600190565b600060208284031215615a1357600080fd5b8151612995816152d4565b6001600160a01b0393841681529190921660208201526001600160601b03909116604082015260600190565b602080825260139082015272546f6f206d75636820746f20756e7374616b6560681b604082015260600190565b6020808252600e908201526d2737ba1030baba3437b934bd32b960911b604082015260600190565b6001600160601b0392831681529116602082015260400190565b6001600160a01b039390931683526001600160601b03918216602084015216604082015260600190565b600082821015615af557615af5615834565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415615b2457615b24615834565b5060010190565b600060208284031215615b3d57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082615b6957615b69615b44565b500690565b6000816000190483118215151615615b8857615b88615834565b500290565b600082615b9c57615b9c615b44565b500490565b84815260208082018590526001600160a01b038481166040840152608060608401819052845190840181905260009285810192909160a0860190855b81811015615bfb578551841683529484019491840191600101615bdd565b50909a9950505050505050505050565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615c4d57600080fd5b8151801515811461299557600080fd5b60005b83811015615c78578181015183820152602001615c60565b838111156112015750506000910152565b60008251615c9b818460208701615c5d565b9190910192915050565b6020815260008251806020840152615cc4816040850160208701615c5d565b601f01601f1916919091016040019291505056fe96a3c8e9780312d2e82e746b65a21aaca458dd91c375fea6066416ef241e87cbfab4356687062505cc650292203fc214dc8cb4b8bd603e53699e3297186e8dd6dfabb38007f28b342b8f536c8c832f746c2a53627133be65453ac0b98968f40e1221739f34decc066e1d68b15c5fc76b65e7ebe2f08c9f38b3ea3092f9912353b8f8e488e98410126386f575c0e233d2effb198a4e68af68ab1de9c2e542ae82e5beba097f34db5d25b3e8383f0c9ba0b9fe180a3a8d2e761c11207221386dfddec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724a2646970667358221220bbe02e1872284b901740e85162586137f035a2ce44fc9c31237466b4008db80c64736f6c63430008090033",
  "deployedBytecode": "",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "TokenStaking is upgradeable, using OpenZeppelin's Upgradeability      framework. As such, it is required to satisfy OZ's guidelines, like      restrictions on constructors, immutable variables, base contracts and      libraries. See https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "params": {
          "_keepStake": "Address of Keep contract with grant owners",
          "_keepStakingContract": "Address of Keep staking contract",
          "_keepVendingMachine": "Address of Keep vending machine",
          "_nucypherStakingContract": "Address of NuCypher staking contract",
          "_nucypherVendingMachine": "Address of NuCypher vending machine",
          "_token": "Address of T token contract"
        }
      },
      "getMinStaked(address,uint8)": {
        "details": "For example, suppose the given staking provider has 10 T, 20 T worth      of KEEP, and 30 T worth of NU all staked, and the maximum      application authorization is 40 T, then `getMinStaked` for      that staking provider returns:          * 0 T if KEEP stake type specified i.e.            min = 40 T max - (10 T + 30 T worth of NU) = 0 T          * 10 T if NU stake type specified i.e.            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T          * 0 T if T stake type specified i.e.            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T      In other words, the minimum stake amount for the specified      stake type is the minimum amount of stake of the given type      needed to satisfy the maximum application authorization given      the staked amounts of the other stake types for that staking      provider."
      },
      "getPastTotalSupply(uint256)": {
        "details": "`blockNumber` must have been already mined",
        "params": {
          "blockNumber": "The block number to get the total supply at"
        }
      },
      "getPastVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will      revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "getStartStakingTimestamp(address)": {
        "details": "This value is set at most once."
      },
      "getVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "increaseAuthorization(address,address,uint96)": {
        "details": "Calls `authorizationIncreased` callback on the given application to      notify the application about authorization change.      See `IApplication`."
      },
      "notifyNuStakeDiscrepancy(address)": {
        "details": "Real discrepancy between T and Nu is impossible.         This method is a safeguard in case of bugs in NuCypher staking         contract"
      },
      "refreshKeepStakeOwner(address)": {
        "details": "The staking provider in T staking contract is the legacy KEEP      staking contract operator."
      },
      "requestAuthorizationDecrease(address)": {
        "details": "Calls `authorizationDecreaseRequested` callback      for each authorized application. See `IApplication`."
      },
      "requestAuthorizationDecrease(address,address,uint96)": {
        "details": "Calls `authorizationDecreaseRequested` callback on the given      application. See `IApplication`."
      },
      "rolesOf(address)": {
        "returns": {
          "authorizer": "Authorizer address.",
          "beneficiary": "Beneficiary address.",
          "owner": "Stake owner address."
        }
      },
      "seize(uint96,uint256,address,address[])": {
        "details": "This method doesn't emit events for staking providers that are         added to the queue. If necessary  events can be added to the         application level."
      },
      "setMinimumStakeAmount(uint96)": {
        "details": "Staking providers are not required to maintain a minimum T stake      all the time. 24 hours after the delegation, T stake can be reduced      below the minimum stake. The minimum stake in the staking contract      is just to protect against griefing stake operation. Please note      that each application may have its own minimum authorization though      and the authorization can not be higher than the stake."
      },
      "slash(uint96,address[])": {
        "details": "This method doesn't emit events for providers that are added to         the queue. If necessary  events can be added to the application         level."
      },
      "stake(address,address,address,uint96)": {
        "details": "The owner of the delegation needs to have the amount approved to      transfer to the staking contract."
      },
      "stakeKeep(address)": {
        "details": "The staking provider in T staking contract is the legacy KEEP      staking contract operator."
      },
      "stakes(address)": {
        "details": "All values are in T denomination"
      },
      "topUp(address,uint96)": {
        "details": "The sender of this transaction needs to have the amount approved to      transfer to the staking contract."
      },
      "unstakeKeep(address)": {
        "details": "This function (or `unstakeAll`) must be called before         `undelegate`/`undelegateAt` in Keep staking contract. Otherwise         provider can be slashed by `notifyKeepStakeDiscrepancy` method."
      },
      "unstakeNu(address,uint96)": {
        "details": "This function (or `unstakeAll`) must be called before `withdraw`         in NuCypher staking contract. Otherwise NU tokens can't be         unlocked.",
        "params": {
          "amount": "Amount of NU to unstake in T denomination",
          "stakingProvider": "Staking provider address"
        }
      }
    },
    "stateVariables": {
      "keepRatio": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "keepStake": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "keepStakingContract": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "nucypherRatio": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "nucypherStakingContract": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "token": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_13225": {
          "entryPoint": null,
          "id": 13225,
          "parameterSlots": 6,
          "returnSlots": 0
        },
        "@isContract_393": {
          "entryPoint": 856,
          "id": 393,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address_fromMemory": {
          "entryPoint": 1070,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_contract$_T_$18453t_contract$_IKeepTokenStaking_$11801t_contract$_INuCypherStakingEscrow_$11833t_contract$_VendingMachine_$18896t_contract$_VendingMachine_$18896t_contract$_KeepStake_$12761_fromMemory": {
          "entryPoint": 896,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 6
        },
        "abi_decode_tuple_t_uint256_fromMemory": {
          "entryPoint": 1044,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_f733a41fcedc3e9e0308411f0a45e61f4940803bee589af54e80152bd5556ad3__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "validator_revert_contract_T": {
          "entryPoint": 871,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:2241:80",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:80",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "62:86:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "126:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "135:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "138:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "128:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "128:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "128:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "85:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "96:5:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "111:3:80",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "116:1:80",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "107:3:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "107:11:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "120:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "103:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "103:19:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "92:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "92:31:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "82:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:42:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "75:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "75:50:80"
                      },
                      "nodeType": "YulIf",
                      "src": "72:70:80"
                    }
                  ]
                },
                "name": "validator_revert_contract_T",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "51:5:80",
                    "type": ""
                  }
                ],
                "src": "14:134:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "456:776:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "503:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "512:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "515:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "505:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "505:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "505:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "477:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "486:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "473:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "473:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "498:3:80",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "469:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "469:33:80"
                      },
                      "nodeType": "YulIf",
                      "src": "466:53:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "528:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "547:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "541:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "541:16:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "532:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "594:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_T",
                          "nodeType": "YulIdentifier",
                          "src": "566:27:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "566:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "566:34:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "609:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "619:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "609:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "633:40:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "658:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "669:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "654:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "654:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "648:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "648:25:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "637:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "710:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_T",
                          "nodeType": "YulIdentifier",
                          "src": "682:27:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "682:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "682:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "727:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "737:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "727:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "753:40:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "778:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "789:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "774:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "774:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "768:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "768:25:80"
                      },
                      "variables": [
                        {
                          "name": "value_2",
                          "nodeType": "YulTypedName",
                          "src": "757:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "830:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_T",
                          "nodeType": "YulIdentifier",
                          "src": "802:27:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "802:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "802:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "847:17:80",
                      "value": {
                        "name": "value_2",
                        "nodeType": "YulIdentifier",
                        "src": "857:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "847:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "873:40:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "898:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "909:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "894:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "894:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "888:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "888:25:80"
                      },
                      "variables": [
                        {
                          "name": "value_3",
                          "nodeType": "YulTypedName",
                          "src": "877:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_3",
                            "nodeType": "YulIdentifier",
                            "src": "950:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_T",
                          "nodeType": "YulIdentifier",
                          "src": "922:27:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "922:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "922:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "967:17:80",
                      "value": {
                        "name": "value_3",
                        "nodeType": "YulIdentifier",
                        "src": "977:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "967:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "993:41:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1018:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1029:3:80",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1014:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1014:19:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1008:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1008:26:80"
                      },
                      "variables": [
                        {
                          "name": "value_4",
                          "nodeType": "YulTypedName",
                          "src": "997:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_4",
                            "nodeType": "YulIdentifier",
                            "src": "1071:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_T",
                          "nodeType": "YulIdentifier",
                          "src": "1043:27:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1043:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1043:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1088:17:80",
                      "value": {
                        "name": "value_4",
                        "nodeType": "YulIdentifier",
                        "src": "1098:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "1088:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1114:41:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1139:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1150:3:80",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1135:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1135:19:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1129:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1129:26:80"
                      },
                      "variables": [
                        {
                          "name": "value_5",
                          "nodeType": "YulTypedName",
                          "src": "1118:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_5",
                            "nodeType": "YulIdentifier",
                            "src": "1192:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_T",
                          "nodeType": "YulIdentifier",
                          "src": "1164:27:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1164:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1164:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1209:17:80",
                      "value": {
                        "name": "value_5",
                        "nodeType": "YulIdentifier",
                        "src": "1219:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "1209:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_contract$_T_$18453t_contract$_IKeepTokenStaking_$11801t_contract$_INuCypherStakingEscrow_$11833t_contract$_VendingMachine_$18896t_contract$_VendingMachine_$18896t_contract$_KeepStake_$12761_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "382:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "393:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "405:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "413:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "421:6:80",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "429:6:80",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "437:6:80",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "445:6:80",
                    "type": ""
                  }
                ],
                "src": "153:1079:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1318:103:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1364:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1373:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1376:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1366:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1366:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1366:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1339:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1348:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1335:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1335:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1360:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1331:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1331:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1328:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1389:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1405:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1399:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1399:16:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1389:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1284:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1295:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1307:6:80",
                    "type": ""
                  }
                ],
                "src": "1237:184:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1527:102:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1537:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1549:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1560:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1545:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1545:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1537:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1579:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1594:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1610:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1615:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1606:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1606:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1619:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1602:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1602:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1590:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1590:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1572:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1572:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1572:51:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1496:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1507:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1518:4:80",
                    "type": ""
                  }
                ],
                "src": "1426:203:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1715:173:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1761:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1770:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1773:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1763:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1763:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1763:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1736:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1745:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1732:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1732:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1757:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1728:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1728:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1725:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1786:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1805:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1799:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1799:16:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "1790:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1852:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_T",
                          "nodeType": "YulIdentifier",
                          "src": "1824:27:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1824:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1824:34:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1867:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "1877:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1867:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1681:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1692:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1704:6:80",
                    "type": ""
                  }
                ],
                "src": "1634:254:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2067:172:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2084:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2095:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2077:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2077:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2077:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2118:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2129:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2114:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2114:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2134:2:80",
                            "type": "",
                            "value": "22"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2107:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2107:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2107:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2157:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2168:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2153:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2153:18:80"
                          },
                          {
                            "hexValue": "57726f6e6720696e70757420706172616d6574657273",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "2173:24:80",
                            "type": "",
                            "value": "Wrong input parameters"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2146:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2146:52:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2146:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2207:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2219:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2230:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2215:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2215:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2207:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_f733a41fcedc3e9e0308411f0a45e61f4940803bee589af54e80152bd5556ad3__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2044:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2058:4:80",
                    "type": ""
                  }
                ],
                "src": "1893:346:80"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_contract_T(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_T_$18453t_contract$_IKeepTokenStaking_$11801t_contract$_INuCypherStakingEscrow_$11833t_contract$_VendingMachine_$18896t_contract$_VendingMachine_$18896t_contract$_KeepStake_$12761_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_T(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_T(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_T(value_2)\n        value2 := value_2\n        let value_3 := mload(add(headStart, 96))\n        validator_revert_contract_T(value_3)\n        value3 := value_3\n        let value_4 := mload(add(headStart, 128))\n        validator_revert_contract_T(value_4)\n        value4 := value_4\n        let value_5 := mload(add(headStart, 160))\n        validator_revert_contract_T(value_5)\n        value5 := value_5\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_T(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_f733a41fcedc3e9e0308411f0a45e61f4940803bee589af54e80152bd5556ad3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Wrong input parameters\")\n        tail := add(headStart, 96)\n    }\n}",
          "id": 80,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x633B CODESIZE SUB DUP1 PUSH3 0x633B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x380 JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAC SWAP2 SWAP1 PUSH3 0x414 JUMP JUMPDEST GT DUP1 ISZERO PUSH3 0x13F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA57EBCF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x14AFD79E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x10E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x134 SWAP2 SWAP1 PUSH3 0x42E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH3 0x1C5 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBC5B6F3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x178B6DE6 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x19D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1C3 SWAP2 SWAP1 PUSH3 0x414 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH3 0x1E3 JUMPI POP PUSH3 0x1E3 DUP2 PUSH3 0x358 PUSH1 0x20 SHL PUSH3 0x39CE OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x234 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E6720696E70757420706172616D657465727300000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x80 MSTORE DUP6 DUP2 AND PUSH1 0xA0 MSTORE DUP2 DUP2 AND PUSH1 0xC0 MSTORE DUP5 DUP2 AND PUSH1 0xE0 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x71CA337D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 DUP6 AND SWAP2 PUSH4 0x71CA337D SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x2A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x2CA SWAP2 SWAP1 PUSH3 0x414 JUMP JUMPDEST PUSH2 0x100 DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x71CA337D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x321 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x347 SWAP2 SWAP1 PUSH3 0x414 JUMP JUMPDEST PUSH2 0x120 MSTORE POP PUSH3 0x455 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x3A7 DUP2 PUSH3 0x367 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD SWAP1 SWAP7 POP PUSH3 0x3BA DUP2 PUSH3 0x367 JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x3CD DUP2 PUSH3 0x367 JUMP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x3E0 DUP2 PUSH3 0x367 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x3F3 DUP2 PUSH3 0x367 JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x406 DUP2 PUSH3 0x367 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x44E DUP2 PUSH3 0x367 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x5DEE PUSH3 0x54D PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1011 ADD MSTORE DUP2 DUP2 PUSH2 0x1779 ADD MSTORE DUP2 DUP2 PUSH2 0x2804 ADD MSTORE DUP2 DUP2 PUSH2 0x418B ADD MSTORE PUSH2 0x481E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xCF4 ADD MSTORE DUP2 DUP2 PUSH2 0x3CB3 ADD MSTORE DUP2 DUP2 PUSH2 0x4264 ADD MSTORE PUSH2 0x4B3A ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x276C ADD MSTORE DUP2 DUP2 PUSH2 0x40E3 ADD MSTORE PUSH2 0x4906 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1421 ADD MSTORE PUSH2 0x2C51 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xC4D ADD MSTORE DUP2 DUP2 PUSH2 0x14DC ADD MSTORE DUP2 DUP2 PUSH2 0x1595 ADD MSTORE DUP2 DUP2 PUSH2 0x1936 ADD MSTORE DUP2 DUP2 PUSH2 0x2400 ADD MSTORE DUP2 DUP2 PUSH2 0x3DA9 ADD MSTORE DUP2 DUP2 PUSH2 0x41BE ADD MSTORE PUSH2 0x4AA8 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xA89 ADD MSTORE DUP2 DUP2 PUSH2 0xFB5 ADD MSTORE DUP2 DUP2 PUSH2 0x1B10 ADD MSTORE DUP2 DUP2 PUSH2 0x1EF2 ADD MSTORE DUP2 DUP2 PUSH2 0x2B6E ADD MSTORE DUP2 DUP2 PUSH2 0x306F ADD MSTORE DUP2 DUP2 PUSH2 0x32E8 ADD MSTORE PUSH2 0x47A9 ADD MSTORE PUSH2 0x5DEE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x67E6BB1 EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xFA78BF4 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x16934FC4 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x1D5270D3 EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x28C8C55F EQ PUSH2 0x39B JUMPI DUP1 PUSH4 0x2C686CA0 EQ PUSH2 0x3AE JUMPI DUP1 PUSH4 0x2CD62915 EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x2DE94807 EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x32719E06 EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x402121AF EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0x43445748 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x44E97423 EQ PUSH2 0x4B0 JUMPI DUP1 PUSH4 0x483046BB EQ PUSH2 0x4B9 JUMPI DUP1 PUSH4 0x4A11FAE3 EQ PUSH2 0x4CC JUMPI DUP1 PUSH4 0x4EC0A9FE EQ PUSH2 0x4DF JUMPI DUP1 PUSH4 0x56F958EE EQ PUSH2 0x4F2 JUMPI DUP1 PUSH4 0x570EA461 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x58CCDF38 EQ PUSH2 0x538 JUMPI DUP1 PUSH4 0x5961D5E9 EQ PUSH2 0x54B JUMPI DUP1 PUSH4 0x5AA6E675 EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0x5F2D5030 EQ PUSH2 0x571 JUMPI DUP1 PUSH4 0x6D08F5B0 EQ PUSH2 0x584 JUMPI DUP1 PUSH4 0x6D9B9A34 EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0x6DA91D8B EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x5BD JUMPI DUP1 PUSH4 0x7368DBA2 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0x75E0AE5A EQ PUSH2 0x5EE JUMPI DUP1 PUSH4 0x793C1365 EQ PUSH2 0x601 JUMPI DUP1 PUSH4 0x7D0379F0 EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x61D JUMPI DUP1 PUSH4 0x81B0A0CE EQ PUSH2 0x625 JUMPI DUP1 PUSH4 0x83DDBA8F EQ PUSH2 0x638 JUMPI DUP1 PUSH4 0x86D18A25 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0x8B7ADC09 EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x8E46ECB6 EQ PUSH2 0x671 JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x684 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x697 JUMPI DUP1 PUSH4 0xA0D6FF9A EQ PUSH2 0x6AA JUMPI DUP1 PUSH4 0xA7BB8BA8 EQ PUSH2 0x6BD JUMPI DUP1 PUSH4 0xAD30E4CD EQ PUSH2 0x6C6 JUMPI DUP1 PUSH4 0xAF5F24AD EQ PUSH2 0x6CE JUMPI DUP1 PUSH4 0xB1958150 EQ PUSH2 0x6E1 JUMPI DUP1 PUSH4 0xB626CA3E EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0xBE2F3351 EQ PUSH2 0x707 JUMPI DUP1 PUSH4 0xD38BFFF4 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0xD3E25EF3 EQ PUSH2 0x72D JUMPI DUP1 PUSH4 0xD3ECB6CD EQ PUSH2 0x740 JUMPI DUP1 PUSH4 0xDFEFADFF EQ PUSH2 0x753 JUMPI DUP1 PUSH4 0xE009245A EQ PUSH2 0x766 JUMPI DUP1 PUSH4 0xE3AE4D0A EQ PUSH2 0x7AC JUMPI DUP1 PUSH4 0xEAA86492 EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xEF47BF40 EQ PUSH2 0x7D2 JUMPI DUP1 PUSH4 0xF07F91C5 EQ PUSH2 0x7E5 JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x7F8 JUMPI DUP1 PUSH4 0xF1F6C315 EQ PUSH2 0x835 JUMPI DUP1 PUSH4 0xF6E0FAEB EQ PUSH2 0x856 JUMPI DUP1 PUSH4 0xF848BEFF EQ PUSH2 0x882 JUMPI DUP1 PUSH4 0xFFD2F984 EQ PUSH2 0x895 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EC PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0x532C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x316 PUSH2 0x311 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35E PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP2 DUP3 AND SWAP4 SWAP3 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x316 PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x8AB JUMP JUMPDEST PUSH2 0x316 PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x982 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x3BC CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xABF JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x34 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x426 PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP2 DUP3 SWAP1 DIV DUP5 AND SWAP5 SWAP3 DUP3 SWAP1 DIV DUP5 AND SWAP4 SWAP2 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x46A SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH2 0x46A PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FF JUMP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x316 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x36 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x4C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x542B JUMP JUMPDEST PUSH2 0xF27 JUMP JUMPDEST PUSH2 0x3CA PUSH2 0x4DA CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x103C JUMP JUMPDEST PUSH2 0x316 PUSH2 0x500 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x1207 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x513 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x135A JUMP JUMPDEST PUSH2 0x52B PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x5446 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x546 CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x16D9 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x559 CALLDATASIZE PUSH1 0x4 PUSH2 0x545A JUMP JUMPDEST PUSH2 0x18BC JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x52B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x57F CALLDATASIZE PUSH1 0x4 PUSH2 0x54B4 JUMP JUMPDEST PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x592 CALLDATASIZE PUSH1 0x4 PUSH2 0x542B JUMP JUMPDEST PUSH2 0x1D8D JUMP JUMPDEST PUSH2 0x316 PUSH2 0x5A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x1E12 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x5B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x54FB JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x5D0 PUSH2 0x5CB CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x2091 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x38 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x5FC CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x37 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x618 CALLDATASIZE PUSH1 0x4 PUSH2 0x552D JUMP JUMPDEST PUSH2 0x2236 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x22C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x633 CALLDATASIZE PUSH1 0x4 PUSH2 0x5549 JUMP JUMPDEST PUSH2 0x2386 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x646 CALLDATASIZE PUSH1 0x4 PUSH2 0x5640 JUMP JUMPDEST PUSH2 0x258E JUMP JUMPDEST PUSH2 0x316 PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x259A JUMP JUMPDEST PUSH2 0x46A PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x2691 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x2711 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x692 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x46A PUSH2 0x6A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x290B JUMP JUMPDEST PUSH2 0x316 PUSH2 0x6B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x299C JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x3D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3B SLOAD PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x316 PUSH2 0x6DC CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x2BA7 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x6EF CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x2D44 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x702 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x2DA3 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x715 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x2EF1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x728 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x3096 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x73B CALLDATASIZE PUSH1 0x4 PUSH2 0x542B JUMP JUMPDEST PUSH2 0x30C9 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x74E CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x3130 JUMP JUMPDEST PUSH2 0x52B PUSH2 0x761 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x3321 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x774 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x7BA CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x334B JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0x46A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x7E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x34AF JUMP JUMPDEST PUSH2 0x316 PUSH2 0x7F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x56C2 JUMP JUMPDEST PUSH2 0x35F8 JUMP JUMPDEST PUSH2 0x80B PUSH2 0x806 CALLDATASIZE PUSH1 0x4 PUSH2 0x570F JUMP JUMPDEST PUSH2 0x3605 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x848 PUSH2 0x843 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x36B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0x5746 JUMP JUMPDEST PUSH2 0x3CA PUSH2 0x864 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x890 CALLDATASIZE PUSH1 0x4 PUSH2 0x54B4 JUMP JUMPDEST PUSH2 0x36EC JUMP JUMPDEST PUSH1 0x3C SLOAD PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x8A7 DUP3 DUP3 PUSH2 0x39DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x90E JUMPI PUSH2 0x90E PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x92B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH2 0x100 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0x5A38EBC6EF9570E77E12B2162C48413D53357005ADD9BE886AB130A58D44FEB8 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH2 0x9C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57D3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0x9E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0xA1F SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x584A JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D59 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH2 0xA6A SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xA7C DUP4 DUP4 PUSH2 0x3AF8 JUMP JUMPDEST PUSH2 0xABA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP7 AND PUSH2 0x3B04 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0xB30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74207468652070616E696320627574746F6E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB60 JUMPI PUSH2 0xB60 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0xBA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B713BA103830BAB9B29030B8383634B1B0BA34B7B7 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CD9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xBFD SWAP1 DUP4 PUSH2 0x3B10 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0xC48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5875 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAB46D66 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC97 SWAP2 SWAP1 PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE7 SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST SWAP3 POP POP SWAP2 POP PUSH1 0x0 PUSH2 0xD18 DUP4 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP PUSH1 0x1 DUP6 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND DUP2 GT DUP1 PUSH2 0xD3B JUMPI POP DUP3 ISZERO ISZERO JUMPDEST PUSH2 0xD57 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x58CD JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x35 SLOAD PUSH1 0x36 SLOAD PUSH2 0xD8F SWAP3 DUP9 SWAP3 DUP11 SWAP3 SWAP2 AND SWAP1 PUSH2 0x3C5C JUMP JUMPDEST POP PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0xDAB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 ISZERO ISZERO DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CF9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH2 0xDD8 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP4 ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x1 DUP7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD PUSH2 0xE1C SWAP1 DUP9 SWAP1 PUSH2 0xE17 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x58FE JUMP JUMPDEST PUSH2 0x3E25 JUMP JUMPDEST PUSH2 0xE27 DUP8 DUP8 DUP4 PUSH2 0x3E31 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE8A JUMPI PUSH2 0xE8A PUSH2 0x5316 JUMP JUMPDEST EQ DUP1 PUSH2 0xEAB JUMPI POP PUSH1 0x2 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xEA9 JUMPI PUSH2 0xEA9 PUSH2 0x5316 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xEF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x21B0B713BA103234B9B0B136329030B8383634B1B0BA34B7B7 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x3 SWAP1 DUP2 OR DUP3 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CD9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0xF50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF6B SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x9DE5348508C6AD1F6FF7FCFB84E126BB094784E85BF83F7E3801BC44F9C6DC97 SWAP1 PUSH2 0xFA0 SWAP1 DUP4 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xFE6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP6 AND PUSH2 0x3B04 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1035 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x10A1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x10A1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x10BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 PUSH2 0x1125 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F7468696E6720746F20756E7374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH2 0x1130 DUP5 PUSH1 0x1 PUSH2 0x1F22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO PUSH2 0x1184 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x12D9595C081CDD185AD9481CDD1A5B1B08185D5D1A1BDC9A5E9959 PUSH1 0x2A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP4 PUSH1 0x5 ADD SLOAD PUSH2 0x1198 SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x11DD SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x1201 DUP5 DUP3 PUSH2 0x3E25 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x126C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x126C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x1288 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 PUSH2 0x12B7 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND DUP6 PUSH2 0x40DE JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND GT PUSH2 0x12E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57D3 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x12FF SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D59 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x1328 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND OR DUP4 SSTORE PUSH2 0x1353 DUP6 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1380 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO PUSH2 0x13C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13CE DUP4 PUSH2 0x41B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND PUSH2 0x13F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59D8 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0xF9934B PUSH1 0xE1 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1F32696 SWAP1 PUSH2 0x145E SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x148A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AE SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND MUL OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH4 0xFB1677B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xFB1677B1 SWAP1 PUSH2 0x1513 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x152B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x153F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1563 SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST PUSH1 0x2 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND MUL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xBA7BFFD3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xBA7BFFD3 SWAP1 PUSH2 0x15CC SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x161C SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE TIMESTAMP PUSH1 0x5 DUP4 ADD SSTORE PUSH2 0x1655 DUP4 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH1 0x1 DUP1 DUP6 ADD SLOAD PUSH1 0x2 DUP7 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x16AE SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x60 SHL SWAP3 DUP4 SWAP1 DIV DUP2 AND SWAP4 SWAP3 SWAP1 SWAP2 DIV AND SWAP1 DUP9 SWAP1 PUSH2 0x5A1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x173E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x173E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x175A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x179D DUP5 PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST SWAP2 POP PUSH2 0x17AB SWAP1 POP DUP2 DUP6 PUSH2 0x58FE JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x17ED JUMPI POP DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x17D7 DUP7 PUSH1 0x0 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x17E1 SWAP1 DUP7 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO JUMPDEST PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A4A JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP4 PUSH1 0x5 ADD SLOAD PUSH2 0x181D SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x183B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST DUP2 SLOAD DUP5 SWAP1 DUP4 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1858 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x1886 DUP6 DUP6 PUSH2 0x3E25 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 PUSH1 0x40 MLOAD PUSH2 0x18AD SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x18DC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x18F0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0x190C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH4 0x7D5A36B3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 PUSH32 0x0 AND SWAP1 PUSH4 0xFAB46D66 SWAP1 PUSH2 0x196B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1997 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19BB SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST POP SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x19DC JUMPI POP DUP2 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST PUSH2 0x19F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59A4 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1A27 JUMPI POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV DUP2 AND SWAP1 DUP5 AND LT ISZERO JUMPDEST PUSH2 0x1A71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x416D6F756E74206973206C657373207468616E206D696E696D756D PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x60 SHL CALLER DUP2 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND OR DUP5 SSTORE PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP5 MUL SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP2 DUP6 AND SWAP2 DUP7 AND MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND OR PUSH1 0x2 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x5 DUP4 ADD SSTORE PUSH2 0x1ACD DUP7 DUP5 PUSH2 0x3AF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLER PUSH1 0x2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1AFB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1B41 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP8 AND PUSH2 0x3B04 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP5 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x1B8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1BBF JUMPI PUSH2 0x1BBF PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x1BDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0x1C05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP7 AND SWAP2 AND LT ISZERO PUSH2 0x1C87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x105B5BDD5B9D08195E18D959591CC8185D5D1A1BDC9A5E9959 PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP7 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x0 SWAP3 PUSH2 0x1CBF SWAP3 DUP9 SWAP3 DUP2 AND SWAP2 AND OR PUSH2 0x58FE JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP3 SWAP1 DUP11 AND SWAP2 PUSH32 0x132E76775C4E3B4B2C36FE4ACC18D539B6C34B984AC6BA494A5996C48D8A0174 SWAP2 PUSH2 0x1D0E SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6A7F7A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0x6A7F7A90 SWAP2 PUSH2 0x1D52 SWAP2 DUP12 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND MUL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x91D1E8918C0EC490B6ECCD803DB78273458F0A7D4B3915E062F1402E9521F518 SWAP1 PUSH2 0x1E07 SWAP1 DUP4 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1E3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x37 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO PUSH2 0x1E8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x4E6F7420656E6F75676820746F6B656E73 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1EA6 SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x7083CB4F4C81BB6D7425A5BDE6B6969CD8C446730ED572607EF79246BC44EE42 SWAP1 PUSH2 0x1EDD SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH2 0x5746 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x8A7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP1 JUMPDEST PUSH1 0x4 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x1FB4 JUMPI PUSH1 0x0 DUP4 PUSH1 0x4 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1F60 JUMPI PUSH2 0x1F60 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x1F9E SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x429C JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x1FAC SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F3D JUMP JUMPDEST POP DUP1 PUSH2 0x1FC5 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x2 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1FD9 JUMPI PUSH2 0x1FD9 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x2004 JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x1FF7 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x42B3 JUMP JUMPDEST PUSH2 0x2001 SWAP1 DUP3 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2018 JUMPI PUSH2 0x2018 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x2040 JUMPI DUP2 SLOAD PUSH2 0x2033 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x42B3 JUMP JUMPDEST PUSH2 0x203D SWAP1 DUP3 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2054 JUMPI PUSH2 0x2054 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x207F JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x2072 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x42B3 JUMP JUMPDEST PUSH2 0x207C SWAP1 DUP3 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x2088 DUP2 PUSH2 0x42C2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xC00 SWAP1 PUSH2 0x432E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x20DA JUMPI PUSH2 0x20DA PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x20F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x3 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x217B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x4E6F206465617574686F72697A696E6720696E2070726F63657373 PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND DUP3 PUSH1 0x0 PUSH2 0x219E DUP4 DUP6 PUSH2 0x58FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP2 AND DUP6 SSTORE PUSH1 0x40 MLOAD CALLER SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D19 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x2201 SWAP3 DUP8 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2223 JUMPI PUSH2 0x2223 DUP4 PUSH1 0x1 PUSH2 0x4393 JUMP JUMPDEST POP SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2260 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x35 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x36 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x3F84F36F8E044BBBC00D303AE27C8871614781AC684742A3D8DB7EB2EB98785F SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22DC JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x22E4 JUMP JUMPDEST PUSH2 0x22E4 PUSH2 0x451A JUMP JUMPDEST PUSH2 0x2347 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x2369 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH2 0x2372 CALLER PUSH2 0x452B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x23A6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x23BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO ISZERO JUMPDEST PUSH2 0x23D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH4 0x7D5A36B3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 PUSH32 0x0 AND SWAP1 PUSH4 0xFAB46D66 SWAP1 PUSH2 0x2435 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x244D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2461 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2485 SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST POP SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x24A6 JUMPI POP DUP2 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST PUSH2 0x24C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24CE CALLER DUP8 PUSH2 0x40DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0x24F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL CALLER DUP2 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP5 AND SWAP2 SWAP1 SWAP2 OR DUP6 SSTORE PUSH1 0x2 DUP6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND DUP6 MUL SWAP2 DUP5 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP7 ADD DUP1 SLOAD SWAP2 DUP10 AND SWAP1 SWAP4 MUL SWAP2 AND OR SWAP1 SSTORE TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH2 0x2550 DUP7 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLER PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP9 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH2 0x257E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1201 DUP5 DUP5 DUP5 DUP5 PUSH2 0x457E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP1 JUMPDEST PUSH1 0x4 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x263E JUMPI PUSH1 0x0 DUP4 PUSH1 0x4 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x25D8 JUMPI PUSH2 0x25D8 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 ISZERO PUSH2 0x2629 JUMPI PUSH2 0x261C DUP7 DUP4 DUP4 PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x2626 DUP2 DUP6 PUSH2 0x584A JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x2636 SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25B5 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x139BDD1A1A5B99C81DD85CC8185D5D1A1BDC9A5E9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH2 0x26CE SWAP3 DUP2 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x26D8 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x2709 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x58FE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2750 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5875 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBC5B6F3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 PUSH4 0x178B6DE6 SWAP3 PUSH2 0x27AA SWAP3 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27FA SWAP2 SWAP1 PUSH2 0x5B2B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2828 DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND DUP2 GT PUSH2 0x285A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x58CD JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR DUP6 SSTORE PUSH1 0x35 SLOAD PUSH1 0x36 SLOAD PUSH2 0x288A SWAP3 DUP8 SWAP3 AND SWAP1 PUSH2 0x47D0 JUMP JUMPDEST POP DUP4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x28A3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 ISZERO ISZERO DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CF9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH2 0x28D0 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x28E3 DUP7 DUP7 DUP4 PUSH2 0x3E31 JUMP JUMPDEST DUP5 SLOAD PUSH2 0x1B41 SWAP1 DUP8 SWAP1 PUSH2 0xE17 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC00 PUSH1 0x3 DUP4 PUSH2 0x3B10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2992 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x298D SWAP1 PUSH2 0x2951 PUSH1 0x1 DUP5 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x2961 JUMPI PUSH2 0x2961 PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x10 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2995 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2A01 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x2A01 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x2A1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD ISZERO PUSH2 0x2A80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14DD185AD9481CDD1A5B1B08185D5D1A1BDC9A5E9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x2A94 SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x2AB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x2ADB SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x2AE5 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x2B0E SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP1 SWAP3 SSTORE PUSH1 0x1 DUP5 ADD DUP1 SLOAD DUP4 AND SWAP1 SSTORE DUP4 SLOAD SWAP1 SWAP2 AND DUP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2B4F DUP6 DUP4 PUSH2 0x3E25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND ISZERO PUSH2 0x1353 JUMPI DUP3 SLOAD PUSH2 0x1353 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2C0C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x2C0C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x2C28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH3 0xF9934B PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 PUSH32 0x0 AND SWAP1 PUSH4 0x1F32696 SWAP1 PUSH2 0x2C86 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CD6 SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP3 DIV DUP2 AND SWAP2 SWAP1 DUP8 AND SWAP1 PUSH32 0xDA8908EA0ECABDA6B6DEC96ED40B9C47FFBF9BE10F30912965C984FACE902E14 SWAP1 PUSH1 0x0 SWAP1 LOG4 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2D6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x34 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xF82F602E8097A5C312216F60CA94CD1FF03AAC29893F9ADEF7ED7E6AE33C76E2 SWAP1 PUSH1 0x20 ADD PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2DD2 JUMPI PUSH2 0x2DD2 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x2E1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x105C1C1B1A58D85D1A5BDB881A5CC81B9BDD08191A5CD8589B1959 PUSH1 0x2A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE PUSH1 0x3 DUP5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 PUSH2 0x2E9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4170706C69636174696F6E206973206E6F7420617574686F72697A6564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND DUP3 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP2 SWAP1 DUP8 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D19 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x2EDE SWAP1 DUP6 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1353 DUP4 PUSH1 0x1 PUSH2 0x4393 JUMP JUMPDEST PUSH1 0x3C SLOAD PUSH1 0x3D SLOAD LT DUP1 ISZERO PUSH2 0x2F04 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x2F45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F7468696E6720746F2070726F63657373 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3D SLOAD PUSH2 0x2F55 SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F66 DUP2 PUSH1 0x3C DUP1 SLOAD SWAP1 POP PUSH2 0x42B3 JUMP JUMPDEST SWAP1 POP PUSH1 0x3D SLOAD DUP2 PUSH2 0x2F76 SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST PUSH1 0x3D SLOAD SWAP1 SWAP3 POP PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2FD2 JUMPI PUSH1 0x0 PUSH1 0x3C DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2F9D JUMPI PUSH2 0x2F9D PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP PUSH2 0x2FB2 DUP2 PUSH2 0x496E JUMP JUMPDEST PUSH2 0x2FBC SWAP1 DUP5 PUSH2 0x584A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x2FCA SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2F80 JUMP JUMPDEST PUSH1 0x3D DUP2 SWAP1 SSTORE PUSH1 0x0 PUSH2 0x2FED PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND PUSH1 0x5 PUSH2 0x4C9C JUMP JUMPDEST SWAP1 POP PUSH2 0x2FF8 DUP2 PUSH2 0x42C2 JUMP JUMPDEST PUSH2 0x3002 SWAP1 DUP5 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x301C SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x8EFE68D059265C97157A10A6AADC9AFE80DFA0E96FC959C4DE863300E244E156 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 ISZERO PUSH2 0x1353 JUMPI PUSH2 0x1353 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP4 PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x30C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH2 0xFE6 DUP2 PUSH2 0x452B JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x30F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND PUSH1 0x38 SSTORE PUSH1 0x40 MLOAD PUSH32 0xD579C7B509B9A61B7408309A980BCFCBBF0F336F1B2BB0A760D71F72F0CF3132 SWAP1 PUSH2 0x1E07 SWAP1 DUP4 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3195 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x3195 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x31B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x320D JUMPI POP PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH2 0x31F7 SWAP1 DUP7 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x3201 SWAP1 DUP6 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO JUMPDEST PUSH2 0x3229 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A4A JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x323D SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x325B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x327B SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x32A9 DUP5 DUP5 PUSH2 0x3E25 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x32D0 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 SLOAD PUSH2 0x1201 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP7 AND PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x3B DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3375 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x339B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x33CA JUMPI PUSH2 0x33CA PUSH2 0x5316 JUMP JUMPDEST EQ DUP1 PUSH2 0x33EB JUMPI POP PUSH1 0x2 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x33E9 JUMPI PUSH2 0x33E9 PUSH2 0x5316 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x3433 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x21B0B713BA1030B8383937BB329030B8383634B1B0BA34B7B7 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x344B JUMPI PUSH2 0x344B PUSH2 0x5316 JUMP JUMPDEST EQ ISZERO PUSH2 0x349D JUMPI PUSH1 0x3B DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xBBE3212124853F8B0084A66A2D057C2966E251E132AF3691DB153AB65F0D1A4D ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR DUP3 SSTORE PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3514 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x3514 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x3530 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x3552 DUP5 PUSH2 0x41B9 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND GT PUSH2 0x3585 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57D3 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x35A0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D59 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x35C9 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x1353 DUP6 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST PUSH2 0x8A7 DUP3 PUSH1 0x0 DUP1 DUP5 PUSH2 0x457E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP3 SWAP2 PUSH2 0x3686 SWAP2 PUSH4 0xFFFFFFFF DUP8 AND SWAP1 DUP2 LT PUSH2 0x364F JUMPI PUSH2 0x364F PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x10 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH4 0xFFFFFFFF PUSH1 0x60 DUP3 SWAP1 SHR AND SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3C DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x36C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 POP PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP5 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x3732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3762 JUMPI PUSH2 0x3762 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x377F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x3 DUP5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 PUSH2 0x3842 JUMPI PUSH1 0x34 SLOAD ISZERO DUP1 PUSH2 0x37CD JUMPI POP PUSH1 0x34 SLOAD PUSH1 0x4 DUP5 ADD SLOAD LT JUMPDEST PUSH2 0x3811 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x546F6F206D616E79206170706C69636174696F6E73 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x4 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x384E DUP10 DUP10 PUSH2 0x2691 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND LT ISZERO PUSH2 0x38B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768207374616B6520746F20617574686F72697A65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP3 SLOAD DUP8 SWAP1 DUP5 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x38CF SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x584A JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x87F9F9F59204F53D57A89A817C6083A17979CD0531791C91E18551A56E3CFDD7 DUP5 DUP7 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 MLOAD PUSH2 0x394F SWAP3 SWAP2 SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP3 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC9BACAAD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP2 PUSH4 0xC9BACAAD SWAP2 PUSH2 0x3991 SWAP2 DUP14 SWAP2 DUP8 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x3A47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x21B0B63632B91034B9903737BA1037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x3A70 SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x3A7A SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3A87 DUP6 PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP11 DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP5 SWAP6 POP SWAP4 SWAP3 DUP6 AND SWAP3 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0x1353 DUP2 DUP6 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4CB4 JUMP JUMPDEST PUSH2 0x8A7 DUP3 DUP3 PUSH1 0x1 PUSH2 0x4DBE JUMP JUMPDEST PUSH2 0x1201 DUP5 DUP5 DUP5 DUP5 PUSH2 0x4E98 JUMP JUMPDEST PUSH1 0x0 NUMBER DUP3 LT PUSH2 0x3B5C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x109B1BD8DAC81B9BDD081E595D0819195D195C9B5A5B9959 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3BE5 JUMPI PUSH1 0x0 PUSH2 0x3B75 DUP3 DUP5 PUSH2 0x4F03 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3BB8 DUP8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3B8E JUMPI PUSH2 0x3B8E PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 DUP3 DIV ADD SLOAD PUSH4 0xFFFFFFFF PUSH1 0x1 SWAP1 SWAP3 AND PUSH1 0x10 MUL PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x60 SHR AND SWAP1 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x3BD0 JUMPI DUP2 SWAP4 POP PUSH2 0x3BDE JUMP JUMPDEST PUSH2 0x3BDB DUP3 PUSH1 0x1 PUSH2 0x5926 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP PUSH2 0x3B61 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3BFF JUMPI PUSH2 0x3BFA DUP6 PUSH2 0x2951 PUSH1 0x1 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x2088 JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C1E PUSH7 0x38D7EA4C68000 DUP6 PUSH2 0x5B5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3C2C DUP3 DUP7 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP PUSH2 0x3C52 PUSH7 0x38D7EA4C68000 PUSH2 0x3C43 DUP7 DUP5 PUSH2 0x5B6E JUMP JUMPDEST PUSH2 0x3C4D SWAP2 SWAP1 PUSH2 0x5B8D JUMP JUMPDEST PUSH2 0x42C2 JUMP JUMPDEST SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x3C78 JUMPI POP DUP2 PUSH2 0x2709 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND GT PUSH2 0x3C9A JUMPI POP DUP3 PUSH2 0x3CAA JUMP JUMPDEST POP PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3CD7 DUP4 PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x3CEF JUMPI DUP6 SWAP4 POP POP POP POP PUSH2 0x2709 JUMP JUMPDEST PUSH2 0x3CF9 DUP2 DUP5 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x1 DUP10 ADD DUP1 SLOAD SWAP2 SWAP5 POP DUP5 SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x3D1B SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP3 DUP7 PUSH2 0x3D4B SWAP2 SWAP1 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP8 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP8 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3D85 JUMPI PUSH2 0x3D85 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH3 0x9055E9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x9055E90 SWAP1 PUSH2 0x3DE6 SWAP1 DUP7 SWAP1 DUP11 SWAP1 CALLER SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5BA1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP9 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8A7 DUP3 DUP3 PUSH1 0x0 PUSH2 0x4DBE JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x3E5A SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x3E64 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x4 DUP6 ADD SLOAD DUP2 LT ISZERO PUSH2 0x407F JUMPI PUSH1 0x0 DUP6 PUSH1 0x4 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3E8D JUMPI PUSH2 0x3E8D PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP10 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH2 0x3ED6 SWAP1 PUSH2 0x3C4D SWAP1 DUP4 SWAP1 DUP11 AND PUSH2 0x42B3 JUMP JUMPDEST DUP3 SLOAD DUP4 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x3EF1 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE DUP4 SLOAD DUP9 DUP3 AND SWAP2 AND GT ISZERO SWAP1 POP PUSH2 0x3F3A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP8 AND OR DUP3 SSTORE JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x52A151D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH4 0x14A85474 SWAP2 PUSH3 0x3D090 SWAP2 PUSH2 0x3F7C SWAP2 DUP16 SWAP2 DUP9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3FA8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3FB0 JUMPI POP PUSH1 0x0 JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP3 DIV AND GT ISZERO PUSH2 0x3FF1 JUMPI DUP3 SLOAD PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND MUL PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP2 AND OR DUP4 SSTORE JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD DUP3 ISZERO ISZERO SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP3 SWAP1 DUP15 AND SWAP2 PUSH32 0xF0171FFFAA54732B1F79A3164B315658061A1A51BF8C1010FBED908A8E333F9 SWAP2 PUSH2 0x4043 SWAP2 DUP9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4068 JUMPI DUP6 PUSH2 0x4064 DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP7 POP POP JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x4077 SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3E6A JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x1353 JUMPI PUSH2 0x1353 DUP5 DUP3 PUSH2 0x4393 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40A9 PUSH2 0x3C4D DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP8 AND PUSH2 0x5B5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x40B7 DUP3 DUP7 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP DUP4 PUSH2 0x40D4 PUSH7 0x38D7EA4C68000 DUP4 PUSH2 0x5B6E JUMP JUMPDEST PUSH2 0x3C52 SWAP2 SWAP1 PUSH2 0x5B8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3223FF4B DUP6 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x412F SWAP3 SWAP2 SWAP1 PUSH2 0x5C0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x415D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4181 SWAP2 SWAP1 PUSH2 0x5B2B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x41AF DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAFFF33EF DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x420A SWAP3 SWAP2 SWAP1 PUSH2 0x5C0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4236 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x425A SWAP2 SWAP1 PUSH2 0x5B2B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4288 DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xABA DUP4 DUP4 DUP4 PUSH2 0x4F1E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x42AC JUMPI DUP2 PUSH2 0xBFD JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x42AC JUMPI DUP2 PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 GT ISZERO PUSH2 0x432A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2039 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x362062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x432A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD DUP2 DUP2 EQ ISZERO PUSH2 0x43AE JUMPI PUSH2 0xABA PUSH1 0x4 DUP5 ADD PUSH1 0x0 PUSH2 0x52A6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x43BC DUP6 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP3 LT DUP1 ISZERO PUSH2 0x43CD JUMPI POP DUP5 DUP4 LT JUMPDEST ISZERO PUSH2 0x44C7 JUMPI PUSH1 0x0 DUP7 PUSH1 0x4 ADD DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x43E9 JUMPI PUSH2 0x43E9 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x44B3 JUMPI PUSH1 0x4 DUP8 ADD PUSH1 0x1 PUSH2 0x4430 DUP7 DUP9 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x443A SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x444A JUMPI PUSH2 0x444A PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x4 DUP9 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x4478 JUMPI PUSH2 0x4478 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP4 PUSH2 0x44AB DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x44C1 JUMP JUMPDEST DUP3 PUSH2 0x44BD DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP PUSH2 0x43BF JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x1B41 JUMPI DUP6 PUSH1 0x4 ADD DUP1 SLOAD DUP1 PUSH2 0x44E6 JUMPI PUSH2 0x44E6 PUSH2 0x5C25 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE DUP2 PUSH2 0x4512 DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x44CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4525 ADDRESS PUSH2 0x39CE JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH32 0x5F56BEE8CFFBE9A78652A74A60705EDEDE02AF10B0BBB888CA44B79A0D42CE80 SWAP1 PUSH2 0x22B5 SWAP1 DUP4 SWAP1 DUP6 SWAP1 PUSH2 0x5C0B JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x4598 JUMPI POP PUSH1 0x0 DUP2 MLOAD GT JUMPDEST PUSH2 0x45B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x45DB JUMPI PUSH2 0x45DB PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x45F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x3C SLOAD PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x46F1 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x461B JUMPI PUSH2 0x461B PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 CALLER DUP4 MSTORE PUSH1 0x3 ADD SWAP1 SWAP4 MSTORE SWAP2 DUP3 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x4666 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP12 AND PUSH2 0x42B3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4674 JUMPI POP POP PUSH2 0x46DF JUMP JUMPDEST PUSH1 0x3C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4699 DUP5 PUSH2 0x42C2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE POP POP JUMPDEST DUP1 PUSH2 0x46E9 DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x45FE JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1B41 JUMPI PUSH1 0x0 PUSH2 0x472B DUP7 PUSH1 0x38 SLOAD DUP5 PUSH1 0x3C DUP1 SLOAD SWAP1 POP PUSH2 0x471B SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x4725 SWAP2 SWAP1 PUSH2 0x5B6E JUMP JUMPDEST SWAP1 PUSH2 0x4C9C JUMP JUMPDEST SWAP1 POP PUSH2 0x4739 DUP2 PUSH1 0x37 SLOAD PUSH2 0x42B3 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x104879B09C38B3B66D79CE8F4CBDCFBE117B79797DB65A37EF151D22B5E31471 DUP3 PUSH1 0x40 MLOAD PUSH2 0x4776 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 ISZERO PUSH2 0xE27 JUMPI DUP1 PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4796 SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xE27 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP7 DUP4 PUSH2 0x4291 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x47E9 JUMPI POP DUP2 PUSH2 0x2995 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND GT PUSH2 0x4808 JUMPI POP DUP3 PUSH2 0x4815 JUMP JUMPDEST POP DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4842 DUP4 PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x485A JUMPI DUP6 SWAP4 POP POP POP POP PUSH2 0x2995 JUMP JUMPDEST PUSH2 0x4864 DUP2 DUP5 PUSH2 0x58FE JUMP JUMPDEST DUP8 SLOAD SWAP1 SWAP4 POP DUP4 SWAP1 DUP9 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x4884 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP3 DUP7 PUSH2 0x48B4 SWAP2 SWAP1 PUSH2 0x58FE JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH2 0x48C7 DUP7 PUSH2 0x4725 DUP6 PUSH1 0x5 PUSH2 0x4C9C JUMP JUMPDEST DUP9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x26730863 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP3 DIV DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE CALLER PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x99CC218C SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x494A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x495E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP9 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 SWAP5 SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV DUP5 AND SWAP4 DUP7 SWAP4 DUP2 AND SWAP3 PUSH2 0x49BE SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x49C8 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO PUSH2 0x4A62 JUMPI PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND GT PUSH2 0x49FE JUMPI DUP2 SWAP4 POP PUSH2 0x4A0F JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP4 POP JUMPDEST PUSH1 0x2 DUP4 ADD DUP1 SLOAD DUP6 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x4A2F SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP4 DUP3 PUSH2 0x4A5F SWAP2 SWAP1 PUSH2 0x58FE JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x4A87 JUMPI POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4B9D JUMPI DUP5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7D5A36B3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 PUSH4 0xFAB46D66 SWAP3 PUSH2 0x4ADE SWAP3 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B2E SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x4B5E DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP PUSH1 0x1 DUP7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND OR SWAP1 SSTORE DUP8 SLOAD SWAP1 SWAP2 POP PUSH2 0x4B98 SWAP1 DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x64 PUSH2 0x3C5C JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x4BBF JUMPI POP DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4BD3 JUMPI PUSH2 0x4BD0 DUP4 DUP4 PUSH1 0x64 PUSH2 0x47D0 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4BF3 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST DUP7 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CF9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x4C25 SWAP1 DUP6 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP6 SLOAD PUSH2 0x4C43 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP4 PUSH2 0x3E31 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x2 DUP7 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x4C6C SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x4C76 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST DUP8 SLOAD SWAP1 SWAP2 POP PUSH2 0x4C92 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE17 DUP4 DUP7 PUSH2 0x58FE JUMP JUMPDEST POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x4CAA DUP4 DUP6 PUSH2 0x5B6E JUMP JUMPDEST PUSH2 0xBFD SWAP2 SWAP1 PUSH2 0x5B8D JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x4CD6 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0xABA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x4D52 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x4D11 SWAP1 PUSH2 0x4F4E DUP6 PUSH2 0x4F5A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D99 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4D47 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xABA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x4D88 SWAP1 PUSH2 0x50B6 DUP6 PUSH2 0x4F5A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D99 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x18AD SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND PUSH2 0x4DD1 JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x4DF6 PUSH1 0x3 DUP3 PUSH2 0x4DE3 JUMPI PUSH2 0x4F4E PUSH2 0x4DE7 JUMP JUMPDEST PUSH2 0x50B6 JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4F5A JUMP JUMPDEST POP POP PUSH1 0x0 PUSH2 0x4E03 DUP5 PUSH2 0x16BB JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1201 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x4E52 SWAP1 DUP6 PUSH2 0x4E3F JUMPI PUSH2 0x4F4E PUSH2 0x4E43 JUMP JUMPDEST PUSH2 0x50B6 JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4F5A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D99 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4E88 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1201 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x50C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F12 PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x5B8D JUMP JUMPDEST PUSH2 0xBFD SWAP1 DUP5 DUP5 AND PUSH2 0x5926 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xABA SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x4ECC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFD DUP3 DUP5 PUSH2 0x5AE3 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x4F7B JUMPI PUSH2 0x4F76 DUP7 PUSH2 0x2951 PUSH1 0x1 DUP5 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x4F7E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 POP PUSH2 0x4F97 DUP4 DUP6 DUP8 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP1 ISZERO PUSH2 0x5057 JUMPI PUSH1 0x0 PUSH2 0x4FC0 DUP8 PUSH2 0x4FB0 PUSH1 0x1 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x3B8E JUMPI PUSH2 0x3B8E PUSH2 0x5AFA JUMP JUMPDEST SWAP1 POP NUMBER DUP2 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x5055 JUMPI PUSH2 0x4FF9 DUP2 PUSH2 0x4FDD DUP6 PUSH2 0x42C2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0x60 SHL AND OR SWAP1 JUMP JUMPDEST DUP8 PUSH2 0x5005 PUSH1 0x1 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x5015 JUMPI PUSH2 0x5015 PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x10 MUL PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x50AE JUMP JUMPDEST POP JUMPDEST DUP6 PUSH2 0x506D PUSH2 0x5064 NUMBER PUSH2 0x432E JUMP JUMPDEST PUSH2 0x4FDD DUP6 PUSH2 0x42C2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP1 SWAP4 KECCAK256 PUSH1 0x2 DUP3 DIV ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 DUP5 AND PUSH1 0x10 SWAP4 SWAP1 SWAP6 AND SWAP3 SWAP1 SWAP3 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL SWAP3 SWAP1 SWAP4 MUL NOT AND OR SWAP1 SSTORE POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFD DUP3 DUP5 PUSH2 0x5926 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5117 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5194 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xABA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5135 SWAP2 SWAP1 PUSH2 0x5C3B JUMP JUMPDEST PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2709 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH2 0x51A8 DUP6 PUSH2 0x39CE JUMP JUMPDEST PUSH2 0x51F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x5210 SWAP2 SWAP1 PUSH2 0x5C89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x524D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5252 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x5262 DUP3 DUP3 DUP7 PUSH2 0x526D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x527C JUMPI POP DUP2 PUSH2 0x2995 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x528C JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP2 SWAP1 PUSH2 0x5CA5 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFE6 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x432A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x52C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x52F4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x530B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2995 DUP2 PUSH2 0x52D4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x4 DUP5 LT PUSH2 0x534E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5384 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x5394 DUP2 PUSH2 0x52D4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x52F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x53C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x53D4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x53E2 PUSH1 0x20 DUP5 ADD PUSH2 0x539F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x541D DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x543D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBFD DUP3 PUSH2 0x539F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x547B DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x548B DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x549B DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x54A9 PUSH1 0x60 DUP7 ADD PUSH2 0x539F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x54C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x54D4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x54E4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x54F2 PUSH1 0x40 DUP6 ADD PUSH2 0x539F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x550E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5519 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x5394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x541D DUP4 PUSH2 0x539F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x555E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x5569 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x5579 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x5589 DUP2 PUSH2 0x52D4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x55BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 GT ISZERO PUSH2 0x55D7 JUMPI PUSH2 0x55D7 PUSH2 0x5594 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x55FC JUMPI PUSH2 0x55FC PUSH2 0x5594 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP4 DUP5 MSTORE DUP6 DUP2 ADD DUP4 ADD SWAP4 DUP4 DUP2 ADD SWAP3 POP DUP8 DUP6 GT ISZERO PUSH2 0x561A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP2 POP JUMPDEST DUP5 DUP3 LT ISZERO PUSH2 0x5262 JUMPI PUSH2 0x5631 DUP3 PUSH2 0x52E9 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x5620 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x565F DUP6 PUSH2 0x539F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x5676 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x569D DUP8 DUP3 DUP9 ADD PUSH2 0x55AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x56BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x56D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x56DE DUP4 PUSH2 0x539F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x56F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5705 DUP6 DUP3 DUP7 ADD PUSH2 0x55AA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x572D DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH28 0x43616C6C6572206973206E6F742074686520676F7665726E616E6365 PUSH1 0x20 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH27 0x105C1C1B1A58D85D1A5BDB881A5CC81B9BDD08185C1C1C9BDD9959 PUSH1 0x2A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x4E6F7468696E6720746F20746F702D757 PUSH1 0x7C SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH28 0x14185C985B595D195C9CC81B5D5CDD081899481CDC1958DA599A5959 PUSH1 0x22 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 DUP2 AND DUP5 DUP3 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x586C JUMPI PUSH2 0x586C PUSH2 0x5834 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x9CDEE8D0D2DCCE40E8DE40E6D8C2E6D PUSH1 0x83 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x58B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH23 0x5468657265206973206E6F2064697363726570616E6379 PUSH1 0x48 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x591E JUMPI PUSH2 0x591E PUSH2 0x5834 JUMP JUMPDEST SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x5939 JUMPI PUSH2 0x5939 PUSH2 0x5834 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x2737BA1037BBB732B91037B910383937BB34B232B9 PUSH1 0x59 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E277420756E7374616B65206561726C696572207468616E203234680000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH26 0x50726F766964657220697320616C726561647920696E20757365 PUSH1 0x30 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4E6F7468696E6720746F2073796E63 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5A13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2995 DUP2 PUSH2 0x52D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x546F6F206D75636820746F20756E7374616B65 PUSH1 0x68 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x2737BA1030BABA3437B934BD32B9 PUSH1 0x91 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5AF5 JUMPI PUSH2 0x5AF5 PUSH2 0x5834 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x5B24 JUMPI PUSH2 0x5B24 PUSH2 0x5834 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5B3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B69 JUMPI PUSH2 0x5B69 PUSH2 0x5B44 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5B88 JUMPI PUSH2 0x5B88 PUSH2 0x5834 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B9C JUMPI PUSH2 0x5B9C PUSH2 0x5B44 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP3 DUP6 DUP2 ADD SWAP3 SWAP1 SWAP2 PUSH1 0xA0 DUP7 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5BFB JUMPI DUP6 MLOAD DUP5 AND DUP4 MSTORE SWAP5 DUP5 ADD SWAP5 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5BDD JUMP JUMPDEST POP SWAP1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5C78 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5C60 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1201 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x5C9B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x5C5D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x5CC4 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x5C5D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID SWAP7 LOG3 0xC8 0xE9 PUSH25 0x312D2E82E746B65A21AACA458DD91C375FEA6066416EF241E DUP8 0xCB STATICCALL 0xB4 CALLDATALOAD PUSH7 0x87062505CC6502 SWAP3 KECCAK256 EXTCODEHASH 0xC2 EQ 0xDC DUP13 0xB4 0xB8 0xBD PUSH1 0x3E MSTORE8 PUSH10 0x9E3297186E8DD6DFABB3 DUP1 SMOD CALLCODE DUP12 CALLVALUE 0x2B DUP16 MSTORE8 PUSH13 0x8C832F746C2A53627133BE6545 GASPRICE 0xC0 0xB9 DUP10 PUSH9 0xF40E1221739F34DECC MOD PUSH15 0x1D68B15C5FC76B65E7EBE2F08C9F38 0xB3 0xEA ADDRESS SWAP3 0xF9 SWAP2 0x23 MSTORE8 0xB8 0xF8 0xE4 DUP9 0xE9 DUP5 LT SLT PUSH4 0x86F575C0 0xE2 CALLER 0xD2 0xEF 0xFB NOT DUP11 0x4E PUSH9 0xAF68AB1DE9C2E542AE DUP3 0xE5 0xBE 0xBA MULMOD PUSH32 0x34DB5D25B3E8383F0C9BA0B9FE180A3A8D2E761C11207221386DFDDEC2BACDD2 CREATE JUMPDEST MSIZE 0xDE CALLVALUE 0xDA SWAP12 MSTORE RETURNDATASIZE SELFDESTRUCT DUP12 0xE4 0x2E 0x5E CODESIZE 0xE8 XOR 0xC8 0x2F 0xDB SIGNEXTEND 0xAE PUSH24 0x4387A724A2646970667358221220BBE02E1872284B901740 0xE8 MLOAD PUSH3 0x586137 CREATE CALLDATALOAD LOG2 0xCE DIFFICULTY 0xFC SWAP13 BALANCE 0x23 PUSH21 0x66B4008DB80C64736F6C6343000809003300000000 ",
      "sourceMap": "2483:67885:63:-:0;;;8555:914;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8920:1;8897:6;-1:-1:-1;;;;;8897:18:63;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:24;:98;;;;-1:-1:-1;8941:40:63;;-1:-1:-1;;;8941:40:63;;8993:1;8941:40;;;1572:51:80;;;8993:1:63;-1:-1:-1;;;;;8941:28:63;;;;;1545:18:80;;8941:40:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;8941:54:63;;8897:98;:172;;;;-1:-1:-1;9015:49:63;;-1:-1:-1;;;9015:49:63;;9061:1;9015:49;;;1572:51:80;-1:-1:-1;;;;;9015:37:63;;;;;1545:18:80;;9015:49:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:54;8897:172;:242;;;;;9089:50;9127:10;9089:29;;;;;:50;;:::i;:::-;8876:311;;;;-1:-1:-1;;;8876:311:63;;2095:2:80;8876:311:63;;;2077:21:80;2134:2;2114:18;;;2107:30;2173:24;2153:18;;;2146:52;2215:18;;8876:311:63;;;;;;;;-1:-1:-1;;;;;9197:14:63;;;;;9221:42;;;;;9273:22;;;;;9305:50;;;;;9378:27;;;-1:-1:-1;;;9378:27:63;;;;:25;;;;;;:27;;;;;;;;;;;;;;;:25;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9366:39;;;;;;9431:23;-1:-1:-1;;;;;9431:29:63;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9415:47;;-1:-1:-1;2483:67885:63;;-1:-1:-1;;;;;2483:67885:63;1186:320:3;-1:-1:-1;;;;;1476:19:3;;:23;;;1186:320::o;14:134:80:-;-1:-1:-1;;;;;92:31:80;;82:42;;72:70;;138:1;135;128:12;72:70;14:134;:::o;153:1079::-;405:6;413;421;429;437;445;498:3;486:9;477:7;473:23;469:33;466:53;;;515:1;512;505:12;466:53;547:9;541:16;566:34;594:5;566:34;:::i;:::-;669:2;654:18;;648:25;619:5;;-1:-1:-1;682:36:80;648:25;682:36;:::i;:::-;789:2;774:18;;768:25;737:7;;-1:-1:-1;802:36:80;768:25;802:36;:::i;:::-;909:2;894:18;;888:25;857:7;;-1:-1:-1;922:36:80;888:25;922:36;:::i;:::-;1029:3;1014:19;;1008:26;977:7;;-1:-1:-1;1043:36:80;1008:26;1043:36;:::i;:::-;1150:3;1135:19;;1129:26;1098:7;;-1:-1:-1;1164:36:80;1129:26;1164:36;:::i;:::-;1219:7;1209:17;;;153:1079;;;;;;;;:::o;1237:184::-;1307:6;1360:2;1348:9;1339:7;1335:23;1331:32;1328:52;;;1376:1;1373;1366:12;1328:52;-1:-1:-1;1399:16:80;;1237:184;-1:-1:-1;1237:184:80:o;1634:254::-;1704:6;1757:2;1745:9;1736:7;1732:23;1728:32;1725:52;;;1773:1;1770;1763:12;1725:52;1805:9;1799:16;1824:34;1852:5;1824:34;:::i;:::-;1877:5;1634:254;-1:-1:-1;;;1634:254:80:o;1893:346::-;2483:67885:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@_callOptionalReturn_374": {
          "entryPoint": 20674,
          "id": 374,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_isConstructor_72": {
          "entryPoint": 17690,
          "id": 72,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_transferGovernance_16557": {
          "entryPoint": 17707,
          "id": 16557,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@add_10667": {
          "entryPoint": 20662,
          "id": 10667,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@applicationInfo_12900": {
          "entryPoint": null,
          "id": 12900,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@applications_12903": {
          "entryPoint": 13089,
          "id": 12903,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@approveApplication_13733": {
          "entryPoint": 13131,
          "id": 13733,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@approveAuthorizationDecrease_14009": {
          "entryPoint": 8371,
          "id": 14009,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@authorizationCeiling_12882": {
          "entryPoint": null,
          "id": 12882,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@authorizationDecrease_16117": {
          "entryPoint": 15921,
          "id": 16117,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@authorizedStake_15222": {
          "entryPoint": null,
          "id": 15222,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@average_680": {
          "entryPoint": 20227,
          "id": 680,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@checkpoints_10201": {
          "entryPoint": 13829,
          "id": 10201,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@cleanAuthorizedApplications_16419": {
          "entryPoint": 17299,
          "id": 16419,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@convertFromT_16660": {
          "entryPoint": 16528,
          "id": 16660,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "@convertToT_16623": {
          "entryPoint": 15370,
          "id": 16623,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "@decodeBlockNumber_10616": {
          "entryPoint": null,
          "id": 10616,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@decodeCheckpoint_10653": {
          "entryPoint": null,
          "id": 10653,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "@decodeValue_10630": {
          "entryPoint": null,
          "id": 10630,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@decreaseStakeCheckpoint_16510": {
          "entryPoint": 15909,
          "id": 16510,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@delegateVoting_15189": {
          "entryPoint": 2205,
          "id": 15189,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@delegate_15651": {
          "entryPoint": 14813,
          "id": 15651,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@delegates_10231": {
          "entryPoint": 5819,
          "id": 10231,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@disableApplication_14166": {
          "entryPoint": 3632,
          "id": 14166,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@encodeCheckpoint_10596": {
          "entryPoint": null,
          "id": 10596,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@forceDecreaseAuthorization_14081": {
          "entryPoint": 11683,
          "id": 14081,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@functionCallWithValue_534": {
          "entryPoint": null,
          "id": 534,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@functionCall_464": {
          "entryPoint": 20884,
          "id": 464,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@getApplicationsLength_15341": {
          "entryPoint": null,
          "id": 15341,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getAvailableToAuthorize_15590": {
          "entryPoint": 9873,
          "id": 15590,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getKeepAmountInT_16586": {
          "entryPoint": 16825,
          "id": 16586,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getMinStaked_15552": {
          "entryPoint": 7970,
          "id": 15552,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getNuAmountInT_16538": {
          "entryPoint": 16606,
          "id": 16538,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getPastTotalSupply_10294": {
          "entryPoint": 10494,
          "id": 10294,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getPastVotes_10280": {
          "entryPoint": 3035,
          "id": 10280,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getSlashingQueueLength_15352": {
          "entryPoint": null,
          "id": 15352,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getStartStakingTimestamp_15273": {
          "entryPoint": null,
          "id": 15273,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getVotes_10262": {
          "entryPoint": 10507,
          "id": 10262,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@governance_12878": {
          "entryPoint": null,
          "id": 12878,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@increaseAuthorization_13848": {
          "entryPoint": 14060,
          "id": 13848,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@increaseStakeCheckpoint_16495": {
          "entryPoint": 15096,
          "id": 16495,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@initialize_13236": {
          "entryPoint": 8897,
          "id": 13236,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@isContract_393": {
          "entryPoint": 14798,
          "id": 393,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@lookupCheckpoint_10559": {
          "entryPoint": 15120,
          "id": 10559,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@max_639": {
          "entryPoint": 17052,
          "id": 639,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@minTStakeAmount_12880": {
          "entryPoint": null,
          "id": 12880,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@min_657": {
          "entryPoint": 17075,
          "id": 657,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@moveVotingPower_10374": {
          "entryPoint": 19636,
          "id": 10374,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@newStakeCheckpoint_16480": {
          "entryPoint": 19902,
          "id": 16480,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@notificationReward_12890": {
          "entryPoint": null,
          "id": 12890,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@notifiersTreasury_12888": {
          "entryPoint": null,
          "id": 12888,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@notifyKeepStakeDiscrepancy_14818": {
          "entryPoint": 3078,
          "id": 14818,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@notifyNuStakeDiscrepancy_14907": {
          "entryPoint": 10001,
          "id": 14907,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@notify_15801": {
          "entryPoint": 17790,
          "id": 15801,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@numCheckpoints_10218": {
          "entryPoint": 8337,
          "id": 10218,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@pauseApplication_14121": {
          "entryPoint": 2751,
          "id": 14121,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@percent_18472": {
          "entryPoint": 19612,
          "id": 18472,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@processSlashing_15175": {
          "entryPoint": 12017,
          "id": 15175,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@processSlashing_15966": {
          "entryPoint": 18798,
          "id": 15966,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@pushNotificationReward_14985": {
          "entryPoint": 3879,
          "id": 14985,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@refreshKeepStakeOwner_13647": {
          "entryPoint": 11175,
          "id": 13647,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@requestAuthorizationDecrease_13917": {
          "entryPoint": 9626,
          "id": 13917,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@requestAuthorizationDecrease_15439": {
          "entryPoint": 6985,
          "id": 15439,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@rolesOf_15330": {
          "entryPoint": null,
          "id": 15330,
          "parameterSlots": 1,
          "returnSlots": 3
        },
        "@safeTransferFrom_18547": {
          "entryPoint": 15108,
          "id": 18547,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@safeTransferFrom_208": {
          "entryPoint": 20120,
          "id": 208,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@safeTransfer_182": {
          "entryPoint": 20254,
          "id": 182,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@safeTransfer_18520": {
          "entryPoint": 17041,
          "id": 18520,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@seizeKeep_16219": {
          "entryPoint": 15452,
          "id": 16219,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@seizeNu_16313": {
          "entryPoint": 18384,
          "id": 16313,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@seize_15063": {
          "entryPoint": 9614,
          "id": 15063,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@setAuthorizationCeiling_14223": {
          "entryPoint": 11588,
          "id": 14223,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setMinimumStakeAmount_13665": {
          "entryPoint": 7565,
          "id": 13665,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setNotificationReward_14950": {
          "entryPoint": 12489,
          "id": 14950,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setPanicButton_14205": {
          "entryPoint": 2219,
          "id": 14205,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@setStakeDiscrepancyPenalty_14932": {
          "entryPoint": 8758,
          "id": 14932,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@slash_15041": {
          "entryPoint": 13816,
          "id": 15041,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@slashingQueueIndex_12909": {
          "entryPoint": null,
          "id": 12909,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@slashingQueue_12907": {
          "entryPoint": 14001,
          "id": 12907,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@stakeDiscrepancyPenalty_12884": {
          "entryPoint": null,
          "id": 12884,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@stakeDiscrepancyRewardMultiplier_12886": {
          "entryPoint": null,
          "id": 12886,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@stakeKeep_13481": {
          "entryPoint": 4954,
          "id": 13481,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@stakeNu_13609": {
          "entryPoint": 9094,
          "id": 13609,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@stake_13374": {
          "entryPoint": 6332,
          "id": 13374,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@stakedNu_15294": {
          "entryPoint": 4073,
          "id": 15294,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@stakes_15258": {
          "entryPoint": null,
          "id": 15258,
          "parameterSlots": 1,
          "returnSlots": 3
        },
        "@subtract_10681": {
          "entryPoint": 20302,
          "id": 10681,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@toUint32_834": {
          "entryPoint": 17198,
          "id": 834,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@toUint96_784": {
          "entryPoint": 17090,
          "id": 784,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@topUpKeep_14343": {
          "entryPoint": 13487,
          "id": 14343,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@topUpNu_14400": {
          "entryPoint": 4615,
          "id": 14400,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@topUp_14288": {
          "entryPoint": 2434,
          "id": 14288,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@transferGovernance_15202": {
          "entryPoint": 12438,
          "id": 15202,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@unstakeAll_14712": {
          "entryPoint": 10652,
          "id": 14712,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@unstakeKeep_14541": {
          "entryPoint": 4156,
          "id": 14541,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@unstakeNu_14617": {
          "entryPoint": 5849,
          "id": 14617,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@unstakeT_14473": {
          "entryPoint": 12592,
          "id": 14473,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@verifyCallResult_617": {
          "entryPoint": 21101,
          "id": 617,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@withdrawNotificationReward_15020": {
          "entryPoint": 7698,
          "id": 15020,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@writeCheckpoint_10480": {
          "entryPoint": 20314,
          "id": 10480,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "abi_decode_address": {
          "entryPoint": 21225,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_array_address_dyn": {
          "entryPoint": 21930,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 21241,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address_fromMemory": {
          "entryPoint": 23041,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address_payable_fromMemory": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_address": {
          "entryPoint": 21350,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_address_payablet_address": {
          "entryPoint": 21833,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_addresst_address_payablet_addresst_uint96": {
          "entryPoint": 21594,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_addresst_addresst_uint96": {
          "entryPoint": 21684,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_addresst_enum$_StakeType_$11840": {
          "entryPoint": 21755,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint256": {
          "entryPoint": 21503,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint32": {
          "entryPoint": 22287,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_uint96": {
          "entryPoint": 21430,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 23611,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 22185,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256_fromMemory": {
          "entryPoint": 23339,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory": {
          "entryPoint": 22687,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_uint96": {
          "entryPoint": 21547,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint96t_array$_t_address_$dyn_memory_ptr": {
          "entryPoint": 22210,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint96t_uint256": {
          "entryPoint": 21805,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint96t_uint256t_addresst_array$_t_address_$dyn_memory_ptr": {
          "entryPoint": 22080,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_uint96": {
          "entryPoint": 21407,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 23689,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": 21574,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_payable_t_address_t_uint96__to_t_address_t_address_t_uint96__fromStack_reversed": {
          "entryPoint": 23070,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
          "entryPoint": 23563,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_payable_t_address__to_t_address_t_address_payable_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint96__fromStack_reversed": {
          "entryPoint": 22342,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint96_t_uint96__to_t_address_t_uint96_t_uint96__fromStack_reversed": {
          "entryPoint": 23225,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_enum$_ApplicationStatus_$12798_t_address__to_t_uint8_t_address__fromStack_reversed": {
          "entryPoint": 21292,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 23717,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_05371ca088b53dad455db88a5d048267c12eff6c1f75224fabfb6268020bcff6__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22483,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1aa3aaa5e947cd03ebfaac1842896e542f3d0e7160a4b27e0c64026ef6a8b9ab__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22948,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_2295370407ca49f4ad1f48c9f9f17142d0c8d46f174a0bbd1344681cb2ee8f79__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_229e6d41e09584dc8d0a410f121cc8b73769b5a1fb0552b27d056f835451f973__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_29d08fe4f6c0e6490475e4305182f47eaf3b60b9879fa3d62104f0e2eeeb05ee__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_2c7450e512904fda8312896c1aa3809963abac7ef887355f02a95ff669ecf9c8__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3344bafcc6284636168546409df35508f8669a08e1f3b1749102e268af48152f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_34e7eba5c773c3fc0fd07c7a1cb12144ea09bc2361c6dcab82c3da05835bce57__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 23159,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_36f7c7a299c732c4a278528667a5e3d68e0daf6ff361012b2b3d09d09eda408f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22376,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_4c22ab397bf113c7cf3d5f362fed7bd44c6f0d376a697a1f6314a70b1aadd0c5__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_58b09ba14e6149ed431ece7849144def4b9835833b611f9801042665308f503f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_58faec4ae87565732d8e09c30f37552291ab01015793882dc39173ef1a8ca4a3__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22893,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_5c8e504500c894954a29d26b6e73735390f7f46ca10c218e461c4837f181f83c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_64b0b87da4ad2e7e3100604b4bac4e26ce56c44f7e41d0af41932a2bee35e2af__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22733,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_76d0aee5c952791350eeaf21be9a285bca5b6347ea6cc46bda1ed0dd721fb878__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_83ee8eb1a9e77ac94f36a510fd8a146111d4889defed5bbb86a497f742fd412b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_842a76284a753d753eda87e31a39dc8d9f9fc83d2b4f2051ec6d440b08c3490c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 23114,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_870bce32adff361513d26b76c73c474ec78d084a56337b164759ddd01d38fd2b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_879d053041a47be76d1d37529ae922a7410cea5ff026d817ac1c0de3d5a8869a__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8fb8fb4ba798729ca06c5b0367136529678dab13e471084d38917c2c80cb7c2b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_944d02c9873f5b4e40f550ff6a55b5ca56515be020d48f062b4d5b1ac7a9cf3a__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_a265f627c712f4627e87d137d613d70b40af8ec7a7faf93c92c009e4f68673b9__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_a8e481b704819cd88f0f6566f7ee2f0006e52543333300afb51404b8d7d75f30__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22645,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_cbdc49425e2753cc0dee3d656a7e3e1e4f551c10b64891a807a56b3cf8bbf4d8__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_db64dd70224c019543d4d9ef245fda7c012ee9e636825aae17375c6af96c3ec7__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22846,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_e6a4c292a2678b9c898d987106e4b784681d3ef40e71d741a89ab96444ddb55d__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_e7ef8deaaa8398ae3d36a196629e0cddaa901e233927631ebc7505cc72252f1e__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 23000,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_eede2581a01d55d6c31e404df190bb3342df3bac4ab2e3aa5e9e9566374e0e08__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22526,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_f88ee4a5c25b2ddc5ef937b1fdca87bfbc99f1c40b47ddac50291d02e4eb6cf4__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 22430,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_f9b7bc8e04a7bef6bec8b9d8ce211c79f13b16fd8e577f3f5d176f76c14c521f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_struct$_Checkpoint_$10137_memory_ptr__to_t_struct$_Checkpoint_$10137_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
          "entryPoint": 23457,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed": {
          "entryPoint": 21483,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint96_t_rational_0_by_1__to_t_uint96_t_uint96__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint96_t_uint256__to_t_uint96_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint96_t_uint96__to_t_uint96_t_uint96__fromStack_reversed": {
          "entryPoint": 23199,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint96_t_uint96_t_uint96__to_t_uint96_t_uint96_t_uint96__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 22822,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_add_t_uint96": {
          "entryPoint": 22602,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_div_t_uint256": {
          "entryPoint": 23437,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 23406,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 23267,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint96": {
          "entryPoint": 22782,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "copy_memory_to_memory": {
          "entryPoint": 23645,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "increment_t_uint256": {
          "entryPoint": 23312,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "mod_t_uint256": {
          "entryPoint": 23386,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 22580,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x12": {
          "entryPoint": 23364,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 21270,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x31": {
          "entryPoint": 23589,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 23290,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 21908,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_address": {
          "entryPoint": 21204,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:31425:80",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:80",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "59:86:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "123:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "132:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "135:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "125:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "125:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "125:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "82:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "93:5:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:3:80",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "113:1:80",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "104:3:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "104:11:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "117:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "100:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "100:19:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "89:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "89:31:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "79:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "79:42:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "72:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "72:50:80"
                      },
                      "nodeType": "YulIf",
                      "src": "69:70:80"
                    }
                  ]
                },
                "name": "validator_revert_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "48:5:80",
                    "type": ""
                  }
                ],
                "src": "14:131:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "199:85:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "209:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "231:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "218:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "218:20:80"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "209:5:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "272:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "247:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "247:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "247:31:80"
                    }
                  ]
                },
                "name": "abi_decode_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "178:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "189:5:80",
                    "type": ""
                  }
                ],
                "src": "150:134:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "359:177:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "405:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "414:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "417:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "407:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "407:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "407:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "380:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "389:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "376:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "376:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "401:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "372:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "372:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "369:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "430:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "456:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "443:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "443:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "434:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "500:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "475:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "475:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "475:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "515:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "525:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "515:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "325:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "336:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "348:6:80",
                    "type": ""
                  }
                ],
                "src": "289:247:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "573:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "590:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "597:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "602:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "593:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "593:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "583:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "583:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "583:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "630:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "633:4:80",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "623:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "623:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "623:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "654:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "657:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "647:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "647:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "647:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "541:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "823:298:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "833:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "845:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "856:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "841:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "841:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "833:4:80"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "901:111:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "922:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "929:3:80",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "934:10:80",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "925:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "925:20:80"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "915:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "915:31:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "915:31:80"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "966:1:80",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "969:4:80",
                                  "type": "",
                                  "value": "0x21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "959:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "959:15:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "959:15:80"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "994:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "997:4:80",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "987:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "987:15:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "987:15:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "881:6:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "889:1:80",
                                "type": "",
                                "value": "4"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "878:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "878:13:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "871:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "871:21:80"
                      },
                      "nodeType": "YulIf",
                      "src": "868:144:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1028:9:80"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1039:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1021:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1021:25:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1021:25:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1066:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1077:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1062:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1062:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "1086:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1102:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1107:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1098:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1098:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1111:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1094:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1094:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1082:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1082:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1055:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1055:60:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1055:60:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_enum$_ApplicationStatus_$12798_t_address__to_t_uint8_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "784:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "795:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "803:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "814:4:80",
                    "type": ""
                  }
                ],
                "src": "673:448:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1213:301:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1259:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1268:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1271:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1261:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1261:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1261:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1234:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1243:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1230:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1230:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1255:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1226:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1226:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1223:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1284:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1310:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1297:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1297:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "1288:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1354:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "1329:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1329:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1329:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1369:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "1379:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1369:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1393:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1425:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1436:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1421:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1421:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1408:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1408:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "1397:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1474:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "1449:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1449:33:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1449:33:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1491:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "1501:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1491:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1171:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1182:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1194:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1202:6:80",
                    "type": ""
                  }
                ],
                "src": "1126:388:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1670:226:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1680:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1692:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1703:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1688:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1688:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1680:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1715:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1733:2:80",
                                "type": "",
                                "value": "96"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1737:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1729:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1729:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1741:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1725:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1725:18:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "1719:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1759:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1774:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1782:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1770:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1770:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1752:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1752:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1752:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1806:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1817:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1802:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1802:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "1826:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1834:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1822:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1822:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1795:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1795:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1795:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1858:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1869:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1854:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1854:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "1878:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1886:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1874:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1874:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1847:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1847:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1847:43:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint96_t_uint96_t_uint96__to_t_uint96_t_uint96_t_uint96__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1623:9:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1634:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1642:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1650:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1661:4:80",
                    "type": ""
                  }
                ],
                "src": "1519:377:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1949:123:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1959:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1981:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1968:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1968:20:80"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "1959:5:80"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2050:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2059:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2062:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2052:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2052:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2052:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2010:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2021:5:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2036:2:80",
                                            "type": "",
                                            "value": "96"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2040:1:80",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "2032:3:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2032:10:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2044:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2028:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2028:18:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2017:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2017:30:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2007:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2007:41:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2000:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2000:49:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1997:69:80"
                    }
                  ]
                },
                "name": "abi_decode_uint96",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "1928:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "1939:5:80",
                    "type": ""
                  }
                ],
                "src": "1901:171:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2163:233:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2209:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2218:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2221:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2211:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2211:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2211:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2184:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2193:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2180:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2180:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2205:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2176:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2176:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "2173:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2234:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2260:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2247:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2247:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "2238:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2304:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "2279:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2279:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2279:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2319:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2329:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2319:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2343:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2375:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2386:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2371:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2371:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96",
                          "nodeType": "YulIdentifier",
                          "src": "2353:17:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2353:37:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2343:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint96",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2121:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2132:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2144:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2152:6:80",
                    "type": ""
                  }
                ],
                "src": "2077:319:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2502:76:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2512:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2524:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2535:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2520:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2520:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2512:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2554:9:80"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2565:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2547:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2547:25:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2547:25:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2471:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2482:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2493:4:80",
                    "type": ""
                  }
                ],
                "src": "2401:177:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2756:227:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2766:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2778:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2789:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2774:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2774:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2766:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2801:29:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2819:3:80",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2824:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "2815:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2815:11:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2828:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "2811:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2811:19:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "2805:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2846:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2861:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2869:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2857:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2857:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2839:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2839:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2839:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2893:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2904:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2889:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2889:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2913:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2921:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2909:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2909:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2882:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2882:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2882:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2945:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2956:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2941:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2941:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "2965:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2973:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2961:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2961:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2934:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2934:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2934:43:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_payable_t_address__to_t_address_t_address_payable_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2709:9:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2720:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2728:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2736:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2747:4:80",
                    "type": ""
                  }
                ],
                "src": "2583:400:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3087:101:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3097:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3109:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3120:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3105:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3105:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3097:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3139:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3154:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3170:2:80",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3174:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3166:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3166:10:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3178:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3162:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3162:18:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3150:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3150:31:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3132:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3132:50:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3132:50:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3056:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3067:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3078:4:80",
                    "type": ""
                  }
                ],
                "src": "2988:200:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3280:228:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3326:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3335:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3338:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3328:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3328:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3328:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3301:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3310:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3297:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3297:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3322:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3293:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3293:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "3290:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3351:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3377:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3364:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3364:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "3355:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3421:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "3396:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3396:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3396:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3436:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "3446:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3436:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3460:42:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3487:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3498:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3483:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3483:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3470:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3470:32:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "3460:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3238:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3249:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3261:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3269:6:80",
                    "type": ""
                  }
                ],
                "src": "3193:315:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3582:115:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3628:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3637:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3640:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3630:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3630:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3630:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3603:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3612:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3599:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3599:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3624:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3595:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3595:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "3592:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3653:38:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3681:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96",
                          "nodeType": "YulIdentifier",
                          "src": "3663:17:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3663:28:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3653:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint96",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3548:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3559:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3571:6:80",
                    "type": ""
                  }
                ],
                "src": "3513:184:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3803:102:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3813:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3825:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3836:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3821:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3821:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3813:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3855:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3870:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3886:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3891:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3882:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3882:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3895:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3878:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3878:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3866:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3866:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3848:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3848:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3848:51:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3772:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3783:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3794:4:80",
                    "type": ""
                  }
                ],
                "src": "3702:203:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4038:482:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4085:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4094:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4097:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4087:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4087:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4087:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4059:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4068:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4055:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4055:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4080:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4051:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4051:33:80"
                      },
                      "nodeType": "YulIf",
                      "src": "4048:53:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4110:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4136:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4123:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4123:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "4114:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4180:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "4155:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4155:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4155:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4195:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "4205:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4195:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4219:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4251:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4262:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4247:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4247:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4234:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4234:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "4223:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "4300:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "4275:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4275:33:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4275:33:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4317:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "4327:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4317:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4343:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4375:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4386:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4371:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4371:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4358:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4358:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_2",
                          "nodeType": "YulTypedName",
                          "src": "4347:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "4424:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "4399:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4399:33:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4399:33:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4441:17:80",
                      "value": {
                        "name": "value_2",
                        "nodeType": "YulIdentifier",
                        "src": "4451:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "4441:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4467:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4499:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4510:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4495:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4495:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96",
                          "nodeType": "YulIdentifier",
                          "src": "4477:17:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4477:37:80"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "4467:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_address_payablet_addresst_uint96",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3980:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3991:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4003:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4011:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4019:6:80",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "4027:6:80",
                    "type": ""
                  }
                ],
                "src": "3910:610:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4628:357:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4674:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4683:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4686:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4676:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4676:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4676:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4649:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4658:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4645:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4645:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4670:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4641:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4641:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "4638:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4699:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4725:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4712:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4712:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "4703:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4769:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "4744:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4744:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4744:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4784:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "4794:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4784:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4808:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4840:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4851:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4836:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4836:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4823:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4823:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "4812:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "4889:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "4864:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4864:33:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4864:33:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4906:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "4916:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4906:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4932:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4964:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4975:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4960:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4960:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96",
                          "nodeType": "YulIdentifier",
                          "src": "4942:17:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4942:37:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "4932:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint96",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4578:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4589:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4601:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4609:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4617:6:80",
                    "type": ""
                  }
                ],
                "src": "4525:460:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5092:310:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5138:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5147:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5150:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5140:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5140:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5140:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5113:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5122:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5109:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5109:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5134:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5105:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5105:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "5102:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5163:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5189:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5176:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5176:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "5167:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5233:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "5208:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5208:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5208:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5248:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "5258:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5248:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5272:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5304:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5315:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5300:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5300:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5287:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5287:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "5276:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5354:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5363:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5366:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5356:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5356:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5356:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "5341:7:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5350:1:80",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5338:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5338:14:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "5331:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5331:22:80"
                      },
                      "nodeType": "YulIf",
                      "src": "5328:42:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5379:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "5389:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "5379:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_enum$_StakeType_$11840",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5050:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5061:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5073:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5081:6:80",
                    "type": ""
                  }
                ],
                "src": "4990:412:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5506:93:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5516:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5528:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5539:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5524:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5524:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5516:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5558:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5573:6:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5581:10:80",
                                "type": "",
                                "value": "0xffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5569:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5569:23:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5551:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5551:42:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5551:42:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5475:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5486:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5497:4:80",
                    "type": ""
                  }
                ],
                "src": "5407:192:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5690:166:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5736:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5745:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5748:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5738:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5738:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5738:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5711:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5720:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5707:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5707:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5732:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5703:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5703:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "5700:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5761:38:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5789:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96",
                          "nodeType": "YulIdentifier",
                          "src": "5771:17:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5771:28:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5761:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5808:42:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5835:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5846:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5831:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5831:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5818:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5818:32:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "5808:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint96t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5648:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5659:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5671:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5679:6:80",
                    "type": ""
                  }
                ],
                "src": "5604:252:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5973:425:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6019:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6028:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6031:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6021:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6021:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6021:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5994:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6003:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5990:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5990:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6015:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5986:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5986:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "5983:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6044:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6070:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6057:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6057:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "6048:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6114:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "6089:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6089:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6089:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6129:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "6139:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6129:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6153:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6185:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6196:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6181:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6181:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6168:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6168:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "6157:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "6234:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "6209:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6209:33:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6209:33:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6251:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "6261:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "6251:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6277:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6309:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6320:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6305:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6305:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6292:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6292:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_2",
                          "nodeType": "YulTypedName",
                          "src": "6281:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "6358:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "6333:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6333:33:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6333:33:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6375:17:80",
                      "value": {
                        "name": "value_2",
                        "nodeType": "YulIdentifier",
                        "src": "6385:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "6375:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_address_payablet_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5923:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5934:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5946:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5954:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5962:6:80",
                    "type": ""
                  }
                ],
                "src": "5861:537:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6435:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6452:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6459:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6464:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "6455:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6455:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6445:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6445:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6445:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6492:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6495:4:80",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6485:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6485:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6485:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6516:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6519:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "6509:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6509:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6509:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "6403:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6599:844:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6648:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6657:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6660:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6650:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6650:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6650:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6627:6:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6635:4:80",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6623:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6623:17:80"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "6642:3:80"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6619:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6619:27:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6612:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6612:35:80"
                      },
                      "nodeType": "YulIf",
                      "src": "6609:55:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6673:30:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "6696:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6683:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6683:20:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "6677:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6712:14:80",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6722:4:80",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "6716:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6735:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6753:2:80",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6757:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "6749:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6749:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6761:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "6745:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6745:18:80"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "6739:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6786:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "6788:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6788:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6788:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "6778:2:80"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "6782:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "6775:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6775:10:80"
                      },
                      "nodeType": "YulIf",
                      "src": "6772:36:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6817:20:80",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6831:1:80",
                            "type": "",
                            "value": "5"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "6834:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "shl",
                          "nodeType": "YulIdentifier",
                          "src": "6827:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6827:10:80"
                      },
                      "variables": [
                        {
                          "name": "_4",
                          "nodeType": "YulTypedName",
                          "src": "6821:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6846:23:80",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6866:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "6860:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6860:9:80"
                      },
                      "variables": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulTypedName",
                          "src": "6850:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6878:56:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "6900:6:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "6916:2:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6920:2:80",
                                    "type": "",
                                    "value": "63"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6912:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6912:11:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6929:2:80",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "6925:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6925:7:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6908:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6908:25:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6896:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6896:38:80"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "6882:10:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6993:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "6995:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6995:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6995:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "6952:10:80"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "6964:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6949:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6949:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "6972:10:80"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "6984:6:80"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6969:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6969:22:80"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "6946:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6946:46:80"
                      },
                      "nodeType": "YulIf",
                      "src": "6943:72:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7031:2:80",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "7035:10:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7024:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7024:22:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7024:22:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7055:17:80",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "7066:6:80"
                      },
                      "variables": [
                        {
                          "name": "dst",
                          "nodeType": "YulTypedName",
                          "src": "7059:3:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "7088:6:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "7096:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7081:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7081:18:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7081:18:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7108:22:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "7119:6:80"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "7127:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7115:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7115:15:80"
                      },
                      "variableNames": [
                        {
                          "name": "dst",
                          "nodeType": "YulIdentifier",
                          "src": "7108:3:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7139:38:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7161:6:80"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "7169:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7157:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7157:15:80"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "7174:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7153:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7153:24:80"
                      },
                      "variables": [
                        {
                          "name": "srcEnd",
                          "nodeType": "YulTypedName",
                          "src": "7143:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7205:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7214:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7217:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7207:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7207:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7207:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7192:6:80"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "7200:3:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7189:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7189:15:80"
                      },
                      "nodeType": "YulIf",
                      "src": "7186:35:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7230:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "7245:6:80"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "7253:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7241:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7241:15:80"
                      },
                      "variables": [
                        {
                          "name": "src",
                          "nodeType": "YulTypedName",
                          "src": "7234:3:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7321:92:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "7342:3:80"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "7366:3:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_decode_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "7347:18:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7347:23:80"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "7335:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7335:36:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7335:36:80"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "7384:19:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "7395:3:80"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "7400:2:80"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "7391:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7391:12:80"
                            },
                            "variableNames": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "7384:3:80"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "7276:3:80"
                          },
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7281:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "7273:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7273:15:80"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "7289:23:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "7291:19:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "7302:3:80"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "7307:2:80"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "7298:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7298:12:80"
                            },
                            "variableNames": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "7291:3:80"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "7269:3:80",
                        "statements": []
                      },
                      "src": "7265:148:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7422:15:80",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "7431:6:80"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "7422:5:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_array_address_dyn",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "6573:6:80",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "6581:3:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "6589:5:80",
                    "type": ""
                  }
                ],
                "src": "6535:908:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7593:479:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7640:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7649:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7652:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7642:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7642:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7642:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7614:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7623:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7610:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7610:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7635:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "7606:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7606:33:80"
                      },
                      "nodeType": "YulIf",
                      "src": "7603:53:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7665:38:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7693:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96",
                          "nodeType": "YulIdentifier",
                          "src": "7675:17:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7675:28:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7665:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7712:42:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7739:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7750:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7735:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7735:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7722:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7722:32:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "7712:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7763:45:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7793:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7804:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7789:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7789:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7776:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7776:32:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "7767:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7842:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "7817:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7817:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7817:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7857:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "7867:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "7857:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7881:46:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7912:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7923:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7908:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7908:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7895:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7895:32:80"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "7885:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7970:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7979:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7982:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7972:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7972:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7972:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "7942:6:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7958:2:80",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7962:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7954:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7954:10:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7966:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7950:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7950:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7939:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7939:30:80"
                      },
                      "nodeType": "YulIf",
                      "src": "7936:50:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7995:71:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8038:9:80"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8049:6:80"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8034:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8034:22:80"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "8058:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "8005:28:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8005:61:80"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "7995:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint96t_uint256t_addresst_array$_t_address_$dyn_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7535:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "7546:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7558:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7566:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "7574:6:80",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "7582:6:80",
                    "type": ""
                  }
                ],
                "src": "7448:624:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8147:110:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8193:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8202:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8205:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8195:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8195:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8195:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8168:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8177:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8164:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8164:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8189:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8160:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8160:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "8157:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8218:33:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8241:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8228:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8228:23:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8218:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8113:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8124:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8136:6:80",
                    "type": ""
                  }
                ],
                "src": "8077:180:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8373:309:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8419:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8428:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8431:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8421:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8421:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8421:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8394:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8403:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8390:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8390:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8415:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8386:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8386:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "8383:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8444:38:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8472:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96",
                          "nodeType": "YulIdentifier",
                          "src": "8454:17:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8454:28:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8444:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8491:46:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8522:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8533:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8518:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8518:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8505:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8505:32:80"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "8495:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8580:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8589:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8592:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8582:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8582:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8582:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "8552:6:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8568:2:80",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8572:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "8564:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8564:10:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8576:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8560:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8560:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "8549:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8549:30:80"
                      },
                      "nodeType": "YulIf",
                      "src": "8546:50:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8605:71:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8648:9:80"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8659:6:80"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8644:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8644:22:80"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "8668:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_array_address_dyn",
                          "nodeType": "YulIdentifier",
                          "src": "8615:28:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8615:61:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "8605:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint96t_array$_t_address_$dyn_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8331:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8342:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8354:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "8362:6:80",
                    "type": ""
                  }
                ],
                "src": "8262:420:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8773:333:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8819:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8828:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8831:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8821:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8821:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8821:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8794:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8803:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8790:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8790:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8815:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8786:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8786:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "8783:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8844:36:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8870:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8857:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8857:23:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "8848:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8914:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "8889:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8889:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8889:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8929:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "8939:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8929:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8953:47:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8985:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8996:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8981:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8981:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8968:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8968:32:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "8957:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "9058:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9067:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9070:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "9060:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "9060:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "9060:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "9022:7:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9035:7:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9044:10:80",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9031:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9031:24:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "9019:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9019:37:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "9012:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9012:45:80"
                      },
                      "nodeType": "YulIf",
                      "src": "9009:65:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9083:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "9093:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "9083:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8731:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8742:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8754:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "8762:6:80",
                    "type": ""
                  }
                ],
                "src": "8687:419:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9270:188:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "9280:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9292:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9303:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9288:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9288:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9280:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9322:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9343:6:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9337:5:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9337:13:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9352:10:80",
                                "type": "",
                                "value": "0xffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9333:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9333:30:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9315:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9315:49:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9315:49:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9384:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9395:4:80",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9380:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9380:20:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "9416:6:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9424:4:80",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9412:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9412:17:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9406:5:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9406:24:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9440:2:80",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9444:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "9436:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9436:10:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9448:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9432:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9432:18:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9402:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9402:49:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9373:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9373:79:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9373:79:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_struct$_Checkpoint_$10137_memory_ptr__to_t_struct$_Checkpoint_$10137_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9239:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9250:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9261:4:80",
                    "type": ""
                  }
                ],
                "src": "9111:347:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9590:170:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "9600:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9612:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9623:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9608:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9608:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9600:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9642:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9657:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9673:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9678:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "9669:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9669:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9682:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9665:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9665:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9653:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9653:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9635:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9635:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9635:51:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9706:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9717:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9702:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9702:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9726:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9742:2:80",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9746:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "9738:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9738:10:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9750:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9734:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9734:18:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9722:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9722:31:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9695:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9695:59:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9695:59:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint96__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9551:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9562:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9570:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9581:4:80",
                    "type": ""
                  }
                ],
                "src": "9463:297:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9939:178:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9956:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9967:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9949:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9949:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9949:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9990:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10001:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9986:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9986:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10006:2:80",
                            "type": "",
                            "value": "28"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9979:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9979:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9979:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10029:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10040:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10025:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10025:18:80"
                          },
                          {
                            "hexValue": "43616c6c6572206973206e6f742074686520676f7665726e616e6365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10045:30:80",
                            "type": "",
                            "value": "Caller is not the governance"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10018:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10018:58:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10018:58:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10085:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10097:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10108:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10093:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10093:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10085:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_36f7c7a299c732c4a278528667a5e3d68e0daf6ff361012b2b3d09d09eda408f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9916:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9930:4:80",
                    "type": ""
                  }
                ],
                "src": "9765:352:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10296:177:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10313:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10324:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10306:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10306:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10306:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10347:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10358:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10343:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10343:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10363:2:80",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10336:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10336:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10336:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10386:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10397:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10382:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10382:18:80"
                          },
                          {
                            "hexValue": "4170706c69636174696f6e206973206e6f7420617070726f766564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10402:29:80",
                            "type": "",
                            "value": "Application is not approved"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10375:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10375:57:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10375:57:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10441:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10453:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10464:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10449:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10449:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10441:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_f88ee4a5c25b2ddc5ef937b1fdca87bfbc99f1c40b47ddac50291d02e4eb6cf4__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10273:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10287:4:80",
                    "type": ""
                  }
                ],
                "src": "10122:351:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10652:167:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10669:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10680:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10662:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10662:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10662:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10703:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10714:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10699:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10699:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10719:2:80",
                            "type": "",
                            "value": "17"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10692:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10692:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10692:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10742:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10753:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10738:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10738:18:80"
                          },
                          {
                            "hexValue": "4e6f7468696e6720746f20746f702d7570",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10758:19:80",
                            "type": "",
                            "value": "Nothing to top-up"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10731:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10731:47:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10731:47:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10787:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10799:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10810:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10795:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10795:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10787:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_05371ca088b53dad455db88a5d048267c12eff6c1f75224fabfb6268020bcff6__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10629:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10643:4:80",
                    "type": ""
                  }
                ],
                "src": "10478:341:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10998:178:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11015:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11026:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11008:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11008:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11008:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11049:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11060:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11045:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11045:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11065:2:80",
                            "type": "",
                            "value": "28"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11038:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11038:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11038:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11088:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11099:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11084:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11084:18:80"
                          },
                          {
                            "hexValue": "506172616d6574657273206d75737420626520737065636966696564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11104:30:80",
                            "type": "",
                            "value": "Parameters must be specified"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11077:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11077:58:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11077:58:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11144:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11156:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11167:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11152:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11152:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11144:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_eede2581a01d55d6c31e404df190bb3342df3bac4ab2e3aa5e9e9566374e0e08__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10975:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10989:4:80",
                    "type": ""
                  }
                ],
                "src": "10824:352:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11213:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11230:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11237:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11242:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "11233:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11233:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11223:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11223:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11223:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11270:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11273:4:80",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11263:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11263:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11263:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11294:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11297:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "11287:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11287:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11287:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "11181:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11360:189:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11370:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11388:2:80",
                                "type": "",
                                "value": "96"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11392:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "11384:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11384:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11396:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "11380:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11380:18:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "11374:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11407:21:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "11422:1:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "11425:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "11418:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11418:10:80"
                      },
                      "variables": [
                        {
                          "name": "x_1",
                          "nodeType": "YulTypedName",
                          "src": "11411:3:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11437:21:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "11452:1:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "11455:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "11448:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11448:10:80"
                      },
                      "variables": [
                        {
                          "name": "y_1",
                          "nodeType": "YulTypedName",
                          "src": "11441:3:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11492:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "11494:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11494:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11494:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x_1",
                            "nodeType": "YulIdentifier",
                            "src": "11473:3:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11482:2:80"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "11486:3:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "11478:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11478:12:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "11470:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11470:21:80"
                      },
                      "nodeType": "YulIf",
                      "src": "11467:47:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11523:20:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x_1",
                            "nodeType": "YulIdentifier",
                            "src": "11534:3:80"
                          },
                          {
                            "name": "y_1",
                            "nodeType": "YulIdentifier",
                            "src": "11539:3:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11530:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11530:13:80"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "11523:3:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint96",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "11343:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "11346:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "11352:3:80",
                    "type": ""
                  }
                ],
                "src": "11313:236:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11728:180:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11745:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11756:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11738:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11738:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11738:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11779:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11790:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11775:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11775:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11795:2:80",
                            "type": "",
                            "value": "30"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11768:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11768:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11768:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11818:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11829:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11814:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11814:18:80"
                          },
                          {
                            "hexValue": "43616c6c6572206973206e6f74207468652070616e696320627574746f6e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11834:32:80",
                            "type": "",
                            "value": "Caller is not the panic button"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11807:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11807:60:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11807:60:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11876:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11888:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11899:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11884:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11884:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11876:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_58b09ba14e6149ed431ece7849144def4b9835833b611f9801042665308f503f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11705:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11719:4:80",
                    "type": ""
                  }
                ],
                "src": "11554:354:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12087:173:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12104:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12115:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12097:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12097:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12097:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12138:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12149:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12134:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12134:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12154:2:80",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12127:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12127:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12127:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12177:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12188:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12173:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12173:18:80"
                          },
                          {
                            "hexValue": "43616e2774207061757365206170706c69636174696f6e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12193:25:80",
                            "type": "",
                            "value": "Can't pause application"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12166:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12166:53:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12166:53:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12228:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12240:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12251:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12236:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12236:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12228:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8fb8fb4ba798729ca06c5b0367136529678dab13e471084d38917c2c80cb7c2b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12064:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12078:4:80",
                    "type": ""
                  }
                ],
                "src": "11913:347:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12439:166:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12456:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12467:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12449:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12449:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12449:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12490:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12501:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12486:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12486:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12506:2:80",
                            "type": "",
                            "value": "16"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12479:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12479:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12479:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12529:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12540:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12525:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12525:18:80"
                          },
                          {
                            "hexValue": "4e6f7468696e6720746f20736c617368",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12545:18:80",
                            "type": "",
                            "value": "Nothing to slash"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12518:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12518:46:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12518:46:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12573:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12585:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12596:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12581:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12581:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12573:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a8e481b704819cd88f0f6566f7ee2f0006e52543333300afb51404b8d7d75f30__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12416:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12430:4:80",
                    "type": ""
                  }
                ],
                "src": "12265:340:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12725:191:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12771:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12780:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12783:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "12773:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12773:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12773:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12746:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12755:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12742:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12742:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12767:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "12738:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12738:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "12735:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12796:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12812:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "12806:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12806:16:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "12796:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12831:35:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12851:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12862:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12847:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12847:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "12841:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12841:25:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "12831:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12875:35:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12895:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12906:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12891:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12891:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "12885:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12885:25:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "12875:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12675:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "12686:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "12698:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "12706:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "12714:6:80",
                    "type": ""
                  }
                ],
                "src": "12610:306:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13095:173:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13112:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13123:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13105:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13105:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13105:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13146:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13157:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13142:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13142:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13162:2:80",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13135:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13135:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13135:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13185:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13196:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13181:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13181:18:80"
                          },
                          {
                            "hexValue": "5468657265206973206e6f2064697363726570616e6379",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13201:25:80",
                            "type": "",
                            "value": "There is no discrepancy"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13174:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13174:53:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13174:53:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13236:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13248:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13259:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13244:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13244:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13236:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_64b0b87da4ad2e7e3100604b4bac4e26ce56c44f7e41d0af41932a2bee35e2af__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13072:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13086:4:80",
                    "type": ""
                  }
                ],
                "src": "12921:347:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13321:181:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "13331:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13349:2:80",
                                "type": "",
                                "value": "96"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13353:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "13345:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13345:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13357:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "13341:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13341:18:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "13335:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "13368:21:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "13383:1:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "13386:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "13379:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13379:10:80"
                      },
                      "variables": [
                        {
                          "name": "x_1",
                          "nodeType": "YulTypedName",
                          "src": "13372:3:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "13398:21:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "13413:1:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "13416:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "13409:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13409:10:80"
                      },
                      "variables": [
                        {
                          "name": "y_1",
                          "nodeType": "YulTypedName",
                          "src": "13402:3:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "13444:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "13446:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "13446:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "13446:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x_1",
                            "nodeType": "YulIdentifier",
                            "src": "13434:3:80"
                          },
                          {
                            "name": "y_1",
                            "nodeType": "YulIdentifier",
                            "src": "13439:3:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "13431:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13431:12:80"
                      },
                      "nodeType": "YulIf",
                      "src": "13428:38:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13475:21:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x_1",
                            "nodeType": "YulIdentifier",
                            "src": "13487:3:80"
                          },
                          {
                            "name": "y_1",
                            "nodeType": "YulIdentifier",
                            "src": "13492:3:80"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "13483:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13483:13:80"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "13475:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint96",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "13303:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "13306:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "13312:4:80",
                    "type": ""
                  }
                ],
                "src": "13273:229:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13681:175:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13698:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13709:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13691:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13691:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13691:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13732:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13743:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13728:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13728:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13748:2:80",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13721:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13721:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13721:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13771:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13782:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13767:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13767:18:80"
                          },
                          {
                            "hexValue": "43616e27742064697361626c65206170706c69636174696f6e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13787:27:80",
                            "type": "",
                            "value": "Can't disable application"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13760:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13760:55:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13760:55:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13824:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13836:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13847:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13832:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13832:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13824:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_944d02c9873f5b4e40f550ff6a55b5ca56515be020d48f062b4d5b1ac7a9cf3a__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13658:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13672:4:80",
                    "type": ""
                  }
                ],
                "src": "13507:349:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13909:80:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "13936:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "13938:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "13938:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "13938:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "13925:1:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13932:1:80"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "13928:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13928:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "13922:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13922:13:80"
                      },
                      "nodeType": "YulIf",
                      "src": "13919:39:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13967:16:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "13978:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "13981:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13974:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13974:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "13967:3:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "13892:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "13895:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "13901:3:80",
                    "type": ""
                  }
                ],
                "src": "13861:128:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14168:171:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14185:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14196:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14178:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14178:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14178:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14219:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14230:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14215:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14215:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14235:2:80",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14208:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14208:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14208:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14258:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14269:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14254:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14254:18:80"
                          },
                          {
                            "hexValue": "4e6f74206f776e6572206f722070726f7669646572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14274:23:80",
                            "type": "",
                            "value": "Not owner or provider"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14247:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14247:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14247:51:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14307:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14319:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14330:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14315:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14315:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14307:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_db64dd70224c019543d4d9ef245fda7c012ee9e636825aae17375c6af96c3ec7__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14145:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14159:4:80",
                    "type": ""
                  }
                ],
                "src": "13994:345:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14518:168:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14535:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14546:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14528:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14528:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14528:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14569:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14580:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14565:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14565:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14585:2:80",
                            "type": "",
                            "value": "18"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14558:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14558:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14558:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14608:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14619:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14604:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14604:18:80"
                          },
                          {
                            "hexValue": "4e6f7468696e6720746f20756e7374616b65",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14624:20:80",
                            "type": "",
                            "value": "Nothing to unstake"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14597:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14597:48:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14597:48:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14654:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14666:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14677:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14662:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14662:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14654:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_f9b7bc8e04a7bef6bec8b9d8ce211c79f13b16fd8e577f3f5d176f76c14c521f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14495:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14509:4:80",
                    "type": ""
                  }
                ],
                "src": "14344:342:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14865:177:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14882:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14893:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14875:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14875:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14875:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14916:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14927:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14912:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14912:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14932:2:80",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14905:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14905:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14905:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14955:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14966:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14951:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14951:18:80"
                          },
                          {
                            "hexValue": "4b656570207374616b65207374696c6c20617574686f72697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14971:29:80",
                            "type": "",
                            "value": "Keep stake still authorized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14944:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14944:57:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14944:57:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15010:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15022:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15033:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15018:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15018:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15010:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_229e6d41e09584dc8d0a410f121cc8b73769b5a1fb0552b27d056f835451f973__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14842:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14856:4:80",
                    "type": ""
                  }
                ],
                "src": "14691:351:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15221:180:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15238:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15249:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15231:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15231:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15231:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15272:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15283:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15268:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15268:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15288:2:80",
                            "type": "",
                            "value": "30"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15261:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15261:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15261:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15311:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15322:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15307:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15307:18:80"
                          },
                          {
                            "hexValue": "43616e277420756e7374616b65206561726c696572207468616e20323468",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15327:32:80",
                            "type": "",
                            "value": "Can't unstake earlier than 24h"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15300:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15300:60:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15300:60:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15369:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15381:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15392:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15377:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15377:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15369:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_58faec4ae87565732d8e09c30f37552291ab01015793882dc39173ef1a8ca4a3__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15198:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15212:4:80",
                    "type": ""
                  }
                ],
                "src": "15047:354:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15580:176:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15597:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15608:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15590:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15590:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15590:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15631:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15642:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15627:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15627:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15647:2:80",
                            "type": "",
                            "value": "26"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15620:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15620:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15620:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15670:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15681:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15666:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15666:18:80"
                          },
                          {
                            "hexValue": "50726f766964657220697320616c726561647920696e20757365",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15686:28:80",
                            "type": "",
                            "value": "Provider is already in use"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15659:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15659:56:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15659:56:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15724:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15736:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15747:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15732:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15732:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15724:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1aa3aaa5e947cd03ebfaac1842896e542f3d0e7160a4b27e0c64026ef6a8b9ab__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15557:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15571:4:80",
                    "type": ""
                  }
                ],
                "src": "15406:350:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15935:165:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15952:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15963:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15945:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15945:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15945:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15986:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15997:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15982:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15982:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16002:2:80",
                            "type": "",
                            "value": "15"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15975:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15975:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15975:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16025:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16036:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16021:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16021:18:80"
                          },
                          {
                            "hexValue": "4e6f7468696e6720746f2073796e63",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16041:17:80",
                            "type": "",
                            "value": "Nothing to sync"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16014:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16014:45:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16014:45:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16068:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16080:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16091:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16076:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16076:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16068:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e7ef8deaaa8398ae3d36a196629e0cddaa901e233927631ebc7505cc72252f1e__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15912:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15926:4:80",
                    "type": ""
                  }
                ],
                "src": "15761:339:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16186:170:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "16232:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "16241:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "16244:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "16234:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "16234:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "16234:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "16207:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16216:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "16203:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16203:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16228:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "16199:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16199:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "16196:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16257:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16276:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "16270:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16270:16:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "16261:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "16320:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "16295:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16295:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16295:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16335:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "16345:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "16335:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16152:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "16163:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16175:6:80",
                    "type": ""
                  }
                ],
                "src": "16105:251:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16450:170:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "16496:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "16505:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "16508:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "16498:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "16498:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "16498:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "16471:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16480:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "16467:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16467:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16492:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "16463:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16463:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "16460:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16521:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16540:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "16534:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16534:16:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "16525:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "16584:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "16559:24:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16559:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16559:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16599:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "16609:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "16599:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_payable_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16416:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "16427:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16439:6:80",
                    "type": ""
                  }
                ],
                "src": "16361:259:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16788:243:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "16798:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16810:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16821:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16806:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16806:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16798:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16833:29:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16851:3:80",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16856:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "16847:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16847:11:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16860:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "16843:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16843:19:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "16837:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16878:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16893:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16901:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16889:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16889:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16871:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16871:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16871:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16925:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16936:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16921:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16921:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "16945:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16953:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16941:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16941:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16914:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16914:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16914:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16977:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16988:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16973:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16973:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "16997:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17013:2:80",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17017:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "17009:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17009:10:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17021:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17005:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17005:18:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16993:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16993:31:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16966:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16966:59:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16966:59:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_payable_t_address_t_uint96__to_t_address_t_address_t_uint96__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16741:9:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "16752:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "16760:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16768:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16779:4:80",
                    "type": ""
                  }
                ],
                "src": "16625:406:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17210:169:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17227:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17238:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17220:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17220:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17220:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17261:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17272:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17257:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17257:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17277:2:80",
                            "type": "",
                            "value": "19"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17250:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17250:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17250:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17300:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17311:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17296:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17296:18:80"
                          },
                          {
                            "hexValue": "546f6f206d75636820746f20756e7374616b65",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17316:21:80",
                            "type": "",
                            "value": "Too much to unstake"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17289:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17289:49:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17289:49:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17347:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17359:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17370:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17355:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17355:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17347:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_842a76284a753d753eda87e31a39dc8d9f9fc83d2b4f2051ec6d440b08c3490c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17187:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17201:4:80",
                    "type": ""
                  }
                ],
                "src": "17036:343:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17558:177:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17575:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17586:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17568:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17568:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17568:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17609:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17620:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17605:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17605:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17625:2:80",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17598:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17598:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17598:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17648:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17659:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17644:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17644:18:80"
                          },
                          {
                            "hexValue": "416d6f756e74206973206c657373207468616e206d696e696d756d",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17664:29:80",
                            "type": "",
                            "value": "Amount is less than minimum"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17637:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17637:57:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17637:57:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17703:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17715:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17726:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17711:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17711:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17703:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3344bafcc6284636168546409df35508f8669a08e1f3b1749102e268af48152f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17535:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17549:4:80",
                    "type": ""
                  }
                ],
                "src": "17384:351:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17914:164:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17931:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17942:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17924:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17924:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17924:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17965:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17976:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17961:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17961:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17981:2:80",
                            "type": "",
                            "value": "14"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17954:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17954:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17954:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18004:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18015:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18000:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18000:18:80"
                          },
                          {
                            "hexValue": "4e6f7420617574686f72697a6572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18020:16:80",
                            "type": "",
                            "value": "Not authorizer"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17993:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17993:44:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17993:44:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18046:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18058:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18069:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18054:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18054:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18046:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_34e7eba5c773c3fc0fd07c7a1cb12144ea09bc2361c6dcab82c3da05835bce57__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17891:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17905:4:80",
                    "type": ""
                  }
                ],
                "src": "17740:338:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18257:175:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18274:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18285:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18267:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18267:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18267:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18308:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18319:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18304:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18304:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18324:2:80",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18297:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18297:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18297:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18347:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18358:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18343:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18343:18:80"
                          },
                          {
                            "hexValue": "416d6f756e74206578636565647320617574686f72697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18363:27:80",
                            "type": "",
                            "value": "Amount exceeds authorized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18336:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18336:55:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18336:55:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18400:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18412:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18423:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18408:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18408:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18400:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_29d08fe4f6c0e6490475e4305182f47eaf3b60b9879fa3d62104f0e2eeeb05ee__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18234:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18248:4:80",
                    "type": ""
                  }
                ],
                "src": "18083:349:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18562:174:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "18572:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18584:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18595:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18580:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18580:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18572:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18607:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18625:2:80",
                                "type": "",
                                "value": "96"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18629:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "18621:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18621:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18633:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "18617:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18617:18:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "18611:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18651:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18666:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18674:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18662:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18662:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18644:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18644:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18644:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18698:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18709:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18694:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18694:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "18718:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18726:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18714:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18714:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18687:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18687:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18687:43:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint96_t_uint96__to_t_uint96_t_uint96__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18523:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "18534:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "18542:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18553:4:80",
                    "type": ""
                  }
                ],
                "src": "18437:299:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18894:243:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "18904:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18916:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18927:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18912:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18912:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18904:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18946:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18961:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18977:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18982:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "18973:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18973:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18986:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18969:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18969:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18957:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18957:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18939:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18939:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18939:51:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18999:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19017:2:80",
                                "type": "",
                                "value": "96"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19021:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "19013:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19013:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19025:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "19009:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19009:18:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "19003:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19047:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19058:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19043:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19043:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "19067:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19075:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "19063:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19063:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19036:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19036:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19036:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19099:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19110:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19095:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19095:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "19119:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19127:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "19115:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19115:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19088:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19088:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19088:43:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint96_t_uint96__to_t_address_t_uint96_t_uint96__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18847:9:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "18858:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "18866:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "18874:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18885:4:80",
                    "type": ""
                  }
                ],
                "src": "18741:396:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19316:167:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19333:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19344:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19326:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19326:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19326:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19367:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19378:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19363:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19363:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19383:2:80",
                            "type": "",
                            "value": "17"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19356:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19356:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19356:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19406:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19417:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19402:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19402:18:80"
                          },
                          {
                            "hexValue": "4e6f7420656e6f75676820746f6b656e73",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19422:19:80",
                            "type": "",
                            "value": "Not enough tokens"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19395:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19395:47:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19395:47:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19451:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19463:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19474:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19459:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19459:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19451:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e6a4c292a2678b9c898d987106e4b784681d3ef40e71d741a89ab96444ddb55d__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19293:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19307:4:80",
                    "type": ""
                  }
                ],
                "src": "19142:341:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19537:76:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "19559:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "19561:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19561:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19561:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "19553:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "19556:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "19550:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19550:8:80"
                      },
                      "nodeType": "YulIf",
                      "src": "19547:34:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19590:17:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "19602:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "19605:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "19598:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19598:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "19590:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "19519:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "19522:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "19528:4:80",
                    "type": ""
                  }
                ],
                "src": "19488:125:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19650:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19667:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19674:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19679:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "19670:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19670:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19660:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19660:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19660:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19707:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19710:4:80",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19700:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19700:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19700:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19731:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19734:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "19724:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19724:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19724:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "19618:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19797:88:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "19828:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "19830:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "19830:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "19830:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "19813:5:80"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19824:1:80",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "19820:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19820:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "19810:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19810:17:80"
                      },
                      "nodeType": "YulIf",
                      "src": "19807:43:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19859:20:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "19870:5:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19877:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19866:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19866:13:80"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "19859:3:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "19779:5:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "19789:3:80",
                    "type": ""
                  }
                ],
                "src": "19750:135:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20064:177:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20081:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20092:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20074:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20074:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20074:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20115:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20126:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20111:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20111:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20131:2:80",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20104:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20104:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20104:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20154:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20165:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20150:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20150:18:80"
                          },
                          {
                            "hexValue": "4e6f206465617574686f72697a696e6720696e2070726f63657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20170:29:80",
                            "type": "",
                            "value": "No deauthorizing in process"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20143:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20143:57:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20143:57:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20209:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20221:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20232:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20217:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20217:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20209:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_870bce32adff361513d26b76c73c474ec78d084a56337b164759ddd01d38fd2b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20041:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20055:4:80",
                    "type": ""
                  }
                ],
                "src": "19890:351:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20373:144:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "20383:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20395:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20406:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20391:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20391:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20383:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20425:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20440:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20456:2:80",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20460:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "20452:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20452:10:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20464:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "20448:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20448:18:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "20436:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20436:31:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20418:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20418:50:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20418:50:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20488:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20499:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20484:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20484:18:80"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "20504:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20477:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20477:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20477:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint96_t_uint256__to_t_uint96_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20334:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "20345:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "20353:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20364:4:80",
                    "type": ""
                  }
                ],
                "src": "20246:271:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20696:236:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20713:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20724:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20706:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20706:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20706:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20747:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20758:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20743:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20743:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20763:2:80",
                            "type": "",
                            "value": "46"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20736:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20736:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20736:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20786:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20797:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20782:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20782:18:80"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20802:34:80",
                            "type": "",
                            "value": "Initializable: contract is alrea"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20775:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20775:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20775:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20857:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20868:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20853:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20853:18:80"
                          },
                          {
                            "hexValue": "647920696e697469616c697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20873:16:80",
                            "type": "",
                            "value": "dy initialized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20846:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20846:44:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20846:44:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20899:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20911:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20922:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20907:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20907:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20899:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20673:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20687:4:80",
                    "type": ""
                  }
                ],
                "src": "20522:410:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21111:172:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21128:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21139:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21121:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21121:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21121:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21162:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21173:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21158:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21158:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21178:2:80",
                            "type": "",
                            "value": "22"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21151:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21151:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21151:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21201:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21212:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21197:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21197:18:80"
                          },
                          {
                            "hexValue": "4e6f7468696e672077617320617574686f72697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "21217:24:80",
                            "type": "",
                            "value": "Nothing was authorized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21190:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21190:52:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21190:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "21251:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21263:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21274:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21259:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21259:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "21251:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_2295370407ca49f4ad1f48c9f9f17142d0c8d46f174a0bbd1344681cb2ee8f79__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21088:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21102:4:80",
                    "type": ""
                  }
                ],
                "src": "20937:346:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21369:103:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "21415:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "21424:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "21427:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "21417:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "21417:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "21417:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "21390:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21399:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "21386:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21386:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21411:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "21382:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21382:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "21379:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "21440:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21456:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "21450:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21450:16:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "21440:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21335:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "21346:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "21358:6:80",
                    "type": ""
                  }
                ],
                "src": "21288:184:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "21651:172:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21668:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21679:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21661:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21661:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21661:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21702:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21713:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21698:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21698:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21718:2:80",
                            "type": "",
                            "value": "22"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21691:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21691:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21691:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21741:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21752:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21737:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21737:18:80"
                          },
                          {
                            "hexValue": "5374616b65207374696c6c20617574686f72697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "21757:24:80",
                            "type": "",
                            "value": "Stake still authorized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "21730:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21730:52:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "21730:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "21791:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "21803:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21814:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "21799:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "21799:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "21791:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_879d053041a47be76d1d37529ae922a7410cea5ff026d817ac1c0de3d5a8869a__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21628:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21642:4:80",
                    "type": ""
                  }
                ],
                "src": "21477:346:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22002:177:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22019:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22030:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22012:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22012:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22012:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22053:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22064:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22049:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22049:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22069:2:80",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22042:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22042:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22042:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22092:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22103:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22088:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22088:18:80"
                          },
                          {
                            "hexValue": "4170706c69636174696f6e206973206e6f742064697361626c6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22108:29:80",
                            "type": "",
                            "value": "Application is not disabled"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22081:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22081:57:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22081:57:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "22147:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22159:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22170:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22155:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22155:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "22147:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_cbdc49425e2753cc0dee3d656a7e3e1e4f551c10b64891a807a56b3cf8bbf4d8__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "21979:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "21993:4:80",
                    "type": ""
                  }
                ],
                "src": "21828:351:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22358:179:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22375:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22386:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22368:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22368:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22368:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22409:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22420:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22405:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22405:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22425:2:80",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22398:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22398:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22398:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22448:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22459:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22444:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22444:18:80"
                          },
                          {
                            "hexValue": "4170706c69636174696f6e206973206e6f7420617574686f72697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "22464:31:80",
                            "type": "",
                            "value": "Application is not authorized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22437:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22437:59:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22437:59:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "22505:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22517:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22528:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22513:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22513:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "22505:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a265f627c712f4627e87d137d613d70b40af8ec7a7faf93c92c009e4f68673b9__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "22335:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "22349:4:80",
                    "type": ""
                  }
                ],
                "src": "22184:353:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "22676:174:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "22686:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22698:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22709:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "22694:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22694:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "22686:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "22721:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22739:2:80",
                                "type": "",
                                "value": "96"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22743:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "22735:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22735:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22747:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "22731:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22731:18:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "22725:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "22765:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22780:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22788:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22776:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22776:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22758:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22758:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22758:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22812:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22823:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22808:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22808:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22832:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22840:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22828:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22828:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "22801:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "22801:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "22801:43:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint96_t_rational_0_by_1__to_t_uint96_t_uint96__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "22637:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "22648:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "22656:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "22667:4:80",
                    "type": ""
                  }
                ],
                "src": "22542:308:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "23029:168:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23046:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23057:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23039:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23039:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23039:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23080:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23091:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23076:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23076:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23096:2:80",
                            "type": "",
                            "value": "18"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23069:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23069:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23069:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23119:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23130:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23115:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23115:18:80"
                          },
                          {
                            "hexValue": "4e6f7468696e6720746f2070726f63657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "23135:20:80",
                            "type": "",
                            "value": "Nothing to process"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23108:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23108:48:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23108:48:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "23165:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23177:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23188:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "23173:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23173:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "23165:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_4c22ab397bf113c7cf3d5f362fed7bd44c6f0d376a697a1f6314a70b1aadd0c5__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "23006:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "23020:4:80",
                    "type": ""
                  }
                ],
                "src": "22855:342:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "23331:119:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "23341:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23353:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23364:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "23349:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23349:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "23341:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23383:9:80"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "23394:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23376:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23376:25:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23376:25:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23421:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23432:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23417:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23417:18:80"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "23437:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23410:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23410:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23410:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "23292:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "23303:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "23311:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "23322:4:80",
                    "type": ""
                  }
                ],
                "src": "23202:248:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "23629:175:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23646:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23657:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23639:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23639:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23639:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23680:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23691:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23676:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23676:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23696:2:80",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23669:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23669:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23669:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23719:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23730:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23715:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23715:18:80"
                          },
                          {
                            "hexValue": "43616e277420617070726f7665206170706c69636174696f6e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "23735:27:80",
                            "type": "",
                            "value": "Can't approve application"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23708:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23708:55:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23708:55:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "23772:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "23784:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23795:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "23780:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23780:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "23772:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_5c8e504500c894954a29d26b6e73735390f7f46ca10c218e461c4837f181f83c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "23606:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "23620:4:80",
                    "type": ""
                  }
                ],
                "src": "23455:349:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "23983:171:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "24000:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24011:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "23993:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "23993:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "23993:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24034:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24045:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24030:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24030:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24050:2:80",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24023:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24023:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24023:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24073:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24084:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24069:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24069:18:80"
                          },
                          {
                            "hexValue": "546f6f206d616e79206170706c69636174696f6e73",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "24089:23:80",
                            "type": "",
                            "value": "Too many applications"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24062:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24062:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24062:51:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "24122:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "24134:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24145:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "24130:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24130:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "24122:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_76d0aee5c952791350eeaf21be9a285bca5b6347ea6cc46bda1ed0dd721fb878__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "23960:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "23974:4:80",
                    "type": ""
                  }
                ],
                "src": "23809:345:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "24333:179:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "24350:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24361:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24343:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24343:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24343:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24384:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24395:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24380:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24380:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24400:2:80",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24373:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24373:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24373:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24423:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24434:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24419:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24419:18:80"
                          },
                          {
                            "hexValue": "4e6f7420656e6f756768207374616b6520746f20617574686f72697a65",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "24439:31:80",
                            "type": "",
                            "value": "Not enough stake to authorize"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24412:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24412:59:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24412:59:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "24480:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "24492:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24503:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "24488:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24488:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "24480:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_2c7450e512904fda8312896c1aa3809963abac7ef887355f02a95ff669ecf9c8__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "24310:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "24324:4:80",
                    "type": ""
                  }
                ],
                "src": "24159:353:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "24691:169:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "24708:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24719:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24701:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24701:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24701:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24742:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24753:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24738:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24738:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24758:2:80",
                            "type": "",
                            "value": "19"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24731:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24731:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24731:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24781:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24792:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24777:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24777:18:80"
                          },
                          {
                            "hexValue": "43616c6c6572206973206e6f74206f776e6572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "24797:21:80",
                            "type": "",
                            "value": "Caller is not owner"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "24770:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24770:49:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "24770:49:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "24828:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "24840:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24851:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "24836:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "24836:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "24828:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "24668:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "24682:4:80",
                    "type": ""
                  }
                ],
                "src": "24517:343:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "25039:174:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "25056:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25067:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "25049:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25049:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "25049:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25090:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25101:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25086:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25086:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25106:2:80",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "25079:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25079:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "25079:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25129:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25140:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25125:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25125:18:80"
                          },
                          {
                            "hexValue": "426c6f636b206e6f74207965742064657465726d696e6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "25145:26:80",
                            "type": "",
                            "value": "Block not yet determined"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "25118:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25118:54:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "25118:54:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "25181:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "25193:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25204:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "25189:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25189:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "25181:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_83ee8eb1a9e77ac94f36a510fd8a146111d4889defed5bbb86a497f742fd412b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "25016:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "25030:4:80",
                    "type": ""
                  }
                ],
                "src": "24865:348:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "25250:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25267:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25274:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25279:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "25270:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25270:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "25260:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25260:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "25260:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25307:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25310:4:80",
                            "type": "",
                            "value": "0x12"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "25300:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25300:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "25300:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25331:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "25334:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "25324:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25324:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "25324:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x12",
                "nodeType": "YulFunctionDefinition",
                "src": "25218:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "25388:74:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "25411:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x12",
                                "nodeType": "YulIdentifier",
                                "src": "25413:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25413:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "25413:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "25408:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "25401:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25401:9:80"
                      },
                      "nodeType": "YulIf",
                      "src": "25398:35:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "25442:14:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "25451:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "25454:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "mod",
                          "nodeType": "YulIdentifier",
                          "src": "25447:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25447:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "25442:1:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "mod_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "25373:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "25376:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "25382:1:80",
                    "type": ""
                  }
                ],
                "src": "25350:112:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "25519:116:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "25578:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "25580:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25580:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "25580:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "25550:1:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "25543:6:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25543:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "25536:6:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25536:17:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25558:1:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25569:1:80",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "25565:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25565:6:80"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "25573:1:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "25561:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25561:14:80"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "25555:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25555:21:80"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "25532:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25532:45:80"
                      },
                      "nodeType": "YulIf",
                      "src": "25529:71:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "25609:20:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "25624:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "25627:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "25620:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25620:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "25609:7:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "25498:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "25501:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "25507:7:80",
                    "type": ""
                  }
                ],
                "src": "25467:168:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "25686:74:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "25709:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x12",
                                "nodeType": "YulIdentifier",
                                "src": "25711:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "25711:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "25711:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "25706:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "25699:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25699:9:80"
                      },
                      "nodeType": "YulIf",
                      "src": "25696:35:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "25740:14:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "25749:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "25752:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "25745:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "25745:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "25740:1:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "25671:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "25674:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "25680:1:80",
                    "type": ""
                  }
                ],
                "src": "25640:120:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "26000:669:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26010:33:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "26028:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26039:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "26024:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26024:19:80"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "26014:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "26059:9:80"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "26070:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "26052:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26052:25:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "26052:25:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26086:12:80",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "26096:2:80",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "26090:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26118:9:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "26129:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26114:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26114:18:80"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "26134:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "26107:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26107:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "26107:34:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26150:29:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26168:3:80",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26173:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "26164:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26164:11:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26177:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "26160:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26160:19:80"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "26154:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26199:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26210:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26195:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26195:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "26219:6:80"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "26227:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26215:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26215:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "26188:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26188:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "26188:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26251:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26262:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26247:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26247:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26267:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "26240:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26240:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "26240:31:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26280:17:80",
                      "value": {
                        "name": "tail_1",
                        "nodeType": "YulIdentifier",
                        "src": "26291:6:80"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "26284:3:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26306:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "26326:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "26320:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26320:13:80"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "26310:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "26349:6:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "26357:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "26342:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26342:22:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "26342:22:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "26373:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "26384:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26395:3:80",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "26380:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26380:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "26373:3:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26408:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "26426:6:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "26434:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "26422:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26422:15:80"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "26412:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26446:10:80",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "26455:1:80",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "26450:1:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "26514:129:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "26535:3:80"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "26550:6:80"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "26544:5:80"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "26544:13:80"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "26559:2:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "26540:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26540:22:80"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "26528:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "26528:35:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "26528:35:80"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "26576:19:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "26587:3:80"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "26592:2:80"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "26583:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "26583:12:80"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "26576:3:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "26608:25:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "26622:6:80"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "26630:2:80"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "26618:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "26618:15:80"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "26608:6:80"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "26476:1:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "26479:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "26473:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26473:13:80"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "26487:18:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "26489:14:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "26498:1:80"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "26501:1:80",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "26494:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "26494:9:80"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "26489:1:80"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "26469:3:80",
                        "statements": []
                      },
                      "src": "26465:178:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "26652:11:80",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "26660:3:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "26652:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "25945:9:80",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "25956:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "25964:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "25972:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "25980:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "25991:4:80",
                    "type": ""
                  }
                ],
                "src": "25765:904:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "26803:175:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "26813:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "26825:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26836:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "26821:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26821:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "26813:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "26848:29:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26866:3:80",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26871:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "26862:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26862:11:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26875:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "26858:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26858:19:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "26852:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "26893:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "26908:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "26916:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26904:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26904:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "26886:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26886:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "26886:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26940:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26951:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26936:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26936:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "26960:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "26968:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26956:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26956:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "26929:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "26929:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "26929:43:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "26764:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "26775:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "26783:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "26794:4:80",
                    "type": ""
                  }
                ],
                "src": "26674:304:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "27157:228:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27174:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27185:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27167:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27167:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27167:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27208:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27219:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27204:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27204:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27224:2:80",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27197:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27197:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27197:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27247:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27258:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27243:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27243:18:80"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2039",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27263:34:80",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 9"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27236:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27236:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27236:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27318:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27329:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27314:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27314:18:80"
                          },
                          {
                            "hexValue": "362062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27334:8:80",
                            "type": "",
                            "value": "6 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27307:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27307:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27307:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "27352:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27364:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27375:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "27360:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27360:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "27352:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "27134:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "27148:4:80",
                    "type": ""
                  }
                ],
                "src": "26983:402:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "27564:228:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27581:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27592:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27574:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27574:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27574:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27615:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27626:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27611:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27611:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27631:2:80",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27604:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27604:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27604:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27654:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27665:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27650:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27650:18:80"
                          },
                          {
                            "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2033",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27670:34:80",
                            "type": "",
                            "value": "SafeCast: value doesn't fit in 3"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27643:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27643:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27643:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27725:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27736:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27721:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27721:18:80"
                          },
                          {
                            "hexValue": "322062697473",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "27741:8:80",
                            "type": "",
                            "value": "2 bits"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27714:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27714:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27714:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "27759:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "27771:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27782:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "27767:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27767:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "27759:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "27541:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "27555:4:80",
                    "type": ""
                  }
                ],
                "src": "27390:402:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "27829:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27846:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27853:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27858:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "27849:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27849:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27839:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27839:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27839:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27886:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27889:4:80",
                            "type": "",
                            "value": "0x31"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "27879:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27879:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27879:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27910:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27913:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "27903:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "27903:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "27903:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x31",
                "nodeType": "YulFunctionDefinition",
                "src": "27797:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "28114:262:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "28124:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28136:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28147:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "28132:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28132:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "28124:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "28160:29:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28178:3:80",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28183:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "28174:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28174:11:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28187:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "28170:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28170:19:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "28164:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28205:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "28220:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "28228:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28216:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28216:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28198:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28198:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28198:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28252:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28263:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28248:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28248:18:80"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "28268:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28241:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28241:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28241:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28295:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28306:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28291:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28291:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "28315:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "28323:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28311:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28311:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28284:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28284:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28284:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28347:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28358:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28343:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28343:18:80"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "28363:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28336:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28336:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28336:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "28059:9:80",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "28070:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "28078:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "28086:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "28094:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "28105:4:80",
                    "type": ""
                  }
                ],
                "src": "27929:447:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "28538:218:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "28548:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28560:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28571:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "28556:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28556:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "28548:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "28583:29:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28601:3:80",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28606:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "28597:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28597:11:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28610:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "28593:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28593:19:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "28587:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28628:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "28643:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "28651:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28639:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28639:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28621:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28621:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28621:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28675:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28686:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28671:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28671:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "28695:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "28703:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28691:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28691:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28664:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28664:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28664:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28727:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28738:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28723:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28723:18:80"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "28743:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28716:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28716:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28716:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "28491:9:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "28502:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "28510:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "28518:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "28529:4:80",
                    "type": ""
                  }
                ],
                "src": "28381:375:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "28890:145:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "28900:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28912:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28923:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "28908:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28908:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "28900:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "28942:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "28957:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "28973:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "28978:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "28969:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28969:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28982:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "28965:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28965:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28953:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28953:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28935:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28935:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28935:51:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29006:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29017:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29002:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29002:18:80"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "29022:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28995:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28995:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28995:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "28851:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "28862:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "28870:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "28881:4:80",
                    "type": ""
                  }
                ],
                "src": "28761:274:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "29118:199:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "29164:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "29173:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "29176:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "29166:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "29166:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "29166:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "29139:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29148:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "29135:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29135:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29160:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "29131:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29131:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "29128:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "29189:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "29208:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "29202:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29202:16:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "29193:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "29271:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "29280:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "29283:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "29273:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "29273:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "29273:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "29240:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "29261:5:80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "29254:6:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "29254:13:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "29247:6:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29247:21:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "29237:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29237:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "29230:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29230:40:80"
                      },
                      "nodeType": "YulIf",
                      "src": "29227:60:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "29296:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "29306:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "29296:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "29084:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "29095:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "29107:6:80",
                    "type": ""
                  }
                ],
                "src": "29040:277:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "29496:232:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "29513:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29524:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29506:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29506:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29506:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29547:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29558:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29543:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29543:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29563:2:80",
                            "type": "",
                            "value": "42"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29536:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29536:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29536:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29586:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29597:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29582:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29582:18:80"
                          },
                          {
                            "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "29602:34:80",
                            "type": "",
                            "value": "SafeERC20: ERC20 operation did n"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29575:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29575:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29575:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29657:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29668:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29653:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29653:18:80"
                          },
                          {
                            "hexValue": "6f742073756363656564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "29673:12:80",
                            "type": "",
                            "value": "ot succeed"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29646:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29646:40:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29646:40:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "29695:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "29707:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29718:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "29703:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29703:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "29695:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "29473:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "29487:4:80",
                    "type": ""
                  }
                ],
                "src": "29322:406:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "29907:228:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "29924:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29935:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29917:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29917:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29917:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29958:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29969:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29954:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29954:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "29974:2:80",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29947:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29947:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29947:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29997:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30008:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29993:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29993:18:80"
                          },
                          {
                            "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "30013:34:80",
                            "type": "",
                            "value": "Address: insufficient balance fo"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "29986:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "29986:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "29986:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30068:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30079:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30064:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30064:18:80"
                          },
                          {
                            "hexValue": "722063616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "30084:8:80",
                            "type": "",
                            "value": "r call"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30057:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30057:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30057:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "30102:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "30114:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30125:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "30110:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30110:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "30102:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "29884:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "29898:4:80",
                    "type": ""
                  }
                ],
                "src": "29733:402:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "30314:179:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "30331:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30342:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30324:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30324:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30324:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30365:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30376:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30361:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30361:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30381:2:80",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30354:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30354:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30354:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30404:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30415:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30400:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30400:18:80"
                          },
                          {
                            "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "30420:31:80",
                            "type": "",
                            "value": "Address: call to non-contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "30393:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30393:59:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30393:59:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "30461:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "30473:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30484:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "30469:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30469:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "30461:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "30291:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "30305:4:80",
                    "type": ""
                  }
                ],
                "src": "30140:353:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "30551:205:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "30561:10:80",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "30570:1:80",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "30565:1:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "30630:63:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "30655:3:80"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "30660:1:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "30651:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "30651:11:80"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "30674:3:80"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "30679:1:80"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "30670:3:80"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "30670:11:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "30664:5:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "30664:18:80"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "30644:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "30644:39:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "30644:39:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "30591:1:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "30594:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "30588:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30588:13:80"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "30602:19:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "30604:15:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "30613:1:80"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "30616:2:80",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "30609:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "30609:10:80"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "30604:1:80"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "30584:3:80",
                        "statements": []
                      },
                      "src": "30580:113:80"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "30719:31:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "30732:3:80"
                                    },
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "30737:6:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "30728:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "30728:16:80"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "30746:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "30721:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "30721:27:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "30721:27:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "30708:1:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "30711:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "30705:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30705:13:80"
                      },
                      "nodeType": "YulIf",
                      "src": "30702:48:80"
                    }
                  ]
                },
                "name": "copy_memory_to_memory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "30529:3:80",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "30534:3:80",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "30539:6:80",
                    "type": ""
                  }
                ],
                "src": "30498:258:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "30898:137:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "30908:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "30928:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "30922:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30922:13:80"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "30912:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "30970:6:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30978:4:80",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30966:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30966:17:80"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "30985:3:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "30990:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "30944:21:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "30944:53:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "30944:53:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "31006:23:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "31017:3:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "31022:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "31013:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31013:16:80"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "31006:3:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "30874:3:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "30879:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "30890:3:80",
                    "type": ""
                  }
                ],
                "src": "30761:274:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "31161:262:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "31178:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31189:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31171:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31171:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31171:21:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "31201:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "31221:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "31215:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31215:13:80"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "31205:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31248:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31259:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31244:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31244:18:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "31264:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "31237:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31237:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31237:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "31306:6:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31314:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31302:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31302:15:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31323:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31334:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31319:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31319:18:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "31339:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "31280:21:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31280:66:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "31280:66:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "31355:62:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31371:9:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "31390:6:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "31398:2:80",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "31386:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "31386:15:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "31407:2:80",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "31403:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "31403:7:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "31382:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31382:29:80"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31367:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31367:45:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31414:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "31363:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "31363:54:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "31355:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "31130:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "31141:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "31152:4:80",
                    "type": ""
                  }
                ],
                "src": "31040:383:80"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_ApplicationStatus_$12798_t_address__to_t_uint8_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        if iszero(lt(value0, 4))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_uint96_t_uint96_t_uint96__to_t_uint96_t_uint96_t_uint96__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(96, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_uint96(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(96, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint96(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_uint96(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_t_address_payable_t_address__to_t_address_t_address_payable_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(96, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint96(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint96(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address_payablet_addresst_uint96(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        value3 := abi_decode_uint96(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint96(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := abi_decode_uint96(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_enum$_StakeType_$11840(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(lt(value_1, 3)) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_decode_tuple_t_uint96t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint96(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_address_payablet_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := sub(shl(64, 1), 1)\n        if gt(_1, _3) { panic_error_0x41() }\n        let _4 := shl(5, _1)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_4, 63), not(31)))\n        if or(gt(newFreePtr, _3), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, _4), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_uint96t_uint256t_addresst_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_uint96(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value2 := value\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        value3 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint96t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint96(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        value1 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, and(value_1, 0xffffffff))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_struct$_Checkpoint_$10137_memory_ptr__to_t_struct$_Checkpoint_$10137_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(mload(value0), 0xffffffff))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(96, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint96__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(96, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_36f7c7a299c732c4a278528667a5e3d68e0daf6ff361012b2b3d09d09eda408f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Caller is not the governance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f88ee4a5c25b2ddc5ef937b1fdca87bfbc99f1c40b47ddac50291d02e4eb6cf4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Application is not approved\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_05371ca088b53dad455db88a5d048267c12eff6c1f75224fabfb6268020bcff6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Nothing to top-up\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eede2581a01d55d6c31e404df190bb3342df3bac4ab2e3aa5e9e9566374e0e08__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Parameters must be specified\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint96(x, y) -> sum\n    {\n        let _1 := sub(shl(96, 1), 1)\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function abi_encode_tuple_t_stringliteral_58b09ba14e6149ed431ece7849144def4b9835833b611f9801042665308f503f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Caller is not the panic button\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8fb8fb4ba798729ca06c5b0367136529678dab13e471084d38917c2c80cb7c2b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Can't pause application\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a8e481b704819cd88f0f6566f7ee2f0006e52543333300afb51404b8d7d75f30__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Nothing to slash\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_stringliteral_64b0b87da4ad2e7e3100604b4bac4e26ce56c44f7e41d0af41932a2bee35e2af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"There is no discrepancy\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint96(x, y) -> diff\n    {\n        let _1 := sub(shl(96, 1), 1)\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if lt(x_1, y_1) { panic_error_0x11() }\n        diff := sub(x_1, y_1)\n    }\n    function abi_encode_tuple_t_stringliteral_944d02c9873f5b4e40f550ff6a55b5ca56515be020d48f062b4d5b1ac7a9cf3a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Can't disable application\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_db64dd70224c019543d4d9ef245fda7c012ee9e636825aae17375c6af96c3ec7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Not owner or provider\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f9b7bc8e04a7bef6bec8b9d8ce211c79f13b16fd8e577f3f5d176f76c14c521f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Nothing to unstake\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_229e6d41e09584dc8d0a410f121cc8b73769b5a1fb0552b27d056f835451f973__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Keep stake still authorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_58faec4ae87565732d8e09c30f37552291ab01015793882dc39173ef1a8ca4a3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Can't unstake earlier than 24h\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1aa3aaa5e947cd03ebfaac1842896e542f3d0e7160a4b27e0c64026ef6a8b9ab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Provider is already in use\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e7ef8deaaa8398ae3d36a196629e0cddaa901e233927631ebc7505cc72252f1e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Nothing to sync\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payable_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_payable_t_address_t_uint96__to_t_address_t_address_t_uint96__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, sub(shl(96, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_842a76284a753d753eda87e31a39dc8d9f9fc83d2b4f2051ec6d440b08c3490c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Too much to unstake\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3344bafcc6284636168546409df35508f8669a08e1f3b1749102e268af48152f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Amount is less than minimum\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_34e7eba5c773c3fc0fd07c7a1cb12144ea09bc2361c6dcab82c3da05835bce57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Not authorizer\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_29d08fe4f6c0e6490475e4305182f47eaf3b60b9879fa3d62104f0e2eeeb05ee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Amount exceeds authorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint96_t_uint96__to_t_uint96_t_uint96__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(96, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint96_t_uint96__to_t_address_t_uint96_t_uint96__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        let _1 := sub(shl(96, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_e6a4c292a2678b9c898d987106e4b784681d3ef40e71d741a89ab96444ddb55d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Not enough tokens\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_870bce32adff361513d26b76c73c474ec78d084a56337b164759ddd01d38fd2b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"No deauthorizing in process\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint96_t_uint256__to_t_uint96_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(96, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2295370407ca49f4ad1f48c9f9f17142d0c8d46f174a0bbd1344681cb2ee8f79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Nothing was authorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_879d053041a47be76d1d37529ae922a7410cea5ff026d817ac1c0de3d5a8869a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Stake still authorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cbdc49425e2753cc0dee3d656a7e3e1e4f551c10b64891a807a56b3cf8bbf4d8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Application is not disabled\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a265f627c712f4627e87d137d613d70b40af8ec7a7faf93c92c009e4f68673b9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Application is not authorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint96_t_rational_0_by_1__to_t_uint96_t_uint96__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(96, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_4c22ab397bf113c7cf3d5f362fed7bd44c6f0d376a697a1f6314a70b1aadd0c5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Nothing to process\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5c8e504500c894954a29d26b6e73735390f7f46ca10c218e461c4837f181f83c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Can't approve application\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_76d0aee5c952791350eeaf21be9a285bca5b6347ea6cc46bda1ed0dd721fb878__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Too many applications\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2c7450e512904fda8312896c1aa3809963abac7ef887355f02a95ff669ecf9c8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Not enough stake to authorize\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Caller is not owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_83ee8eb1a9e77ac94f36a510fd8a146111d4889defed5bbb86a497f742fd412b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Block not yet determined\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 128)\n        mstore(headStart, value0)\n        let _1 := 32\n        mstore(add(headStart, _1), value1)\n        let _2 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), 128)\n        let pos := tail_1\n        let length := mload(value3)\n        mstore(tail_1, length)\n        pos := add(headStart, 160)\n        let srcPtr := add(value3, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), _2))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 9\")\n        mstore(add(headStart, 96), \"6 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 3\")\n        mstore(add(headStart, 96), \"2 bits\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
          "id": 80,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "12858": [
          {
            "length": 32,
            "start": 2697
          },
          {
            "length": 32,
            "start": 4021
          },
          {
            "length": 32,
            "start": 6928
          },
          {
            "length": 32,
            "start": 7922
          },
          {
            "length": 32,
            "start": 11118
          },
          {
            "length": 32,
            "start": 12399
          },
          {
            "length": 32,
            "start": 13032
          },
          {
            "length": 32,
            "start": 18345
          }
        ],
        "12862": [
          {
            "length": 32,
            "start": 3149
          },
          {
            "length": 32,
            "start": 5340
          },
          {
            "length": 32,
            "start": 5525
          },
          {
            "length": 32,
            "start": 6454
          },
          {
            "length": 32,
            "start": 9216
          },
          {
            "length": 32,
            "start": 15785
          },
          {
            "length": 32,
            "start": 16830
          },
          {
            "length": 32,
            "start": 19112
          }
        ],
        "12866": [
          {
            "length": 32,
            "start": 5153
          },
          {
            "length": 32,
            "start": 11345
          }
        ],
        "12870": [
          {
            "length": 32,
            "start": 10092
          },
          {
            "length": 32,
            "start": 16611
          },
          {
            "length": 32,
            "start": 18694
          }
        ],
        "12873": [
          {
            "length": 32,
            "start": 3316
          },
          {
            "length": 32,
            "start": 15539
          },
          {
            "length": 32,
            "start": 16996
          },
          {
            "length": 32,
            "start": 19258
          }
        ],
        "12876": [
          {
            "length": 32,
            "start": 4113
          },
          {
            "length": 32,
            "start": 6009
          },
          {
            "length": 32,
            "start": 10244
          },
          {
            "length": 32,
            "start": 16779
          },
          {
            "length": 32,
            "start": 18462
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x67E6BB1 EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xFA78BF4 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x16934FC4 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x1D5270D3 EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x28C8C55F EQ PUSH2 0x39B JUMPI DUP1 PUSH4 0x2C686CA0 EQ PUSH2 0x3AE JUMPI DUP1 PUSH4 0x2CD62915 EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x2DE94807 EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x32719E06 EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x402121AF EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0x43445748 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x44E97423 EQ PUSH2 0x4B0 JUMPI DUP1 PUSH4 0x483046BB EQ PUSH2 0x4B9 JUMPI DUP1 PUSH4 0x4A11FAE3 EQ PUSH2 0x4CC JUMPI DUP1 PUSH4 0x4EC0A9FE EQ PUSH2 0x4DF JUMPI DUP1 PUSH4 0x56F958EE EQ PUSH2 0x4F2 JUMPI DUP1 PUSH4 0x570EA461 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x58CCDF38 EQ PUSH2 0x538 JUMPI DUP1 PUSH4 0x5961D5E9 EQ PUSH2 0x54B JUMPI DUP1 PUSH4 0x5AA6E675 EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0x5F2D5030 EQ PUSH2 0x571 JUMPI DUP1 PUSH4 0x6D08F5B0 EQ PUSH2 0x584 JUMPI DUP1 PUSH4 0x6D9B9A34 EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0x6DA91D8B EQ PUSH2 0x5AA JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x5BD JUMPI DUP1 PUSH4 0x7368DBA2 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0x75E0AE5A EQ PUSH2 0x5EE JUMPI DUP1 PUSH4 0x793C1365 EQ PUSH2 0x601 JUMPI DUP1 PUSH4 0x7D0379F0 EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x61D JUMPI DUP1 PUSH4 0x81B0A0CE EQ PUSH2 0x625 JUMPI DUP1 PUSH4 0x83DDBA8F EQ PUSH2 0x638 JUMPI DUP1 PUSH4 0x86D18A25 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0x8B7ADC09 EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x8E46ECB6 EQ PUSH2 0x671 JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x684 JUMPI DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x697 JUMPI DUP1 PUSH4 0xA0D6FF9A EQ PUSH2 0x6AA JUMPI DUP1 PUSH4 0xA7BB8BA8 EQ PUSH2 0x6BD JUMPI DUP1 PUSH4 0xAD30E4CD EQ PUSH2 0x6C6 JUMPI DUP1 PUSH4 0xAF5F24AD EQ PUSH2 0x6CE JUMPI DUP1 PUSH4 0xB1958150 EQ PUSH2 0x6E1 JUMPI DUP1 PUSH4 0xB626CA3E EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0xBE2F3351 EQ PUSH2 0x707 JUMPI DUP1 PUSH4 0xD38BFFF4 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0xD3E25EF3 EQ PUSH2 0x72D JUMPI DUP1 PUSH4 0xD3ECB6CD EQ PUSH2 0x740 JUMPI DUP1 PUSH4 0xDFEFADFF EQ PUSH2 0x753 JUMPI DUP1 PUSH4 0xE009245A EQ PUSH2 0x766 JUMPI DUP1 PUSH4 0xE3AE4D0A EQ PUSH2 0x7AC JUMPI DUP1 PUSH4 0xEAA86492 EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xEF47BF40 EQ PUSH2 0x7D2 JUMPI DUP1 PUSH4 0xF07F91C5 EQ PUSH2 0x7E5 JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x7F8 JUMPI DUP1 PUSH4 0xF1F6C315 EQ PUSH2 0x835 JUMPI DUP1 PUSH4 0xF6E0FAEB EQ PUSH2 0x856 JUMPI DUP1 PUSH4 0xF848BEFF EQ PUSH2 0x882 JUMPI DUP1 PUSH4 0xFFD2F984 EQ PUSH2 0x895 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EC PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0x532C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x316 PUSH2 0x311 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35E PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP2 DUP3 AND SWAP4 SWAP3 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x316 PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x8AB JUMP JUMPDEST PUSH2 0x316 PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x982 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x3BC CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xABF JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x34 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x426 PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP2 DUP3 SWAP1 DIV DUP5 AND SWAP5 SWAP3 DUP3 SWAP1 DIV DUP5 AND SWAP4 SWAP2 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x46A SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH2 0x46A PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FF JUMP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x316 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x36 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x4C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x542B JUMP JUMPDEST PUSH2 0xF27 JUMP JUMPDEST PUSH2 0x3CA PUSH2 0x4DA CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x103C JUMP JUMPDEST PUSH2 0x316 PUSH2 0x500 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x1207 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x513 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x135A JUMP JUMPDEST PUSH2 0x52B PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x5446 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x546 CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x16D9 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x559 CALLDATASIZE PUSH1 0x4 PUSH2 0x545A JUMP JUMPDEST PUSH2 0x18BC JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x52B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x57F CALLDATASIZE PUSH1 0x4 PUSH2 0x54B4 JUMP JUMPDEST PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x592 CALLDATASIZE PUSH1 0x4 PUSH2 0x542B JUMP JUMPDEST PUSH2 0x1D8D JUMP JUMPDEST PUSH2 0x316 PUSH2 0x5A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x1E12 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x5B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x54FB JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x5D0 PUSH2 0x5CB CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x2091 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x38 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x5FC CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x37 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x618 CALLDATASIZE PUSH1 0x4 PUSH2 0x552D JUMP JUMPDEST PUSH2 0x2236 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x22C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x633 CALLDATASIZE PUSH1 0x4 PUSH2 0x5549 JUMP JUMPDEST PUSH2 0x2386 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x646 CALLDATASIZE PUSH1 0x4 PUSH2 0x5640 JUMP JUMPDEST PUSH2 0x258E JUMP JUMPDEST PUSH2 0x316 PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x259A JUMP JUMPDEST PUSH2 0x46A PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x2691 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x2711 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x692 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x46A PUSH2 0x6A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x290B JUMP JUMPDEST PUSH2 0x316 PUSH2 0x6B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x299C JUMP JUMPDEST PUSH2 0x3CA PUSH1 0x3D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3B SLOAD PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x316 PUSH2 0x6DC CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x2BA7 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x6EF CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x2D44 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x702 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH2 0x2DA3 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x715 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x2EF1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x728 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x3096 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x73B CALLDATASIZE PUSH1 0x4 PUSH2 0x542B JUMP JUMPDEST PUSH2 0x30C9 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x74E CALLDATASIZE PUSH1 0x4 PUSH2 0x53B6 JUMP JUMPDEST PUSH2 0x3130 JUMP JUMPDEST PUSH2 0x52B PUSH2 0x761 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x3321 JUMP JUMPDEST PUSH2 0x46A PUSH2 0x774 CALLDATASIZE PUSH1 0x4 PUSH2 0x5366 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x7BA CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x334B JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0x46A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x7E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH2 0x34AF JUMP JUMPDEST PUSH2 0x316 PUSH2 0x7F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x56C2 JUMP JUMPDEST PUSH2 0x35F8 JUMP JUMPDEST PUSH2 0x80B PUSH2 0x806 CALLDATASIZE PUSH1 0x4 PUSH2 0x570F JUMP JUMPDEST PUSH2 0x3605 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x848 PUSH2 0x843 CALLDATASIZE PUSH1 0x4 PUSH2 0x56A9 JUMP JUMPDEST PUSH2 0x36B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0x5746 JUMP JUMPDEST PUSH2 0x3CA PUSH2 0x864 CALLDATASIZE PUSH1 0x4 PUSH2 0x52F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x890 CALLDATASIZE PUSH1 0x4 PUSH2 0x54B4 JUMP JUMPDEST PUSH2 0x36EC JUMP JUMPDEST PUSH1 0x3C SLOAD PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x8A7 DUP3 DUP3 PUSH2 0x39DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x90E JUMPI PUSH2 0x90E PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x92B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH2 0x100 DUP2 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0x5A38EBC6EF9570E77E12B2162C48413D53357005ADD9BE886AB130A58D44FEB8 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH2 0x9C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57D3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0x9E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0xA1F SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x584A JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D59 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH2 0xA6A SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xA7C DUP4 DUP4 PUSH2 0x3AF8 JUMP JUMPDEST PUSH2 0xABA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP7 AND PUSH2 0x3B04 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0xB30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74207468652070616E696320627574746F6E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xB60 JUMPI PUSH2 0xB60 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0xBA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x21B0B713BA103830BAB9B29030B8383634B1B0BA34B7B7 PUSH1 0x49 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x2 SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CD9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0xBFD SWAP1 DUP4 PUSH2 0x3B10 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0xC48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5875 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAB46D66 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC97 SWAP2 SWAP1 PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE7 SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST SWAP3 POP POP SWAP2 POP PUSH1 0x0 PUSH2 0xD18 DUP4 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP PUSH1 0x1 DUP6 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND DUP2 GT DUP1 PUSH2 0xD3B JUMPI POP DUP3 ISZERO ISZERO JUMPDEST PUSH2 0xD57 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x58CD JUMP JUMPDEST PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x35 SLOAD PUSH1 0x36 SLOAD PUSH2 0xD8F SWAP3 DUP9 SWAP3 DUP11 SWAP3 SWAP2 AND SWAP1 PUSH2 0x3C5C JUMP JUMPDEST POP PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0xDAB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 ISZERO ISZERO DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CF9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH2 0xDD8 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP4 ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x1 DUP7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD PUSH2 0xE1C SWAP1 DUP9 SWAP1 PUSH2 0xE17 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x58FE JUMP JUMPDEST PUSH2 0x3E25 JUMP JUMPDEST PUSH2 0xE27 DUP8 DUP8 DUP4 PUSH2 0x3E31 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xE8A JUMPI PUSH2 0xE8A PUSH2 0x5316 JUMP JUMPDEST EQ DUP1 PUSH2 0xEAB JUMPI POP PUSH1 0x2 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xEA9 JUMPI PUSH2 0xEA9 PUSH2 0x5316 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xEF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x21B0B713BA103234B9B0B136329030B8383634B1B0BA34B7B7 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x3 SWAP1 DUP2 OR DUP3 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CD9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0xF50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF6B SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x9DE5348508C6AD1F6FF7FCFB84E126BB094784E85BF83F7E3801BC44F9C6DC97 SWAP1 PUSH2 0xFA0 SWAP1 DUP4 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xFE6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP6 AND PUSH2 0x3B04 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1035 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x10A1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x10A1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x10BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 PUSH2 0x1125 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F7468696E6720746F20756E7374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH2 0x1130 DUP5 PUSH1 0x1 PUSH2 0x1F22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO PUSH2 0x1184 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x12D9595C081CDD185AD9481CDD1A5B1B08185D5D1A1BDC9A5E9959 PUSH1 0x2A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP4 PUSH1 0x5 ADD SLOAD PUSH2 0x1198 SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x11DD SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x1201 DUP5 DUP3 PUSH2 0x3E25 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x126C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x126C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x1288 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 PUSH2 0x12B7 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND DUP6 PUSH2 0x40DE JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND GT PUSH2 0x12E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57D3 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x12FF SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D59 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x1328 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND OR DUP4 SSTORE PUSH2 0x1353 DUP6 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1380 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO PUSH2 0x13C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13CE DUP4 PUSH2 0x41B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND PUSH2 0x13F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59D8 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0xF9934B PUSH1 0xE1 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1F32696 SWAP1 PUSH2 0x145E SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x148A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AE SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND MUL OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH4 0xFB1677B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xFB1677B1 SWAP1 PUSH2 0x1513 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x152B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x153F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1563 SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST PUSH1 0x2 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND MUL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xBA7BFFD3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xBA7BFFD3 SWAP1 PUSH2 0x15CC SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x161C SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE TIMESTAMP PUSH1 0x5 DUP4 ADD SSTORE PUSH2 0x1655 DUP4 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH1 0x1 DUP1 DUP6 ADD SLOAD PUSH1 0x2 DUP7 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x16AE SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x60 SHL SWAP3 DUP4 SWAP1 DIV DUP2 AND SWAP4 SWAP3 SWAP1 SWAP2 DIV AND SWAP1 DUP9 SWAP1 PUSH2 0x5A1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x173E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x173E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x175A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x179D DUP5 PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST SWAP2 POP PUSH2 0x17AB SWAP1 POP DUP2 DUP6 PUSH2 0x58FE JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x17ED JUMPI POP DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x17D7 DUP7 PUSH1 0x0 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x17E1 SWAP1 DUP7 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO JUMPDEST PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A4A JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP4 PUSH1 0x5 ADD SLOAD PUSH2 0x181D SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x183B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST DUP2 SLOAD DUP5 SWAP1 DUP4 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1858 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x1886 DUP6 DUP6 PUSH2 0x3E25 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 PUSH1 0x40 MLOAD PUSH2 0x18AD SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x18DC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x18F0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0x190C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH4 0x7D5A36B3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 PUSH32 0x0 AND SWAP1 PUSH4 0xFAB46D66 SWAP1 PUSH2 0x196B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1997 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19BB SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST POP SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x19DC JUMPI POP DUP2 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST PUSH2 0x19F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59A4 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1A27 JUMPI POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV DUP2 AND SWAP1 DUP5 AND LT ISZERO JUMPDEST PUSH2 0x1A71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x416D6F756E74206973206C657373207468616E206D696E696D756D PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x60 SHL CALLER DUP2 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND OR DUP5 SSTORE PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP5 MUL SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP2 DUP6 AND SWAP2 DUP7 AND MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND OR PUSH1 0x2 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x5 DUP4 ADD SSTORE PUSH2 0x1ACD DUP7 DUP5 PUSH2 0x3AF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLER PUSH1 0x2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1AFB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1B41 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP8 AND PUSH2 0x3B04 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP5 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x1B8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1BBF JUMPI PUSH2 0x1BBF PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x1BDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0x1C05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP7 AND SWAP2 AND LT ISZERO PUSH2 0x1C87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x105B5BDD5B9D08195E18D959591CC8185D5D1A1BDC9A5E9959 PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP7 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x0 SWAP3 PUSH2 0x1CBF SWAP3 DUP9 SWAP3 DUP2 AND SWAP2 AND OR PUSH2 0x58FE JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP3 SWAP1 DUP11 AND SWAP2 PUSH32 0x132E76775C4E3B4B2C36FE4ACC18D539B6C34B984AC6BA494A5996C48D8A0174 SWAP2 PUSH2 0x1D0E SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6A7F7A9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0x6A7F7A90 SWAP2 PUSH2 0x1D52 SWAP2 DUP12 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND MUL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x91D1E8918C0EC490B6ECCD803DB78273458F0A7D4B3915E062F1402E9521F518 SWAP1 PUSH2 0x1E07 SWAP1 DUP4 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1E3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x37 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO PUSH2 0x1E8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x4E6F7420656E6F75676820746F6B656E73 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1EA6 SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0x7083CB4F4C81BB6D7425A5BDE6B6969CD8C446730ED572607EF79246BC44EE42 SWAP1 PUSH2 0x1EDD SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH2 0x5746 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x8A7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP1 JUMPDEST PUSH1 0x4 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x1FB4 JUMPI PUSH1 0x0 DUP4 PUSH1 0x4 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1F60 JUMPI PUSH2 0x1F60 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x1F9E SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x429C JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x1FAC SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F3D JUMP JUMPDEST POP DUP1 PUSH2 0x1FC5 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x2 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1FD9 JUMPI PUSH2 0x1FD9 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x2004 JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x1FF7 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x42B3 JUMP JUMPDEST PUSH2 0x2001 SWAP1 DUP3 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2018 JUMPI PUSH2 0x2018 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x2040 JUMPI DUP2 SLOAD PUSH2 0x2033 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x42B3 JUMP JUMPDEST PUSH2 0x203D SWAP1 DUP3 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2054 JUMPI PUSH2 0x2054 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x207F JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x2072 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x42B3 JUMP JUMPDEST PUSH2 0x207C SWAP1 DUP3 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x2088 DUP2 PUSH2 0x42C2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xC00 SWAP1 PUSH2 0x432E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x20DA JUMPI PUSH2 0x20DA PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x20F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x3 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x217B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x4E6F206465617574686F72697A696E6720696E2070726F63657373 PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND DUP3 PUSH1 0x0 PUSH2 0x219E DUP4 DUP6 PUSH2 0x58FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE DUP4 SLOAD PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP2 AND DUP6 SSTORE PUSH1 0x40 MLOAD CALLER SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D19 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0x2201 SWAP3 DUP8 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2223 JUMPI PUSH2 0x2223 DUP4 PUSH1 0x1 PUSH2 0x4393 JUMP JUMPDEST POP SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2260 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x35 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x36 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x3F84F36F8E044BBBC00D303AE27C8871614781AC684742A3D8DB7EB2EB98785F SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22DC JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x22E4 JUMP JUMPDEST PUSH2 0x22E4 PUSH2 0x451A JUMP JUMPDEST PUSH2 0x2347 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x2369 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH2 0x2372 CALLER PUSH2 0x452B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x23A6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x23BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO ISZERO JUMPDEST PUSH2 0x23D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH4 0x7D5A36B3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 PUSH32 0x0 AND SWAP1 PUSH4 0xFAB46D66 SWAP1 PUSH2 0x2435 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x244D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2461 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2485 SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST POP SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x24A6 JUMPI POP DUP2 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST PUSH2 0x24C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59A4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24CE CALLER DUP8 PUSH2 0x40DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0x24F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x59D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL CALLER DUP2 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP5 AND SWAP2 SWAP1 SWAP2 OR DUP6 SSTORE PUSH1 0x2 DUP6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND DUP6 MUL SWAP2 DUP5 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP7 ADD DUP1 SLOAD SWAP2 DUP10 AND SWAP1 SWAP4 MUL SWAP2 AND OR SWAP1 SSTORE TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH2 0x2550 DUP7 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLER PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP9 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH2 0x257E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1201 DUP5 DUP5 DUP5 DUP5 PUSH2 0x457E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP1 JUMPDEST PUSH1 0x4 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x263E JUMPI PUSH1 0x0 DUP4 PUSH1 0x4 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x25D8 JUMPI PUSH2 0x25D8 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP8 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 ISZERO PUSH2 0x2629 JUMPI PUSH2 0x261C DUP7 DUP4 DUP4 PUSH2 0x1B49 JUMP JUMPDEST PUSH2 0x2626 DUP2 DUP6 PUSH2 0x584A JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x2636 SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25B5 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x139BDD1A1A5B99C81DD85CC8185D5D1A1BDC9A5E9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH2 0x26CE SWAP3 DUP2 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x26D8 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x2709 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x58FE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2750 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5875 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBC5B6F3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 PUSH4 0x178B6DE6 SWAP3 PUSH2 0x27AA SWAP3 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27FA SWAP2 SWAP1 PUSH2 0x5B2B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2828 DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND DUP2 GT PUSH2 0x285A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x58CD JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR DUP6 SSTORE PUSH1 0x35 SLOAD PUSH1 0x36 SLOAD PUSH2 0x288A SWAP3 DUP8 SWAP3 AND SWAP1 PUSH2 0x47D0 JUMP JUMPDEST POP DUP4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x28A3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 ISZERO ISZERO DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CF9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH2 0x28D0 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x28E3 DUP7 DUP7 DUP4 PUSH2 0x3E31 JUMP JUMPDEST DUP5 SLOAD PUSH2 0x1B41 SWAP1 DUP8 SWAP1 PUSH2 0xE17 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC00 PUSH1 0x3 DUP4 PUSH2 0x3B10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2992 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x298D SWAP1 PUSH2 0x2951 PUSH1 0x1 DUP5 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x2961 JUMPI PUSH2 0x2961 PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x10 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2995 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2A01 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x2A01 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x2A1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD ISZERO PUSH2 0x2A80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14DD185AD9481CDD1A5B1B08185D5D1A1BDC9A5E9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x2A94 SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x2AB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x2ADB SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x2AE5 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x2B0E SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP1 SWAP3 SSTORE PUSH1 0x1 DUP5 ADD DUP1 SLOAD DUP4 AND SWAP1 SSTORE DUP4 SLOAD SWAP1 SWAP2 AND DUP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2B4F DUP6 DUP4 PUSH2 0x3E25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND ISZERO PUSH2 0x1353 JUMPI DUP3 SLOAD PUSH2 0x1353 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2C0C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x2C0C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x2C28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH3 0xF9934B PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 PUSH32 0x0 AND SWAP1 PUSH4 0x1F32696 SWAP1 PUSH2 0x2C86 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CD6 SWAP2 SWAP1 PUSH2 0x5A01 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP3 DIV DUP2 AND SWAP2 SWAP1 DUP8 AND SWAP1 PUSH32 0xDA8908EA0ECABDA6B6DEC96ED40B9C47FFBF9BE10F30912965C984FACE902E14 SWAP1 PUSH1 0x0 SWAP1 LOG4 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2D6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x34 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xF82F602E8097A5C312216F60CA94CD1FF03AAC29893F9ADEF7ED7E6AE33C76E2 SWAP1 PUSH1 0x20 ADD PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2DD2 JUMPI PUSH2 0x2DD2 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x2E1D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x105C1C1B1A58D85D1A5BDB881A5CC81B9BDD08191A5CD8589B1959 PUSH1 0x2A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE PUSH1 0x3 DUP5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 PUSH2 0x2E9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4170706C69636174696F6E206973206E6F7420617574686F72697A6564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND DUP3 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP2 SWAP1 DUP8 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D19 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x2EDE SWAP1 DUP6 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1353 DUP4 PUSH1 0x1 PUSH2 0x4393 JUMP JUMPDEST PUSH1 0x3C SLOAD PUSH1 0x3D SLOAD LT DUP1 ISZERO PUSH2 0x2F04 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x2F45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4E6F7468696E6720746F2070726F63657373 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3D SLOAD PUSH2 0x2F55 SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F66 DUP2 PUSH1 0x3C DUP1 SLOAD SWAP1 POP PUSH2 0x42B3 JUMP JUMPDEST SWAP1 POP PUSH1 0x3D SLOAD DUP2 PUSH2 0x2F76 SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST PUSH1 0x3D SLOAD SWAP1 SWAP3 POP PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2FD2 JUMPI PUSH1 0x0 PUSH1 0x3C DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2F9D JUMPI PUSH2 0x2F9D PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP PUSH2 0x2FB2 DUP2 PUSH2 0x496E JUMP JUMPDEST PUSH2 0x2FBC SWAP1 DUP5 PUSH2 0x584A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x2FCA SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2F80 JUMP JUMPDEST PUSH1 0x3D DUP2 SWAP1 SSTORE PUSH1 0x0 PUSH2 0x2FED PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND PUSH1 0x5 PUSH2 0x4C9C JUMP JUMPDEST SWAP1 POP PUSH2 0x2FF8 DUP2 PUSH2 0x42C2 JUMP JUMPDEST PUSH2 0x3002 SWAP1 DUP5 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x301C SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x8EFE68D059265C97157A10A6AADC9AFE80DFA0E96FC959C4DE863300E244E156 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 ISZERO PUSH2 0x1353 JUMPI PUSH2 0x1353 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER DUP4 PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x30C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH2 0xFE6 DUP2 PUSH2 0x452B JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x30F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND PUSH1 0x38 SSTORE PUSH1 0x40 MLOAD PUSH32 0xD579C7B509B9A61B7408309A980BCFCBBF0F336F1B2BB0A760D71F72F0CF3132 SWAP1 PUSH2 0x1E07 SWAP1 DUP4 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3195 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x3195 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x31B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x320D JUMPI POP PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH2 0x31F7 SWAP1 DUP7 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x3201 SWAP1 DUP6 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT ISZERO JUMPDEST PUSH2 0x3229 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A4A JUMP JUMPDEST TIMESTAMP PUSH3 0x15180 DUP3 PUSH1 0x5 ADD SLOAD PUSH2 0x323D SWAP2 SWAP1 PUSH2 0x5926 JUMP JUMPDEST GT ISZERO PUSH2 0x325B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x596D JUMP JUMPDEST PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x327B SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x32A9 DUP5 DUP5 PUSH2 0x3E25 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D39 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x32D0 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 SLOAD PUSH2 0x1201 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP7 AND PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x3B DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3375 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5768 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x339B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x33CA JUMPI PUSH2 0x33CA PUSH2 0x5316 JUMP JUMPDEST EQ DUP1 PUSH2 0x33EB JUMPI POP PUSH1 0x2 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x33E9 JUMPI PUSH2 0x33E9 PUSH2 0x5316 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x3433 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x21B0B713BA1030B8383937BB329030B8383634B1B0BA34B7B7 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x344B JUMPI PUSH2 0x344B PUSH2 0x5316 JUMP JUMPDEST EQ ISZERO PUSH2 0x349D JUMPI PUSH1 0x3B DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xBBE3212124853F8B0084A66A2D057C2966E251E132AF3691DB153AB65F0D1A4D ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR DUP3 SSTORE PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3514 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ DUP1 PUSH2 0x3514 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV AND CALLER EQ JUMPDEST PUSH2 0x3530 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x593E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x3552 DUP5 PUSH2 0x41B9 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP3 AND GT PUSH2 0x3585 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57D3 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x35A0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x58FE JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D59 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH1 0x40 MLOAD PUSH2 0x35C9 SWAP2 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH2 0x1353 DUP6 DUP3 PUSH2 0x3AF8 JUMP JUMPDEST PUSH2 0x8A7 DUP3 PUSH1 0x0 DUP1 DUP5 PUSH2 0x457E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP3 SWAP2 PUSH2 0x3686 SWAP2 PUSH4 0xFFFFFFFF DUP8 AND SWAP1 DUP2 LT PUSH2 0x364F JUMPI PUSH2 0x364F PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x10 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH4 0xFFFFFFFF PUSH1 0x60 DUP3 SWAP1 SHR AND SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3C DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x36C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 POP PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP5 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x3732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x5A77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3762 JUMPI PUSH2 0x3762 PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x377F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x3 DUP5 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP1 PUSH2 0x3842 JUMPI PUSH1 0x34 SLOAD ISZERO DUP1 PUSH2 0x37CD JUMPI POP PUSH1 0x34 SLOAD PUSH1 0x4 DUP5 ADD SLOAD LT JUMPDEST PUSH2 0x3811 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x546F6F206D616E79206170706C69636174696F6E73 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x4 DUP4 ADD DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x384E DUP10 DUP10 PUSH2 0x2691 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND LT ISZERO PUSH2 0x38B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768207374616B6520746F20617574686F72697A65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP3 SLOAD DUP8 SWAP1 DUP5 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x38CF SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x584A JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x87F9F9F59204F53D57A89A817C6083A17979CD0531791C91E18551A56E3CFDD7 DUP5 DUP7 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 MLOAD PUSH2 0x394F SWAP3 SWAP2 SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP3 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC9BACAAD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP2 PUSH4 0xC9BACAAD SWAP2 PUSH2 0x3991 SWAP2 DUP14 SWAP2 DUP8 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x39AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 0x3A47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x21B0B63632B91034B9903737BA1037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x3A70 SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x3A7A SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3A87 DUP6 PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP11 DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP5 SWAP6 POP SWAP4 SWAP3 DUP6 AND SWAP3 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0x1353 DUP2 DUP6 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4CB4 JUMP JUMPDEST PUSH2 0x8A7 DUP3 DUP3 PUSH1 0x1 PUSH2 0x4DBE JUMP JUMPDEST PUSH2 0x1201 DUP5 DUP5 DUP5 DUP5 PUSH2 0x4E98 JUMP JUMPDEST PUSH1 0x0 NUMBER DUP3 LT PUSH2 0x3B5C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x109B1BD8DAC81B9BDD081E595D0819195D195C9B5A5B9959 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3BE5 JUMPI PUSH1 0x0 PUSH2 0x3B75 DUP3 DUP5 PUSH2 0x4F03 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3BB8 DUP8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3B8E JUMPI PUSH2 0x3B8E PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 DUP3 DIV ADD SLOAD PUSH4 0xFFFFFFFF PUSH1 0x1 SWAP1 SWAP3 AND PUSH1 0x10 MUL PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x60 SHR AND SWAP1 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x3BD0 JUMPI DUP2 SWAP4 POP PUSH2 0x3BDE JUMP JUMPDEST PUSH2 0x3BDB DUP3 PUSH1 0x1 PUSH2 0x5926 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP PUSH2 0x3B61 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x3BFF JUMPI PUSH2 0x3BFA DUP6 PUSH2 0x2951 PUSH1 0x1 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x2088 JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C1E PUSH7 0x38D7EA4C68000 DUP6 PUSH2 0x5B5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3C2C DUP3 DUP7 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP PUSH2 0x3C52 PUSH7 0x38D7EA4C68000 PUSH2 0x3C43 DUP7 DUP5 PUSH2 0x5B6E JUMP JUMPDEST PUSH2 0x3C4D SWAP2 SWAP1 PUSH2 0x5B8D JUMP JUMPDEST PUSH2 0x42C2 JUMP JUMPDEST SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x3C78 JUMPI POP DUP2 PUSH2 0x2709 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND GT PUSH2 0x3C9A JUMPI POP DUP3 PUSH2 0x3CAA JUMP JUMPDEST POP PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3CD7 DUP4 PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x3CEF JUMPI DUP6 SWAP4 POP POP POP POP PUSH2 0x2709 JUMP JUMPDEST PUSH2 0x3CF9 DUP2 DUP5 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x1 DUP10 ADD DUP1 SLOAD SWAP2 SWAP5 POP DUP5 SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x3D1B SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP3 DUP7 PUSH2 0x3D4B SWAP2 SWAP1 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP8 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP8 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3D85 JUMPI PUSH2 0x3D85 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH3 0x9055E9 PUSH1 0xE4 SHL DUP2 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x9055E90 SWAP1 PUSH2 0x3DE6 SWAP1 DUP7 SWAP1 DUP11 SWAP1 CALLER SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5BA1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP9 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8A7 DUP3 DUP3 PUSH1 0x0 PUSH2 0x4DBE JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x3E5A SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x3E64 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x4 DUP6 ADD SLOAD DUP2 LT ISZERO PUSH2 0x407F JUMPI PUSH1 0x0 DUP6 PUSH1 0x4 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3E8D JUMPI PUSH2 0x3E8D PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP10 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH2 0x3ED6 SWAP1 PUSH2 0x3C4D SWAP1 DUP4 SWAP1 DUP11 AND PUSH2 0x42B3 JUMP JUMPDEST DUP3 SLOAD DUP4 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x3EF1 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE DUP4 SLOAD DUP9 DUP3 AND SWAP2 AND GT ISZERO SWAP1 POP PUSH2 0x3F3A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP8 AND OR DUP3 SSTORE JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x52A151D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH4 0x14A85474 SWAP2 PUSH3 0x3D090 SWAP2 PUSH2 0x3F7C SWAP2 DUP16 SWAP2 DUP9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3FA8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3FB0 JUMPI POP PUSH1 0x0 JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP3 DIV AND GT ISZERO PUSH2 0x3FF1 JUMPI DUP3 SLOAD PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND MUL PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP2 AND OR DUP4 SSTORE JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD DUP3 ISZERO ISZERO SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP3 SWAP1 DUP15 AND SWAP2 PUSH32 0xF0171FFFAA54732B1F79A3164B315658061A1A51BF8C1010FBED908A8E333F9 SWAP2 PUSH2 0x4043 SWAP2 DUP9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH2 0x5A9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4068 JUMPI DUP6 PUSH2 0x4064 DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP7 POP POP JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x4077 SWAP1 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3E6A JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x1353 JUMPI PUSH2 0x1353 DUP5 DUP3 PUSH2 0x4393 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40A9 PUSH2 0x3C4D DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP8 AND PUSH2 0x5B5A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x40B7 DUP3 DUP7 PUSH2 0x58FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP DUP4 PUSH2 0x40D4 PUSH7 0x38D7EA4C68000 DUP4 PUSH2 0x5B6E JUMP JUMPDEST PUSH2 0x3C52 SWAP2 SWAP1 PUSH2 0x5B8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3223FF4B DUP6 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x412F SWAP3 SWAP2 SWAP1 PUSH2 0x5C0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x415D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4181 SWAP2 SWAP1 PUSH2 0x5B2B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x41AF DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAFFF33EF DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x420A SWAP3 SWAP2 SWAP1 PUSH2 0x5C0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4236 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x425A SWAP2 SWAP1 PUSH2 0x5B2B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4288 DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xABA DUP4 DUP4 DUP4 PUSH2 0x4F1E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x42AC JUMPI DUP2 PUSH2 0xBFD JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x42AC JUMPI DUP2 PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 GT ISZERO PUSH2 0x432A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2039 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x362062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x432A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD DUP2 DUP2 EQ ISZERO PUSH2 0x43AE JUMPI PUSH2 0xABA PUSH1 0x4 DUP5 ADD PUSH1 0x0 PUSH2 0x52A6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x43BC DUP6 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP3 LT DUP1 ISZERO PUSH2 0x43CD JUMPI POP DUP5 DUP4 LT JUMPDEST ISZERO PUSH2 0x44C7 JUMPI PUSH1 0x0 DUP7 PUSH1 0x4 ADD DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x43E9 JUMPI PUSH2 0x43E9 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 DUP11 ADD SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x44B3 JUMPI PUSH1 0x4 DUP8 ADD PUSH1 0x1 PUSH2 0x4430 DUP7 DUP9 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x443A SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x444A JUMPI PUSH2 0x444A PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x4 DUP9 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP6 SWAP1 DUP2 LT PUSH2 0x4478 JUMPI PUSH2 0x4478 PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP4 PUSH2 0x44AB DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x44C1 JUMP JUMPDEST DUP3 PUSH2 0x44BD DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP PUSH2 0x43BF JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH2 0x1B41 JUMPI DUP6 PUSH1 0x4 ADD DUP1 SLOAD DUP1 PUSH2 0x44E6 JUMPI PUSH2 0x44E6 PUSH2 0x5C25 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE DUP2 PUSH2 0x4512 DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x44CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4525 ADDRESS PUSH2 0x39CE JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH32 0x5F56BEE8CFFBE9A78652A74A60705EDEDE02AF10B0BBB888CA44B79A0D42CE80 SWAP1 PUSH2 0x22B5 SWAP1 DUP4 SWAP1 DUP6 SWAP1 PUSH2 0x5C0B JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x4598 JUMPI POP PUSH1 0x0 DUP2 MLOAD GT JUMPDEST PUSH2 0x45B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x57FE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x45DB JUMPI PUSH2 0x45DB PUSH2 0x5316 JUMP JUMPDEST EQ PUSH2 0x45F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x579E JUMP JUMPDEST PUSH1 0x3C SLOAD PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x46F1 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x461B JUMPI PUSH2 0x461B PUSH2 0x5AFA JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 CALLER DUP4 MSTORE PUSH1 0x3 ADD SWAP1 SWAP4 MSTORE SWAP2 DUP3 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x4666 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP12 AND PUSH2 0x42B3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4674 JUMPI POP POP PUSH2 0x46DF JUMP JUMPDEST PUSH1 0x3C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4699 DUP5 PUSH2 0x42C2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE POP POP JUMPDEST DUP1 PUSH2 0x46E9 DUP2 PUSH2 0x5B10 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x45FE JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1B41 JUMPI PUSH1 0x0 PUSH2 0x472B DUP7 PUSH1 0x38 SLOAD DUP5 PUSH1 0x3C DUP1 SLOAD SWAP1 POP PUSH2 0x471B SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x4725 SWAP2 SWAP1 PUSH2 0x5B6E JUMP JUMPDEST SWAP1 PUSH2 0x4C9C JUMP JUMPDEST SWAP1 POP PUSH2 0x4739 DUP2 PUSH1 0x37 SLOAD PUSH2 0x42B3 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x104879B09C38B3B66D79CE8F4CBDCFBE117B79797DB65A37EF151D22B5E31471 DUP3 PUSH1 0x40 MLOAD PUSH2 0x4776 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 ISZERO PUSH2 0xE27 JUMPI DUP1 PUSH1 0x37 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4796 SWAP2 SWAP1 PUSH2 0x5AE3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xE27 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP7 DUP4 PUSH2 0x4291 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x47E9 JUMPI POP DUP2 PUSH2 0x2995 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND GT PUSH2 0x4808 JUMPI POP DUP3 PUSH2 0x4815 JUMP JUMPDEST POP DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4842 DUP4 PUSH32 0x0 PUSH2 0x4090 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x485A JUMPI DUP6 SWAP4 POP POP POP POP PUSH2 0x2995 JUMP JUMPDEST PUSH2 0x4864 DUP2 DUP5 PUSH2 0x58FE JUMP JUMPDEST DUP8 SLOAD SWAP1 SWAP4 POP DUP4 SWAP1 DUP9 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x4884 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP3 DUP7 PUSH2 0x48B4 SWAP2 SWAP1 PUSH2 0x58FE JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH2 0x48C7 DUP7 PUSH2 0x4725 DUP6 PUSH1 0x5 PUSH2 0x4C9C JUMP JUMPDEST DUP9 SLOAD PUSH1 0x40 MLOAD PUSH4 0x26730863 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP3 DIV DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE CALLER PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x99CC218C SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x494A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x495E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP9 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x39 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 SWAP5 SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV DUP5 AND SWAP4 DUP7 SWAP4 DUP2 AND SWAP3 PUSH2 0x49BE SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x49C8 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO PUSH2 0x4A62 JUMPI PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND GT PUSH2 0x49FE JUMPI DUP2 SWAP4 POP PUSH2 0x4A0F JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP4 POP JUMPDEST PUSH1 0x2 DUP4 ADD DUP1 SLOAD DUP6 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x4A2F SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP4 DUP3 PUSH2 0x4A5F SWAP2 SWAP1 PUSH2 0x58FE JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x4A87 JUMPI POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4B9D JUMPI DUP5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7D5A36B3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 PUSH4 0xFAB46D66 SWAP3 PUSH2 0x4ADE SWAP3 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B2E SWAP2 SWAP1 PUSH2 0x589F JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x4B5E DUP3 PUSH32 0x0 PUSH2 0x3C0A JUMP JUMPDEST POP PUSH1 0x1 DUP7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 AND OR SWAP1 SSTORE DUP8 SLOAD SWAP1 SWAP2 POP PUSH2 0x4B98 SWAP1 DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x64 PUSH2 0x3C5C JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND GT DUP1 ISZERO PUSH2 0x4BBF JUMPI POP DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4BD3 JUMPI PUSH2 0x4BD0 DUP4 DUP4 PUSH1 0x64 PUSH2 0x47D0 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4BF3 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x58FE JUMP JUMPDEST DUP7 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5CF9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x4C25 SWAP1 DUP6 SWAP1 PUSH2 0x53EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP6 SLOAD PUSH2 0x4C43 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP4 PUSH2 0x3E31 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x2 DUP7 ADD SLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH2 0x4C6C SWAP3 SWAP1 DUP3 AND SWAP2 AND PUSH2 0x584A JUMP JUMPDEST PUSH2 0x4C76 SWAP2 SWAP1 PUSH2 0x584A JUMP JUMPDEST DUP8 SLOAD SWAP1 SWAP2 POP PUSH2 0x4C92 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE17 DUP4 DUP7 PUSH2 0x58FE JUMP JUMPDEST POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x4CAA DUP4 DUP6 PUSH2 0x5B6E JUMP JUMPDEST PUSH2 0xBFD SWAP2 SWAP1 PUSH2 0x5B8D JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x4CD6 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST ISZERO PUSH2 0xABA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x4D52 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x4D11 SWAP1 PUSH2 0x4F4E DUP6 PUSH2 0x4F5A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D99 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4D47 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xABA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x4D88 SWAP1 PUSH2 0x50B6 DUP6 PUSH2 0x4F5A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D99 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x18AD SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND PUSH2 0x4DD1 JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x4DF6 PUSH1 0x3 DUP3 PUSH2 0x4DE3 JUMPI PUSH2 0x4F4E PUSH2 0x4DE7 JUMP JUMPDEST PUSH2 0x50B6 JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4F5A JUMP JUMPDEST POP POP PUSH1 0x0 PUSH2 0x4E03 DUP5 PUSH2 0x16BB JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1201 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x4E52 SWAP1 DUP6 PUSH2 0x4E3F JUMPI PUSH2 0x4F4E PUSH2 0x4E43 JUMP JUMPDEST PUSH2 0x50B6 JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4F5A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5D99 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4E88 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1201 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x50C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F12 PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x5B8D JUMP JUMPDEST PUSH2 0xBFD SWAP1 DUP5 DUP5 AND PUSH2 0x5926 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xABA SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x4ECC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFD DUP3 DUP5 PUSH2 0x5AE3 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x4F7B JUMPI PUSH2 0x4F76 DUP7 PUSH2 0x2951 PUSH1 0x1 DUP5 PUSH2 0x5AE3 JUMP JUMPDEST PUSH2 0x4F7E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 POP PUSH2 0x4F97 DUP4 DUP6 DUP8 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP1 ISZERO PUSH2 0x5057 JUMPI PUSH1 0x0 PUSH2 0x4FC0 DUP8 PUSH2 0x4FB0 PUSH1 0x1 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x3B8E JUMPI PUSH2 0x3B8E PUSH2 0x5AFA JUMP JUMPDEST SWAP1 POP NUMBER DUP2 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x5055 JUMPI PUSH2 0x4FF9 DUP2 PUSH2 0x4FDD DUP6 PUSH2 0x42C2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH4 0xFFFFFFFF PUSH1 0x60 SHL AND OR SWAP1 JUMP JUMPDEST DUP8 PUSH2 0x5005 PUSH1 0x1 DUP6 PUSH2 0x5AE3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x5015 JUMPI PUSH2 0x5015 PUSH2 0x5AFA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x10 MUL PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x50AE JUMP JUMPDEST POP JUMPDEST DUP6 PUSH2 0x506D PUSH2 0x5064 NUMBER PUSH2 0x432E JUMP JUMPDEST PUSH2 0x4FDD DUP6 PUSH2 0x42C2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP1 SWAP4 KECCAK256 PUSH1 0x2 DUP3 DIV ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 DUP5 AND PUSH1 0x10 SWAP4 SWAP1 SWAP6 AND SWAP3 SWAP1 SWAP3 MUL PUSH2 0x100 EXP SWAP4 DUP5 MUL SWAP3 SWAP1 SWAP4 MUL NOT AND OR SWAP1 SSTORE POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFD DUP3 DUP5 PUSH2 0x5926 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5117 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5194 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xABA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5135 SWAP2 SWAP1 PUSH2 0x5C3B JUMP JUMPDEST PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2709 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH2 0x51A8 DUP6 PUSH2 0x39CE JUMP JUMPDEST PUSH2 0x51F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x5210 SWAP2 SWAP1 PUSH2 0x5C89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x524D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5252 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x5262 DUP3 DUP3 DUP7 PUSH2 0x526D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x527C JUMPI POP DUP2 PUSH2 0x2995 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x528C JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP2 SWAP1 PUSH2 0x5CA5 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0xFE6 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x432A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x52C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x52F4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x530B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2995 DUP2 PUSH2 0x52D4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x4 DUP5 LT PUSH2 0x534E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5384 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x5394 DUP2 PUSH2 0x52D4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x52F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x53C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x53D4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x53E2 PUSH1 0x20 DUP5 ADD PUSH2 0x539F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x541D DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x543D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBFD DUP3 PUSH2 0x539F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x547B DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x548B DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x549B DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x54A9 PUSH1 0x60 DUP7 ADD PUSH2 0x539F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x54C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x54D4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x54E4 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x54F2 PUSH1 0x40 DUP6 ADD PUSH2 0x539F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x550E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5519 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x5394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x541D DUP4 PUSH2 0x539F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x555E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x5569 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x5579 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x5589 DUP2 PUSH2 0x52D4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x55BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 GT ISZERO PUSH2 0x55D7 JUMPI PUSH2 0x55D7 PUSH2 0x5594 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x55FC JUMPI PUSH2 0x55FC PUSH2 0x5594 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP4 DUP5 MSTORE DUP6 DUP2 ADD DUP4 ADD SWAP4 DUP4 DUP2 ADD SWAP3 POP DUP8 DUP6 GT ISZERO PUSH2 0x561A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP2 POP JUMPDEST DUP5 DUP3 LT ISZERO PUSH2 0x5262 JUMPI PUSH2 0x5631 DUP3 PUSH2 0x52E9 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x5620 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x565F DUP6 PUSH2 0x539F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x5676 DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x569D DUP8 DUP3 DUP9 ADD PUSH2 0x55AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x56BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x56D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x56DE DUP4 PUSH2 0x539F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x56F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5705 DUP6 DUP3 DUP7 ADD PUSH2 0x55AA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x572D DUP2 PUSH2 0x52D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH28 0x43616C6C6572206973206E6F742074686520676F7665726E616E6365 PUSH1 0x20 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH27 0x105C1C1B1A58D85D1A5BDB881A5CC81B9BDD08185C1C1C9BDD9959 PUSH1 0x2A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x4E6F7468696E6720746F20746F702D757 PUSH1 0x7C SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH28 0x14185C985B595D195C9CC81B5D5CDD081899481CDC1958DA599A5959 PUSH1 0x22 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 DUP2 AND DUP5 DUP3 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x586C JUMPI PUSH2 0x586C PUSH2 0x5834 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x9CDEE8D0D2DCCE40E8DE40E6D8C2E6D PUSH1 0x83 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x58B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH23 0x5468657265206973206E6F2064697363726570616E6379 PUSH1 0x48 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x591E JUMPI PUSH2 0x591E PUSH2 0x5834 JUMP JUMPDEST SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x5939 JUMPI PUSH2 0x5939 PUSH2 0x5834 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x2737BA1037BBB732B91037B910383937BB34B232B9 PUSH1 0x59 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E277420756E7374616B65206561726C696572207468616E203234680000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH26 0x50726F766964657220697320616C726561647920696E20757365 PUSH1 0x30 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4E6F7468696E6720746F2073796E63 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5A13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2995 DUP2 PUSH2 0x52D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x546F6F206D75636820746F20756E7374616B65 PUSH1 0x68 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x2737BA1030BABA3437B934BD32B9 PUSH1 0x91 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5AF5 JUMPI PUSH2 0x5AF5 PUSH2 0x5834 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x5B24 JUMPI PUSH2 0x5B24 PUSH2 0x5834 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5B3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B69 JUMPI PUSH2 0x5B69 PUSH2 0x5B44 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5B88 JUMPI PUSH2 0x5B88 PUSH2 0x5834 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B9C JUMPI PUSH2 0x5B9C PUSH2 0x5B44 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP3 DUP6 DUP2 ADD SWAP3 SWAP1 SWAP2 PUSH1 0xA0 DUP7 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5BFB JUMPI DUP6 MLOAD DUP5 AND DUP4 MSTORE SWAP5 DUP5 ADD SWAP5 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5BDD JUMP JUMPDEST POP SWAP1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5C78 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5C60 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1201 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x5C9B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x5C5D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x5CC4 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x5C5D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID SWAP7 LOG3 0xC8 0xE9 PUSH25 0x312D2E82E746B65A21AACA458DD91C375FEA6066416EF241E DUP8 0xCB STATICCALL 0xB4 CALLDATALOAD PUSH7 0x87062505CC6502 SWAP3 KECCAK256 EXTCODEHASH 0xC2 EQ 0xDC DUP13 0xB4 0xB8 0xBD PUSH1 0x3E MSTORE8 PUSH10 0x9E3297186E8DD6DFABB3 DUP1 SMOD CALLCODE DUP12 CALLVALUE 0x2B DUP16 MSTORE8 PUSH13 0x8C832F746C2A53627133BE6545 GASPRICE 0xC0 0xB9 DUP10 PUSH9 0xF40E1221739F34DECC MOD PUSH15 0x1D68B15C5FC76B65E7EBE2F08C9F38 0xB3 0xEA ADDRESS SWAP3 0xF9 SWAP2 0x23 MSTORE8 0xB8 0xF8 0xE4 DUP9 0xE9 DUP5 LT SLT PUSH4 0x86F575C0 0xE2 CALLER 0xD2 0xEF 0xFB NOT DUP11 0x4E PUSH9 0xAF68AB1DE9C2E542AE DUP3 0xE5 0xBE 0xBA MULMOD PUSH32 0x34DB5D25B3E8383F0C9BA0B9FE180A3A8D2E761C11207221386DFDDEC2BACDD2 CREATE JUMPDEST MSIZE 0xDE CALLVALUE 0xDA SWAP12 MSTORE RETURNDATASIZE SELFDESTRUCT DUP12 0xE4 0x2E 0x5E CODESIZE 0xE8 XOR 0xC8 0x2F 0xDB SIGNEXTEND 0xAE PUSH24 0x4387A724A2646970667358221220BBE02E1872284B901740 0xE8 MLOAD PUSH3 0x586137 CREATE CALLDATALOAD LOG2 0xCE DIFFICULTY 0xFC SWAP13 BALANCE 0x23 PUSH21 0x66B4008DB80C64736F6C6343000809003300000000 ",
      "sourceMap": "2483:67885:63:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4709:58;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4709:58:63;;;;;;;;;;;:::i;:::-;;;;;;;;45821:142;;;;;;:::i;:::-;;:::i;:::-;;46818:495;;;;;;:::i;:::-;-1:-1:-1;;;;;47090:55:63;46936:13;47090:55;;;:16;:55;;;;;47164:28;;;;;47217:34;;;47274:32;;-1:-1:-1;;;;;47164:28:63;;;;47217:34;;;;47274:32;;;46818:495;;;;;-1:-1:-1;;;;;1770:15:80;;;1752:34;;1822:15;;;1817:2;1802:18;;1795:43;1874:15;;1854:18;;;1847:43;;;;1703:2;1688:18;46818:495:63;1519:377:80;26115:484:63;;;;;;:::i;:::-;;:::i;27290:606::-;;;;;;:::i;:::-;;:::i;24273:508::-;;;;;;:::i;:::-;;:::i;4422:35::-;;;;;;;;;2547:25:80;;;2535:2;2520:18;4422:35:63;2401:177:80;48263:501:63;;;;;;:::i;:::-;-1:-1:-1;;;;;48545:55:63;;;48382:13;48545:55;;;:16;:55;;;;;48618:27;;48669:33;;;;48725:32;;;;;-1:-1:-1;;;48618:27:63;;;;;;;48669:33;;;;;;;48725:32;;;;;48263:501;;;;;-1:-1:-1;;;;;2857:15:80;;;2839:34;;2909:15;;;2904:2;2889:18;;2882:43;2961:15;;2941:18;;;2934:43;;;;2789:2;2774:18;48263:501:63;2583:400:80;4387:29:63;;;;;-1:-1:-1;;;4387:29:63;;-1:-1:-1;;;;;4387:29:63;;;;;;;;;;:::i;4497:193:51:-;;;;;;:::i;:::-;;:::i;37573:1487:63:-;;;;;;:::i;:::-;;:::i;25244:572::-;;;;;;:::i;:::-;;:::i;4506:47::-;;;;;;42210:284;;;;;;:::i;:::-;;:::i;47717:268::-;;;;;;:::i;:::-;;:::i;32132:932::-;;;;;;:::i;:::-;;:::i;28995:726::-;;;;;;:::i;:::-;;:::i;11846:1303::-;;;;;;:::i;:::-;;:::i;3559:117:51:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;34218:1116:63:-;;;;;;:::i;:::-;;:::i;9964:1507::-;;;;;;:::i;:::-;;:::i;4356:25::-;;;;;-1:-1:-1;;;;;4356:25:63;;;49863:1204;;;;;;:::i;:::-;;:::i;16401:192::-;;;;;;:::i;:::-;;:::i;42628:350::-;;;;;;:::i;:::-;;:::i;52130:1466::-;;;;;;:::i;:::-;;:::i;3287:196:51:-;;;;;;:::i;:::-;;:::i;:::-;;;5581:10:80;5569:23;;;5551:42;;5539:2;5524:18;3287:196:51;5407:192:80;4598:33:63;;;;;;21476:1202;;;;;;:::i;:::-;;:::i;4560:32::-;;;;;;41430:312;;;;;;:::i;:::-;;:::i;9475:91::-;;;:::i;13456:1424::-;;;;;;:::i;:::-;;:::i;44088:244::-;;;;;;:::i;:::-;;:::i;20155:941::-;;;;;;:::i;:::-;;:::i;53703:558::-;;;;;;:::i;:::-;;:::i;39772:1268::-;;;;;;:::i;:::-;;:::i;5022:184:51:-;;;;;;:::i;:::-;;:::i;3858:198::-;;;;;;:::i;:::-;;:::i;35762:1200:63:-;;;;;;:::i;:::-;;:::i;4851:33::-;;;;;;48822:117;48913:12;:19;48822:117;;15122:518;;;;;;:::i;:::-;;:::i;26820:205::-;;;;;;:::i;:::-;;:::i;22881:919::-;;;;;;:::i;:::-;;:::i;44593:1035::-;;;;;;:::i;:::-;;:::i;46037:154::-;;;;;;:::i;:::-;;:::i;41900:195::-;;;;;;:::i;:::-;;:::i;30306:944::-;;;;;;:::i;:::-;;:::i;4773:29::-;;;;;;:::i;:::-;;:::i;46366:289::-;;;;;;:::i;:::-;-1:-1:-1;;;;;46542:33:63;;;46501:6;46542:33;;;:16;:33;;;;;;;;:78;;;;;;:65;;;;:78;;;;:106;-1:-1:-1;;;;;46542:106:63;;46366:289;16816:694;;;;;;:::i;:::-;;:::i;4463:37::-;;;;;-1:-1:-1;;;;;4463:37:63;;;28110:673;;;;;;:::i;:::-;;:::i;43429:169::-;;;;;;:::i;:::-;;:::i;2910:314:51:-;;;;;;:::i;:::-;;:::i;:::-;;;;9337:13:80;;9352:10;9333:30;9315:49;;9424:4;9412:17;;;9406:24;-1:-1:-1;;;;;9402:49:80;9380:20;;;9373:79;;;;9288:18;2910:314:51;9111:347:80;4809:36:63;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;47416:215::-;;;;;;:::i;:::-;-1:-1:-1;;;;;47569:33:63;47539:7;47569:33;;;:16;:33;;;;;:55;;;;47416:215;17912:1628;;;;;;:::i;:::-;;:::i;48994:119::-;49086:13;:20;48994:119;;45821:142;45920:36;45929:15;45946:9;45920:8;:36::i;:::-;45821:142;;:::o;26115:484::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;26296:50:63;::::1;26252:41;26296:50:::0;;;:15:::1;:50;::::0;;;;26405:26:::1;26377:24:::0;;::::1;;:54;::::0;::::1;;;;;;:::i;:::-;;26356:128;;;;-1:-1:-1::0;;;26356:128:63::1;;;;;;;:::i;:::-;26494:43:::0;;-1:-1:-1;;;;;26494:43:63;;::::1;;::::0;::::1;-1:-1:-1::0;;;;;;26494:43:63;;::::1;::::0;;;::::1;::::0;;26552:40:::1;::::0;;;::::1;::::0;::::1;::::0;26494:29:::1;::::0;26552:40:::1;26242:357;26115:484:::0;;:::o;27290:606::-;-1:-1:-1;;;;;27394:33:63;;;27445:1;27394:33;;;:16;:33;;;;;:39;-1:-1:-1;;;27394:39:63;;;27373:117;;;;-1:-1:-1;;;27373:117:63;;;;;;;:::i;:::-;27517:1;27508:6;-1:-1:-1;;;;;27508:10:63;;27500:51;;;;-1:-1:-1;;;27500:51:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;27613:55:63;;27561:49;27613:55;;;:16;:55;;;;;27678:28;;;:38;;27613:55;;27710:6;;27678:38;;27710:6;;-1:-1:-1;;;;;27678:38:63;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;27678:38:63;;;;;-1:-1:-1;;;;;27678:38:63;;;;;;27740:15;-1:-1:-1;;;;;27731:33:63;-1:-1:-1;;;;;;;;;;;27757:6:63;27731:33;;;;;;:::i;:::-;;;;;;;;27774:48;27798:15;27815:6;27774:23;:48::i;:::-;27832:57;-1:-1:-1;;;;;27832:5:63;:22;27855:10;27875:4;-1:-1:-1;;;;;27832:57:63;;:22;:57::i;:::-;27363:533;27290:606;;:::o;24273:508::-;-1:-1:-1;;;;;7303:28:63;;;;;;;:15;:28;;;;;:40;24380:11;;7303:40;;;;;7347:10;7303:54;7282:131;;;;-1:-1:-1;;;7282:131:63;;11756:2:80;7282:131:63;;;11738:21:80;11795:2;11775:18;;;11768:30;11834:32;11814:18;;;11807:60;11884:18;;7282:131:63;11554:354:80;7282:131:63;-1:-1:-1;;;;;24451:50:63;::::1;24407:41;24451:50:::0;;;:15:::1;:50;::::0;;;;24560:26:::1;24532:24:::0;;::::1;;:54;::::0;::::1;;;;;;:::i;:::-;;24511:124;;;::::0;-1:-1:-1;;;24511:124:63;;12115:2:80;24511:124:63::1;::::0;::::1;12097:21:80::0;12154:2;12134:18;;;12127:30;-1:-1:-1;;;12173:18:80;;;12166:53;12236:18;;24511:124:63::1;11913:347:80::0;24511:124:63::1;24645:51:::0;;-1:-1:-1;;24645:51:63::1;24672:24;24645:51:::0;;::::1;::::0;;24711:63:::1;::::0;-1:-1:-1;;;;;24711:63:63;::::1;::::0;-1:-1:-1;;;;;;;;;;;24711:63:63;-1:-1:-1;;24711:63:63::1;24397:384;24273:508:::0;;:::o;4497:193:51:-;-1:-1:-1;;;;;4648:21:51;;4602:6;4648:21;;;:12;:21;;;;;4631:52;;4671:11;4631:16;:52::i;:::-;4624:59;;4497:193;;;;;:::o;37573:1487:63:-;-1:-1:-1;;;;;37734:55:63;;37682:49;37734:55;;;:16;:55;;;;;37807:34;;;;-1:-1:-1;;;;;37807:34:63;37799:67;;;;-1:-1:-1;;;37799:67:63;;;;;;;:::i;:::-;37878:23;37905:21;37930:19;-1:-1:-1;;;;;37930:50:63;;37981:15;37930:67;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;37877:120;;;;;38009:23;38038:38;38049:15;38066:9;38038:10;:38::i;:::-;-1:-1:-1;38111:34:63;;;;38008:68;;-1:-1:-1;;;;;;38111:34:63;;;;38177;;;;;:56;;-1:-1:-1;38215:18:63;;;38177:56;38156:126;;;;-1:-1:-1;;;38156:126:63;;;;;;;:::i;:::-;38292:34;;;:53;;-1:-1:-1;;;;;;38292:53:63;-1:-1:-1;;;;;38292:53:63;;;;;;;;;;38442:23;;38479:32;;38355:166;;38292:34;;38413:15;;38442:23;;;38355:9;:166::i;:::-;-1:-1:-1;38586:34:63;;;;38532:20;;38555:65;;-1:-1:-1;;;;;38586:34:63;38555:16;:65;:::i;:::-;38532:88;;38680:4;38635:50;;38648:15;-1:-1:-1;;;;;38635:50:63;-1:-1:-1;;;;;;;;;;;38665:13:63;38635:50;;;;;;:::i;:::-;;;;;;;;38699:18;;38695:87;;38733:34;;;:38;;-1:-1:-1;;;;;;38733:38:63;;;38695:87;38876:34;;;;38792:128;;38829:15;;38858:52;;-1:-1:-1;;;;;38876:34:63;38858:15;:52;:::i;:::-;38792:23;:128::i;:::-;38931:122;38966:15;38995:21;39030:13;38931:21;:122::i;:::-;37672:1388;;;;;;37573:1487;:::o;25244:572::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;25408:50:63;::::1;25364:41;25408:50:::0;;;:15:::1;:50;::::0;;;;25517:26:::1;25489:24:::0;;::::1;;:54;::::0;::::1;;;;;;:::i;:::-;;:126;;;-1:-1:-1::0;25591:24:63::1;25563::::0;;::::1;;:52;::::0;::::1;;;;;;:::i;:::-;;25489:126;25468:198;;;::::0;-1:-1:-1;;;25468:198:63;;13709:2:80;25468:198:63::1;::::0;::::1;13691:21:80::0;13748:2;13728:18;;;13721:30;-1:-1:-1;;;13767:18:80;;;13760:55;13832:18;;25468:198:63::1;13507:349:80::0;25468:198:63::1;25676:53:::0;;-1:-1:-1;;25676:53:63::1;25703:26;25676:53:::0;;::::1;::::0;;25744:65:::1;;::::0;-1:-1:-1;;;;;25744:65:63;::::1;::::0;-1:-1:-1;;;;;;;;;;;25744:65:63;;;::::1;25354:462;25244:572:::0;:::o;42210:284::-;42302:1;42293:6;-1:-1:-1;;;;;42293:10:63;;42285:51;;;;-1:-1:-1;;;42285:51:63;;;;;;;:::i;:::-;42367:6;-1:-1:-1;;;;;42346:27:63;:17;;:27;;;;;;;:::i;:::-;;;;-1:-1:-1;;42388:32:63;;;;;;42413:6;;42388:32;:::i;:::-;;;;;;;;42430:57;-1:-1:-1;;;;;42430:5:63;:22;42453:10;42473:4;-1:-1:-1;;;;;42430:57:63;;:22;:57::i;:::-;42210:284;:::o;47717:268::-;-1:-1:-1;;;;;47897:33:63;;47824:16;47897:33;;;:16;:33;;;;;:44;47871:107;;-1:-1:-1;;;;;47897:44:63;47955:13;47871:12;:107::i;:::-;-1:-1:-1;47856:122:63;47717:268;-1:-1:-1;;47717:268:63:o;32132:932::-;-1:-1:-1;;;;;7843:33:63;;;7894:1;7843:33;;;:16;:33;;;;;:39;32247:15;;-1:-1:-1;;;7843:39:63;;;;:53;;;;:181;;-1:-1:-1;;;;;;7917:29:63;;7936:10;7917:29;;:106;;-1:-1:-1;;;;;;7970:33:63;;;;;;;:16;:33;;;;;:39;-1:-1:-1;;;7970:39:63;;;8013:10;7970:53;7917:106;7822:249;;;;-1:-1:-1;;;7822:249:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;32330:55:63;::::1;32278:49;32330:55:::0;;;:16:::1;:55;::::0;;;;32417:34:::1;::::0;::::1;::::0;-1:-1:-1;;;;;32417:34:63::1;32469:17:::0;32461:48:::1;;;::::0;-1:-1:-1;;;32461:48:63;;14546:2:80;32461:48:63::1;::::0;::::1;14528:21:80::0;14585:2;14565:18;;;14558:30;-1:-1:-1;;;14604:18:80;;;14597:48;14662:18;;32461:48:63::1;14344:342:80::0;32461:48:63::1;32540:45;32553:15;32570:14;32540:12;:45::i;:::-;-1:-1:-1::0;;;;;32540:50:63::1;::::0;32519:124:::1;;;::::0;-1:-1:-1;;;32519:124:63;;14893:2:80;32519:124:63::1;::::0;::::1;14875:21:80::0;14932:2;14912:18;;;14905:30;-1:-1:-1;;;14951:18:80;;;14944:57;15018:18;;32519:124:63::1;14691:351:80::0;32519:124:63::1;32819:15;3508:8;32674:21;:43;;;:60;;;;:::i;:::-;:160;;32653:237;;;;-1:-1:-1::0;;;32653:237:63::1;;;;;;;:::i;:::-;32915:15;-1:-1:-1::0;;;;;32906:39:63::1;-1:-1:-1::0;;;;;;;;;;;32932:12:63::1;32906:39;;;;;;:::i;:::-;;;;;;;;32955:34;::::0;::::1;:38:::0;;-1:-1:-1;;;;;;32955:38:63::1;::::0;;33003:54:::1;33027:15:::0;33044:12;33003:23:::1;:54::i;:::-;32268:796;;32132:932:::0;;:::o;28995:726::-;-1:-1:-1;;;;;7843:33:63;;;7894:1;7843:33;;;:16;:33;;;;;:39;29106:15;;-1:-1:-1;;;7843:39:63;;;;:53;;;;:181;;-1:-1:-1;;;;;;7917:29:63;;7936:10;7917:29;;:106;;-1:-1:-1;;;;;;7970:33:63;;;;;;;:16;:33;;;;;:39;-1:-1:-1;;;7970:39:63;;;8013:10;7970:53;7917:106;7822:249;;;;-1:-1:-1;;;7822:249:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;29189:55:63;;::::1;29137:49;29189:55:::0;;;:16:::1;:55;::::0;;;;29299:27;;29189:55;;29271:94:::1;::::0;-1:-1:-1;;;29299:27:63;::::1;;29219:15:::0;29271:14:::1;:94::i;:::-;29406:32:::0;;29254:111;;-1:-1:-1;;;;;;29406:32:63;;::::1;29396:42:::0;;::::1;;29375:106;;;;-1:-1:-1::0;;;29375:106:63::1;;;;;;;:::i;:::-;29520:32:::0;;29492:15:::1;::::0;29510:42:::1;::::0;-1:-1:-1;;;;;29520:32:63::1;29510:7:::0;:42:::1;:::i;:::-;29492:60;;29576:15;-1:-1:-1::0;;;;;29567:35:63::1;-1:-1:-1::0;;;;;;;;;;;29593:8:63::1;29567:35;;;;;;:::i;:::-;;;;;;;;29612:42:::0;;-1:-1:-1;;;;;;29612:42:63::1;-1:-1:-1::0;;;;;29612:42:63;::::1;;::::0;;29664:50:::1;29688:15:::0;29705:8;29664:23:::1;:50::i;:::-;29127:594;;;28995:726:::0;;:::o;11846:1303::-;-1:-1:-1;;;;;11926:29:63;;11918:70;;;;-1:-1:-1;;;11918:70:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;12050:55:63;;;11998:49;12050:55;;;:16;:55;;;;;12137:27;;12050:55;;-1:-1:-1;;;12137:27:63;;;;:41;12116:114;;;;-1:-1:-1;;;12116:114:63;;;;;;;:::i;:::-;12241:14;12258:33;12275:15;12258:16;:33::i;:::-;12241:50;-1:-1:-1;;;;;;12309:12:63;;12301:40;;;;-1:-1:-1;;;12301:40:63;;;;;;;:::i;:::-;12352:34;;;:44;;-1:-1:-1;;;;;;12352:44:63;-1:-1:-1;;;;;12352:44:63;;;;;12436:39;;-1:-1:-1;;;12436:39:63;;:9;-1:-1:-1;;;;;12436:22:63;;;;:39;;12459:15;;12436:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12406:69;;-1:-1:-1;;;;;12406:69:63;-1:-1:-1;;;;;;;;12406:69:63;;;;;;;12520:71;;-1:-1:-1;;;12520:71:63;;:19;:32;;;;;;:71;;12566:15;;12520:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12485:32;;;:106;;-1:-1:-1;;;;;12485:106:63;-1:-1:-1;;;;;;;;12485:106:63;;;;;;;12637:72;;-1:-1:-1;;;12637:72:63;;:19;:33;;;;;;:72;;12684:15;;12637:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12601:33;;;:108;;-1:-1:-1;;;;;12601:108:63;;;;-1:-1:-1;;;12601:108:63;-1:-1:-1;;;;;12601:108:63;;;;;;;;;12823:15;12777:43;;;:61;12849:49;12873:15;12890:7;12849:23;:49::i;:::-;12962:27;;-1:-1:-1;;;;;12914:228:63;;;;-1:-1:-1;;;12962:27:63;;;12934:14;13032:33;;;;13079:32;;;;12914:228;;-1:-1:-1;;;;;;;;;;;12914:228:63;;;-1:-1:-1;;;;;;;;13032:33:63;;;;;;;13079:32;;;;;;13125:7;;12914:228;:::i;:::-;;;;;;;;11908:1241;;11846:1303;:::o;3559:117:51:-;-1:-1:-1;;;;;3650:19:51;;;3624:7;3650:19;;;:10;:19;;;;;;;;3559:117::o;34218:1116:63:-;-1:-1:-1;;;;;7843:33:63;;;7894:1;7843:33;;;:16;:33;;;;;:39;34346:15;;-1:-1:-1;;;7843:39:63;;;;:53;;;;:181;;-1:-1:-1;;;;;;7917:29:63;;7936:10;7917:29;;:106;;-1:-1:-1;;;;;;7970:33:63;;;;;;;:16;:33;;;;;:39;-1:-1:-1;;;7970:39:63;;;8013:10;7970:53;7917:106;7822:249;;;;-1:-1:-1;;;7822:249:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;34429:55:63;::::1;34377:49;34429:55:::0;;;:16:::1;:55;::::0;;;;;34646:35:::1;34659:6:::0;34667:13:::1;34646:12;:35::i;:::-;34622:59:::0;-1:-1:-1;34691:20:63::1;::::0;-1:-1:-1;34622:59:63;34691:20;::::1;:::i;:::-;;;34751:1;34742:6;-1:-1:-1::0;;;;;34742:10:63::1;;:134;;;;-1:-1:-1::0;34844:32:63;;-1:-1:-1;;;;;34844:32:63::1;34781:43;34794:15:::0;34844:32:::1;34781:12;:43::i;:::-;34772:52;::::0;:6;:52:::1;:::i;:::-;-1:-1:-1::0;;;;;34772:104:63::1;;;34742:134;34721:200;;;;-1:-1:-1::0;;;34721:200:63::1;;;;;;;:::i;:::-;35097:15;3508:8;34952:21;:43;;;:60;;;;:::i;:::-;:160;;34931:237;;;;-1:-1:-1::0;;;34931:237:63::1;;;;;;;:::i;:::-;35179:42:::0;;35215:6;;35179:21;;:32:::1;::::0;:42:::1;::::0;35215:6;;-1:-1:-1;;;;;35179:42:63::1;;:::i;:::-;;;;;;;;-1:-1:-1::0;;;;;35179:42:63::1;;;;;-1:-1:-1::0;;;;;35179:42:63::1;;;;;;35231:48;35255:15;35272:6;35231:23;:48::i;:::-;35303:15;-1:-1:-1::0;;;;;35294:33:63::1;-1:-1:-1::0;;;;;;;;;;;35320:6:63::1;35294:33;;;;;;:::i;:::-;;;;;;;;34367:967;;34218:1116:::0;;;:::o;9964:1507::-;-1:-1:-1;;;;;10155:29:63;;;;;;:74;;-1:-1:-1;;;;;;10204:25:63;;;;10155:74;:118;;;;-1:-1:-1;;;;;;10249:24:63;;;;10155:118;10134:193;;;;-1:-1:-1;;;10134:193:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;10389:55:63;;;10337:49;10389:55;;;:16;:55;;;;;;10480:76;;-1:-1:-1;;;10480:76:63;;10389:55;;10480:19;:37;;;;:76;;10419:15;;10480:76;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;10454:102:63;-1:-1:-1;;10587:14:63;;:59;;;;-1:-1:-1;10605:27:63;;-1:-1:-1;;;10605:27:63;;-1:-1:-1;;;;;10605:27:63;:41;10587:59;10566:132;;;;-1:-1:-1;;;10566:132:63;;;;;;;:::i;:::-;10738:1;10729:6;-1:-1:-1;;;;;10729:10:63;;:39;;;;-1:-1:-1;10753:15:63;;-1:-1:-1;;;;;;;;10753:15:63;;;;;10743:25;;;;;10729:39;10708:113;;;;-1:-1:-1;;;10708:113:63;;17586:2:80;10708:113:63;;;17568:21:80;17625:2;17605:18;;;17598:30;-1:-1:-1;;;17644:18:80;;;17637:57;17711:18;;10708:113:63;17384:351:80;10708:113:63;10831:40;;-1:-1:-1;;;10861:10:63;10831:40;;-1:-1:-1;;;;;10831:40:63;;;;;;-1:-1:-1;10936:33:63;;:47;;-1:-1:-1;;;;;10936:47:63;;;;;;;;;;;;;;;10994:37;;;10881:45;;;;-1:-1:-1;;;;;;10994:37:63;;10881:32;;;10994:37;11144:15;11098:43;;;:61;11170:48;11194:15;11025:6;11170:23;:48::i;:::-;-1:-1:-1;;;;;11234:163:63;;11279:10;11254:11;-1:-1:-1;;;;;;;;;;;11332:11:63;11357:10;11381:6;11234:163;;;;;;;;:::i;:::-;;;;;;;;11407:57;-1:-1:-1;;;;;11407:5:63;:22;11430:10;11450:4;-1:-1:-1;;;;;11407:57:63;;:22;:57::i;:::-;10124:1347;;9964:1507;;;;:::o;49863:1204::-;-1:-1:-1;;;;;7574:33:63;;;;;;;:16;:33;;;;;:44;;;50025:15;;-1:-1:-1;;;7574:44:63;;;;7622:10;7574:58;7553:119;;;;-1:-1:-1;;;7553:119:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;50096:50:63;::::1;50052:41;50096:50:::0;;;:15:::1;:50;::::0;;;;50205:26:::1;50177:24:::0;;::::1;;:54;::::0;::::1;;;;;;:::i;:::-;;50156:128;;;;-1:-1:-1::0;;;50156:128:63::1;;;;;;;:::i;:::-;50312:1;50303:6;-1:-1:-1::0;;;;;50303:10:63::1;;50295:51;;;;-1:-1:-1::0;;;50295:51:63::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;50398:55:63;;::::1;50357:38;50398:55:::0;;;:16:::1;:55;::::0;;;;;;;:83;;::::1;::::0;;:70:::1;::::0;;::::1;:83:::0;;;50512:24;;-1:-1:-1;;;;;50512:34:63;;::::1;:24:::0;::::1;:34;;50491:106;;;::::0;-1:-1:-1;;;50491:106:63;;18285:2:80;50491:106:63::1;::::0;::::1;18267:21:80::0;18324:2;18304:18;;;18297:30;-1:-1:-1;;;18343:18:80;;;18336:55;18408:18;;50491:106:63::1;18083:349:80::0;50491:106:63::1;50608:36:::0;;-1:-1:-1;;;;;50608:36:63;;::::1;-1:-1:-1::0;;;50608:36:63::1;-1:-1:-1::0;;;;;;;;50608:36:63;::::1;::::0;::::1;::::0;;:27:::1;::::0;50679:33:::1;::::0;50638:6;;50679:24;;;;;:33:::1;:::i;:::-;50825:24:::0;;50727:161:::1;::::0;50654:58;;-1:-1:-1;;;;;;50727:161:63;;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;50825:24:63::1;::::0;50654:58;;50727:161:::1;:::i;:::-;;;;;;;;50997:24:::0;;50898:162:::1;::::0;-1:-1:-1;;;50898:162:63;;-1:-1:-1;;;;;50898:56:63;::::1;::::0;::::1;::::0;:162:::1;::::0;50968:15;;-1:-1:-1;;;;;50997:24:63;;::::1;::::0;51035:15;;50898:162:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;50042:1025;;;49863:1204:::0;;;;:::o;16401:192::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;16518:15:::1;:24:::0;;-1:-1:-1;;;;;16518:24:63::1;-1:-1:-1::0;;;;;;;;16518:24:63;::::1;;;::::0;;16557:29:::1;::::0;::::1;::::0;::::1;::::0;16518:24;;16557:29:::1;:::i;:::-;;;;;;;;16401:192:::0;:::o;42628:350::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;42787:17:::1;;42777:6;-1:-1:-1::0;;;;;42777:27:63::1;;;42769:57;;;::::0;-1:-1:-1;;;42769:57:63;;19344:2:80;42769:57:63::1;::::0;::::1;19326:21:80::0;19383:2;19363:18;;;19356:30;-1:-1:-1;;;19402:18:80;;;19395:47;19459:18;;42769:57:63::1;19142:341:80::0;42769:57:63::1;42857:6;-1:-1:-1::0;;;;;42836:27:63::1;:17;;:27;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;42878:46:63::1;::::0;::::1;::::0;::::1;::::0;42906:9;;42917:6;;42878:46:::1;:::i;:::-;;;;;;;;42934:37;-1:-1:-1::0;;;;;42934:5:63::1;:18;42953:9:::0;-1:-1:-1;;;;;42934:37:63;::::1;:18;:37::i;52130:1466::-:0;-1:-1:-1;;;;;52335:55:63;;52261:6;52335:55;;;:16;:55;;;;;52261:6;;52438:430;52487:44;;;:51;52483:55;;52438:430;;;52580:19;52602:21;:44;;52664:1;52602:77;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;52602:77:63;52783:49;;;:36;;;:49;;;;;;;:60;52602:77;;-1:-1:-1;52712:145:63;;52749:16;;-1:-1:-1;;;;;52783:60:63;52712:19;:145::i;:::-;52693:164;;52566:302;52552:3;;;;;:::i;:::-;;;;52438:430;;;-1:-1:-1;52882:21:63;52878:60;;52926:1;52919:8;;;;;;52878:60;52965:11;52951:10;:25;;;;;;;;:::i;:::-;;52947:189;;53083:28;;;;53012:113;;53049:16;;-1:-1:-1;;;;;53083:28:63;53012:19;:113::i;:::-;52992:133;;;;:::i;:::-;;;52947:189;53163:12;53149:10;:26;;;;;;;;:::i;:::-;;53145:194;;53282:32;;53211:117;;53248:16;;-1:-1:-1;;;;;53282:32:63;53211:19;:117::i;:::-;53191:137;;;;:::i;:::-;;;53145:194;53366:14;53352:10;:28;;;;;;;;:::i;:::-;;53348:198;;53487:34;;;;53416:119;;53453:16;;-1:-1:-1;;;;;53487:34:63;53416:19;:119::i;:::-;53396:139;;;;:::i;:::-;;;53348:198;53562:27;:16;:25;:27::i;:::-;53555:34;52130:1466;-1:-1:-1;;;;;52130:1466:63:o;3287:196:51:-;-1:-1:-1;;;;;3447:21:51;;3389:6;3447:21;;;:12;:21;;;;;:28;3418:58;;:28;:58::i;21476:1202:63:-;21672:10;21590:6;21656:27;;;:15;:27;;;;;21742:26;21714:24;;;;:54;;;;;;;;:::i;:::-;;21693:128;;;;-1:-1:-1;;;21693:128:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;21884:55:63;;21832:49;21884:55;;;:16;:55;;;;;;;;22040:10;21990:61;;:49;;;:61;;;;;;22069:27;;-1:-1:-1;;;22069:27:63;;-1:-1:-1;;;;;22069:27:63;22061:71;;;;-1:-1:-1;;;22061:71:63;;20092:2:80;22061:71:63;;;20074:21:80;20131:2;20111:18;;;20104:30;-1:-1:-1;;;20150:18:80;;;20143:57;20217:18;;22061:71:63;19890:351:80;22061:71:63;22163:24;;-1:-1:-1;;;;;22163:24:63;;;;-1:-1:-1;;;22225:27:63;;;22163:13;22143:17;22197:55;22225:27;22163:24;22197:55;:::i;:::-;;;;;;;;-1:-1:-1;;;;;22197:55:63;;;;;;;;;;;;;;;22262:31;;-1:-1:-1;;;;;;;;22262:31:63;;;;22308:154;;22380:10;;-1:-1:-1;;;;;;22308:154:63;;;-1:-1:-1;;;;;;;;;;;22308:154:63;;;22404:10;;22428:24;;;;;22308:154;:::i;:::-;;;;;;;;22521:24;;-1:-1:-1;;;;;22521:24:63;22517:113;;22566:53;22594:21;22617:1;22566:27;:53::i;:::-;-1:-1:-1;22647:24:63;-1:-1:-1;;;;;22647:24:63;;21476:1202;-1:-1:-1;;;;21476:1202:63:o;41430:312::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;41573:23:::1;:33:::0;;-1:-1:-1;;;;;;41573:33:63::1;-1:-1:-1::0;;;;;41573:33:63;::::1;::::0;;::::1;::::0;;;41616:32:::1;:51:::0;;;41682:53:::1;::::0;;20418:50:80;;;20499:2;20484:18;;20477:34;;;41682:53:63::1;::::0;20391:18:80;41682:53:63::1;;;;;;;;41430:312:::0;;:::o;9475:91::-;2369:13:0;;;;;;;:48;;2405:12;;;;2404:13;2369:48;;;2385:16;:14;:16::i;:::-;2361:107;;;;-1:-1:-1;;;2361:107:0;;20724:2:80;2361:107:0;;;20706:21:80;20763:2;20743:18;;;20736:30;20802:34;20782:18;;;20775:62;-1:-1:-1;;;20853:18:80;;;20846:44;20907:19;;2361:107:0;20522:410:80;2361:107:0;2479:19;2502:13;;;;;;2501:14;2525:98;;;;2559:13;:20;;-1:-1:-1;;2593:19:0;;;;;2525:98;9528:31:63::1;9548:10;9528:19;:31::i;:::-;2649:14:0::0;2645:66;;;2695:5;2679:21;;-1:-1:-1;;2679:21:0;;;2080:637;9475:91:63:o;13456:1424::-;-1:-1:-1;;;;;13626:29:63;;;;;;:74;;-1:-1:-1;;;;;;13675:25:63;;;;13626:74;:118;;;;-1:-1:-1;;;;;;13720:24:63;;;;13626:118;13605:193;;;;-1:-1:-1;;;13605:193:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;13860:55:63;;;13808:49;13860:55;;;:16;:55;;;;;;13951:76;;-1:-1:-1;;;13951:76:63;;13860:55;;13951:19;:37;;;;:76;;13890:15;;13951:76;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;13925:102:63;-1:-1:-1;;14058:14:63;;:59;;;;-1:-1:-1;14076:27:63;;-1:-1:-1;;;14076:27:63;;-1:-1:-1;;;;;14076:27:63;:41;14058:59;14037:132;;;;-1:-1:-1;;;14037:132:63;;;;;;;:::i;:::-;14180:14;14197:43;14212:10;14224:15;14197:14;:43::i;:::-;14180:60;;14268:1;14258:7;-1:-1:-1;;;;;14258:11:63;;14250:39;;;;-1:-1:-1;;;14250:39:63;;;;;;;:::i;:::-;-1:-1:-1;;;14382:10:63;14352:40;;-1:-1:-1;;;;;14300:42:63;;;14352:40;;;;;;14402:32;;;:45;;-1:-1:-1;;;;;14402:45:63;;;;;;;;;;;;;;;14300:42;14457:33;;:47;;;;;;;;;;;;;14617:15;14571:43;;;:61;14643:49;14667:15;14335:7;14643:23;:49::i;:::-;-1:-1:-1;;;;;14708:165:63;;14754:10;14728:12;-1:-1:-1;;;;;;;;;;;14807:11:63;14832:10;14856:7;14708:165;;;;;;;;:::i;:::-;;;;;;;;13595:1285;;;13456:1424;;;:::o;44088:244::-;44264:61;44271:6;44279:16;44297:8;44307:17;44264:6;:61::i;20155:941::-;-1:-1:-1;;;;;20289:55:63;;20237:49;20289:55;;;:16;:55;;;;;;20237:49;20388:639;20437:44;;;:51;20433:55;;20388:639;;;20530:19;20552:21;:44;;20614:1;20552:77;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;20552:77:63;20663:66;;;:53;;;:66;;;;;;;:94;20552:77;;-1:-1:-1;;;;;;20663:94:63;20775:14;;20771:246;;20809:148;20859:15;20896:11;20929:10;20809:28;:148::i;:::-;20975:27;20992:10;20975:27;;:::i;:::-;;;20771:246;20516:511;;20502:3;;;;;:::i;:::-;;;;20388:639;;;;21061:1;21045:13;-1:-1:-1;;;;;21045:17:63;;21037:52;;;;-1:-1:-1;;;21037:52:63;;21139:2:80;21037:52:63;;;21121:21:80;21178:2;21158:18;;;21151:30;-1:-1:-1;;;21197:18:80;;;21190:52;21259:18;;21037:52:63;20937:346:80;53703:558:63;-1:-1:-1;;;;;53920:55:63;;53834:22;53920:55;;;:16;:55;;;;;54107:32;;;54058:34;;;54015:28;;;;-1:-1:-1;;;;;54107:32:63;;;;54015:77;;54058:34;;;54015:28;:77;:::i;:::-;:124;;;;:::i;:::-;-1:-1:-1;;;;;54168:62:63;;;;;;:49;;;:62;;;;;:86;53985:154;;-1:-1:-1;54149:105:63;;-1:-1:-1;;;;;54168:86:63;53985:154;54149:105;:::i;:::-;;53703:558;-1:-1:-1;;;;53703:558:63:o;39772:1268::-;-1:-1:-1;;;;;39931:55:63;;39879:49;39931:55;;;:16;:55;;;;;40004:32;;-1:-1:-1;;;;;40004:32:63;39996:65;;;;-1:-1:-1;;;39996:65:63;;;;;;;:::i;:::-;40146:27;;40096:87;;-1:-1:-1;;;40096:87:63;;40072:21;;-1:-1:-1;;;;;40096:23:63;:36;;;;;:87;;-1:-1:-1;;;40146:27:63;;;;;40096:87;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;40072:111;;40194:21;40221:40;40232:13;40247;40221:10;:40::i;:::-;-1:-1:-1;40294:32:63;;40193:68;;-1:-1:-1;;;;;;40294:32:63;;;;40344:30;;;;40336:66;;;;-1:-1:-1;;;40336:66:63;;;;;;;:::i;:::-;40413:49;;-1:-1:-1;;;;;;40413:49:63;-1:-1:-1;;;;;40413:49:63;;;;;;;;;40528:23;;40565:32;;40472:135;;40413:49;;40528:23;;40472:7;:135::i;:::-;-1:-1:-1;40670:32:63;;40618:20;;40641:61;;-1:-1:-1;;;;;40670:32:63;40641:14;:61;:::i;:::-;40618:84;;40762:4;40717:50;;40730:15;-1:-1:-1;;;;;40717:50:63;-1:-1:-1;;;;;;;;;;;40747:13:63;40717:50;;;;;;:::i;:::-;;;;;;;;40777:122;40812:15;40841:21;40876:13;40777:21;:122::i;:::-;40991:32;;40909:124;;40946:15;;40975:48;;-1:-1:-1;;;;;40991:32:63;40975:13;:48;:::i;5022:184:51:-;5116:6;5145:54;5162:23;5187:11;5145:16;:54::i;3858:198::-;-1:-1:-1;;;;;3946:21:51;;3914:6;3946:21;;;:12;:21;;;;;:28;3991:8;;:58;;-1:-1:-1;;;;;4018:21:51;;;;;;:12;:21;;;;;4006:43;;4040:7;4046:1;4040:3;:7;:::i;:::-;4018:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4018:30:51;11086:10;10990:114;4006:43;3991:58;;;4002:1;3991:58;3984:65;3858:198;-1:-1:-1;;;3858:198:51:o;35762:1200:63:-;-1:-1:-1;;;;;7843:33:63;;;7894:1;7843:33;;;:16;:33;;;;;:39;35876:15;;-1:-1:-1;;;7843:39:63;;;;:53;;;;:181;;-1:-1:-1;;;;;;7917:29:63;;7936:10;7917:29;;:106;;-1:-1:-1;;;;;;7970:33:63;;;;;;;:16;:33;;;;;:39;-1:-1:-1;;;7970:39:63;;;8013:10;7970:53;7917:106;7822:249;;;;-1:-1:-1;;;7822:249:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;35959:55:63;::::1;35907:49;35959:55:::0;;;:16:::1;:55;::::0;;;;36045:44:::1;::::0;::::1;:51:::0;:56;36024:125:::1;;;::::0;-1:-1:-1;;;36024:125:63;;21679:2:80;36024:125:63::1;::::0;::::1;21661:21:80::0;21718:2;21698:18;;;21691:30;-1:-1:-1;;;21737:18:80;;;21730:52;21799:18;;36024:125:63::1;21477:346:80::0;36024:125:63::1;36325:15;3508:8;36180:21;:43;;;:60;;;;:::i;:::-;:160;;36159:237;;;;-1:-1:-1::0;;;36159:237:63::1;;;;;;;:::i;:::-;36517:32:::0;;;36468:34;::::1;::::0;36425:28:::1;::::0;::::1;::::0;36407:15:::1;::::0;-1:-1:-1;;;;;36517:32:63;;::::1;::::0;36425:77:::1;::::0;36468:34;;::::1;::::0;36425:28:::1;:77;:::i;:::-;:124;;;;:::i;:::-;36407:142;;36573:15;-1:-1:-1::0;;;;;36564:35:63::1;-1:-1:-1::0;;;;;;;;;;;36590:8:63::1;36564:35;;;;;;:::i;:::-;;;;;;;;36625:28;::::0;::::1;::::0;;-1:-1:-1;;;;;;36663:32:63;;::::1;::::0;;;36625:28;36705:34;::::1;:38:::0;;;::::1;::::0;;36753:36;;;;::::1;::::0;;-1:-1:-1;;;;;36625:28:63::1;36799:50;36823:15:::0;36840:8;36799:23:::1;:50::i;:::-;-1:-1:-1::0;;;;;36864:10:63;::::1;::::0;36860:96:::1;;36909:27:::0;;36890:55:::1;::::0;-1:-1:-1;;;;;36890:5:63::1;:18:::0;::::1;::::0;-1:-1:-1;;;36909:27:63;::::1;;-1:-1:-1::0;;;;;36890:55:63;::::1;:18;:55::i;15122:518::-:0;-1:-1:-1;;;;;7843:33:63;;;7894:1;7843:33;;;:16;:33;;;;;:39;15247:15;;-1:-1:-1;;;7843:39:63;;;;:53;;;;:181;;-1:-1:-1;;;;;;7917:29:63;;7936:10;7917:29;;:106;;-1:-1:-1;;;;;;7970:33:63;;;;;;;:16;:33;;;;;:39;-1:-1:-1;;;7970:39:63;;;8013:10;7970:53;7917:106;7822:249;;;;-1:-1:-1;;;7822:249:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;15330:55:63;;::::1;15278:49;15330:55:::0;;;:16:::1;:55;::::0;;;;;15414:39;;-1:-1:-1;;;15414:39:63;;15330:55;;15414:9:::1;:22;::::0;::::1;::::0;:39:::1;::::0;15360:15;;15414:39:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15526:27:::0;;15469:116:::1;::::0;15395:58;;-1:-1:-1;;;;;;15469:116:63;;::::1;::::0;-1:-1:-1;;;15526:27:63;;::::1;::::0;::::1;::::0;15469:116;;::::1;::::0;::::1;::::0;15526:27:::1;::::0;15469:116:::1;15595:38:::0;;-1:-1:-1;;;;;15595:38:63;;::::1;-1:-1:-1::0;;;15595:38:63::1;-1:-1:-1::0;;;;;15595:38:63;;::::1;;::::0;;-1:-1:-1;;15122:518:63:o;26820:205::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;26941:20:::1;:30:::0;;;26986:32:::1;::::0;2547:25:80;;;26986:32:63::1;::::0;2535:2:80;2520:18;26986:32:63::1;2401:177:80::0;22881:919:63;23073:26;-1:-1:-1;;;;;23034:28:63;;;;;;:15;:28;;;;;:35;;;:65;;;;;;;;:::i;:::-;;23013:139;;;;-1:-1:-1;;;23013:139:63;;22030:2:80;23013:139:63;;;22012:21:80;22069:2;22049:18;;;22042:30;-1:-1:-1;;;22088:18:80;;;22081:57;22155:18;;23013:139:63;21828:351:80;23013:139:63;-1:-1:-1;;;;;23215:55:63;;;23163:49;23215:55;;;:16;:55;;;;;;;;23321:62;;;;;:49;;;:62;;;;;23413:24;;-1:-1:-1;;;;;23413:24:63;23455:14;23447:56;;;;-1:-1:-1;;;23447:56:63;;22386:2:80;23447:56:63;;;22368:21:80;22425:2;22405:18;;;22398:30;22464:31;22444:18;;;22437:59;22513:18;;23447:56:63;22184:353:80;23447:56:63;23513:28;;-1:-1:-1;;;;;;23551:31:63;;;23598:132;;-1:-1:-1;;;;;23598:132:63;;;;;;;;-1:-1:-1;;;;;;;;;;;23598:132:63;;;23695:10;;23540:1;;23598:132;:::i;:::-;;;;;;;;23740:53;23768:21;23791:1;23740:27;:53::i;44593:1035::-;44711:13;:20;44690:18;;:41;:54;;;;;44743:1;44735:5;:9;44690:54;44669:119;;;;-1:-1:-1;;;44669:119:63;;23057:2:80;44669:119:63;;;23039:21:80;23096:2;23076:18;;;23069:30;-1:-1:-1;;;23115:18:80;;;23108:48;23173:18;;44669:119:63;22855:342:80;44669:119:63;44799:16;44839:5;44818:18;;:26;;;;:::i;:::-;44799:45;;44865:51;44885:8;44895:13;:20;;;;44865:19;:51::i;:::-;44854:62;;44945:18;;44934:8;:29;;;;:::i;:::-;45024:18;;44926:37;;-1:-1:-1;44973:20:63;;45052:168;45067:8;45059:5;:16;45052:168;;;45100:30;45133:13;45147:5;45133:20;;;;;;;;:::i;:::-;;;;;;;;45100:53;;45184:25;45200:8;45184:15;:25::i;:::-;45167:42;;;;:::i;:::-;;;45086:134;45077:7;;;;;:::i;:::-;;;;45052:168;;;45229:18;:26;;;45266:24;45293:77;-1:-1:-1;;;;;45293:22:63;;3458:1;45293:30;:77::i;:::-;45266:104;;45417:27;:16;:25;:27::i;:::-;45401:43;;:13;:43;:::i;:::-;-1:-1:-1;;;;;45380:64:63;:17;;:64;;;;;;;:::i;:::-;;;;-1:-1:-1;;45459:54:63;;;23376:25:80;;;23432:2;23417:18;;23410:34;;;45477:10:63;;45459:54;;23349:18:80;45459:54:63;;;;;;;45527:20;;45523:99;;45563:48;-1:-1:-1;;;;;45563:5:63;:18;45582:10;45594:16;45563:18;:48::i;46037:154::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;46154:30:::1;46174:9;46154:19;:30::i;41900:195::-:0;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;42017:27:63;::::1;:18;:27:::0;42059:29:::1;::::0;::::1;::::0;::::1;::::0;42038:6;;42059:29:::1;:::i;30306:944::-:0;-1:-1:-1;;;;;7843:33:63;;;7894:1;7843:33;;;:16;:33;;;;;:39;30433:15;;-1:-1:-1;;;7843:39:63;;;;:53;;;;:181;;-1:-1:-1;;;;;;7917:29:63;;7936:10;7917:29;;:106;;-1:-1:-1;;;;;;7970:33:63;;;;;;;:16;:33;;;;;:39;-1:-1:-1;;;7970:39:63;;;8013:10;7970:53;7917:106;7822:249;;;;-1:-1:-1;;;7822:249:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;30516:55:63;::::1;30464:49;30516:55:::0;;;:16:::1;:55;::::0;;;;-1:-1:-1;;;;;30602:10:63;::::1;::::0;;;;:129:::1;;-1:-1:-1::0;30703:28:63::1;::::0;;::::1;::::0;-1:-1:-1;;;;;30703:28:63::1;::::0;30641:42:::1;::::0;30654:15;;30641:12:::1;:42::i;:::-;30632:51;::::0;:6;:51:::1;:::i;:::-;-1:-1:-1::0;;;;;30632:99:63::1;;;30602:129;30581:195;;;;-1:-1:-1::0;;;30581:195:63::1;;;;;;;:::i;:::-;30952:15;3508:8;30807:21;:43;;;:60;;;;:::i;:::-;:160;;30786:237;;;;-1:-1:-1::0;;;30786:237:63::1;;;;;;;:::i;:::-;31034:28;::::0;::::1;:38:::0;;31066:6;;31034:28;::::1;::::0;:38:::1;::::0;31066:6;;-1:-1:-1;;;;;31034:38:63::1;;:::i;:::-;;;;;;;;-1:-1:-1::0;;;;;31034:38:63::1;;;;;-1:-1:-1::0;;;;;31034:38:63::1;;;;;;31082:48;31106:15;31123:6;31082:23;:48::i;:::-;31154:15;-1:-1:-1::0;;;;;31145:33:63::1;-1:-1:-1::0;;;;;;;;;;;31171:6:63::1;31145:33;;;;;;:::i;:::-;;;;;;;;31207:27:::0;;31188:55:::1;::::0;-1:-1:-1;;;;;31188:5:63::1;:18:::0;::::1;::::0;-1:-1:-1;;;31207:27:63;::::1;;-1:-1:-1::0;;;;;31188:55:63;::::1;:18;:55::i;4773:29::-:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4773:29:63;;-1:-1:-1;4773:29:63;:::o;16816:694::-;7143:10;;-1:-1:-1;;;;;7143:10:63;7157;7143:24;7135:65;;;;-1:-1:-1;;;7135:65:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;16944:25:63;::::1;16936:66;;;;-1:-1:-1::0;;;16936:66:63::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;17043:28:63;::::1;17012;17043::::0;;;:15:::1;:28;::::0;;;;;17102:11;;::::1;;:45;::::0;::::1;;;;;;:::i;:::-;;:104;;;-1:-1:-1::0;17182:24:63::1;17167:11:::0;;::::1;;:39;::::0;::::1;;;;;;:::i;:::-;;17102:104;17081:176;;;::::0;-1:-1:-1;;;17081:176:63;;23657:2:80;17081:176:63::1;::::0;::::1;23639:21:80::0;23696:2;23676:18;;;23669:30;-1:-1:-1;;;23715:18:80;;;23708:55;23780:18;;17081:176:63::1;23455:349:80::0;17081:176:63::1;17287:30;17272:11:::0;;::::1;;:45;::::0;::::1;;;;;;:::i;:::-;;17268:106;;;17333:12;:30:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;17333:30:63;;;;;::::1;::::0;;-1:-1:-1;;;;;;17333:30:63::1;-1:-1:-1::0;;;;;17333:30:63;::::1;;::::0;;17268:106:::1;17383:40:::0;;-1:-1:-1;;17383:40:63::1;17397:26;17383:40:::0;;::::1;::::0;;17438:65:::1;::::0;28110:673;-1:-1:-1;;;;;7843:33:63;;;7894:1;7843:33;;;:16;:33;;;;;:39;28223:15;;-1:-1:-1;;;7843:39:63;;;;:53;;;;:181;;-1:-1:-1;;;;;;7917:29:63;;7936:10;7917:29;;:106;;-1:-1:-1;;;;;;7970:33:63;;;;;;;:16;:33;;;;;:39;-1:-1:-1;;;7970:39:63;;;8013:10;7970:53;7917:106;7822:249;;;;-1:-1:-1;;;7822:249:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;28306:55:63;::::1;28254:49;28306:55:::0;;;:16:::1;:55;::::0;;;;;28388:33:::1;28336:15:::0;28388:16:::1;:33::i;:::-;28462:34;::::0;::::1;::::0;28371:50;;-1:-1:-1;;;;;;28462:34:63;;::::1;28452:44:::0;;::::1;;28431:108;;;;-1:-1:-1::0;;;28431:108:63::1;;;;;;;:::i;:::-;28578:34;::::0;::::1;::::0;28550:15:::1;::::0;28568:44:::1;::::0;-1:-1:-1;;;;;28578:34:63::1;28568:7:::0;:44:::1;:::i;:::-;28550:62;;28636:15;-1:-1:-1::0;;;;;28627:35:63::1;-1:-1:-1::0;;;;;;;;;;;28653:8:63::1;28627:35;;;;;;:::i;:::-;;;;;;;;28672:34;::::0;::::1;:44:::0;;-1:-1:-1;;;;;;28672:44:63::1;-1:-1:-1::0;;;;;28672:44:63;::::1;;::::0;;28726:50:::1;28750:15:::0;28767:8;28726:23:::1;:50::i;43429:169::-:0;43543:48;43550:6;43558:1;43569;43573:17;43543:6;:48::i;2910:314:51:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;3130:21:51;;3066:16;3130:21;;;:12;:21;;;;;:26;;3066:16;;3100:66;;3130:26;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3130:26:51;10872:35;;;;;;;11213:232;3100:66;3189:28;;;;;;;;;;;;;;;-1:-1:-1;;;;;3189:28:51;;;;;;2910:314;-1:-1:-1;;;;;2910:314:51:o;4809:36:63:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4809:36:63;;;-1:-1:-1;;;;4809:36:63;;-1:-1:-1;;;;;4809:36:63;;:::o;17912:1628::-;-1:-1:-1;;;;;7574:33:63;;;;;;;:16;:33;;;;;:44;;;18069:15;;-1:-1:-1;;;7574:44:63;;;;7622:10;7574:58;7553:119;;;;-1:-1:-1;;;7553:119:63;;;;;;;:::i;:::-;-1:-1:-1;;;;;18140:50:63;::::1;18096:41;18140:50:::0;;;:15:::1;:50;::::0;;;;18249:26:::1;18221:24:::0;;::::1;;:54;::::0;::::1;;;;;;:::i;:::-;;18200:128;;;;-1:-1:-1::0;;;18200:128:63::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;18391:55:63;;::::1;18339:49;18391:55:::0;;;:16:::1;:55;::::0;;;;;;;18497:62;;::::1;::::0;;:49:::1;::::0;::::1;:62:::0;;;;;18589:24;;-1:-1:-1;;;;;18589:24:63::1;18627:15:::0;18623:345:::1;;18683:20;::::0;:25;;:143:::1;;-1:-1:-1::0;18806:20:63::1;::::0;18732:44:::1;::::0;::::1;:51:::0;:94:::1;18683:143;18658:223;;;::::0;-1:-1:-1;;;18658:223:63;;24011:2:80;18658:223:63::1;::::0;::::1;23993:21:80::0;24050:2;24030:18;;;24023:30;-1:-1:-1;;;24069:18:80;;;24062:51;24130:18;;18658:223:63::1;23809:345:80::0;18658:223:63::1;18895:44;::::0;::::1;:62:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;18895:62:63;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;;;;18895:62:63::1;-1:-1:-1::0;;;;;18895:62:63;::::1;;::::0;;18623:345:::1;18978:22;19003:87;19040:15;19069:11;19003:23;:87::i;:::-;18978:112;;19127:6;-1:-1:-1::0;;;;;19108:25:63::1;:15;-1:-1:-1::0;;;;;19108:25:63::1;;;19100:67;;;::::0;-1:-1:-1;;;19100:67:63;;24361:2:80;19100:67:63::1;::::0;::::1;24343:21:80::0;24400:2;24380:18;;;24373:30;24439:31;24419:18;;;24412:59;24488:18;;19100:67:63::1;24159:353:80::0;19100:67:63::1;19177:34:::0;;19205:6;;19177:13;;:24:::1;::::0;:34:::1;::::0;19205:6;;-1:-1:-1;;;;;19177:34:63::1;;:::i;:::-;;;;;;;;-1:-1:-1::0;;;;;19177:34:63::1;;;;;-1:-1:-1::0;;;;;19177:34:63::1;;;;;;19291:11;-1:-1:-1::0;;;;;19226:148:63::1;19262:15;-1:-1:-1::0;;;;;19226:148:63::1;;19316:10;19340:13;:24;;;;;;;;;;-1:-1:-1::0;;;;;19340:24:63::1;19226:148;;;;;;;:::i;:::-;;;;;;;;19499:24:::0;;19384:149:::1;::::0;-1:-1:-1;;;19384:149:63;;-1:-1:-1;;;;;19384:48:63;::::1;::::0;::::1;::::0;:149:::1;::::0;19446:15;;19475:10;;-1:-1:-1;;;;;19499:24:63::1;::::0;19384:149:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;18086:1454;;;;;17912:1628:::0;;;;:::o;1186:320:3:-;-1:-1:-1;;;;;1476:19:3;;:23;;;1186:320::o;54752:777:63:-;-1:-1:-1;;;;;54930:55:63;;;54878:49;54930:55;;;:16;:55;;;;;55016:27;;54930:55;;-1:-1:-1;;;55016:27:63;;;;55047:10;55016:41;54995:107;;;;-1:-1:-1;;;54995:107:63;;24719:2:80;54995:107:63;;;24701:21:80;24758:2;24738:18;;;24731:30;-1:-1:-1;;;24777:18:80;;;24770:49;24836:18;;54995:107:63;24517:343:80;54995:107:63;55236:32;;;55187:34;;;55144:28;;;;55112:29;;-1:-1:-1;;;;;55236:32:63;;;;55144:77;;55187:34;;;;55144:28;:77;:::i;:::-;:124;;;;:::i;:::-;55112:156;;55278:20;55301:26;55311:15;55301:9;:26::i;:::-;-1:-1:-1;;;;;55337:27:63;;;;;;;:10;:27;;;;;;:39;;-1:-1:-1;;;;;;55337:39:63;;;;;;;;;;55391:57;;55278:49;;-1:-1:-1;55337:39:63;55391:57;;;;;;55337:27;55391:57;55458:64;55474:12;55488:9;55499:22;-1:-1:-1;;;;;55458:64:63;:15;:64::i;67511:152::-;67611:45;67630:10;67642:7;67651:4;67611:18;:45::i;2107:287:78:-;2240:147;2317:5;2338:4;2356:2;2372:5;2240:37;:147::i;8353:1680:51:-;8472:6;9562:12;9548:11;:26;9540:63;;;;-1:-1:-1;;;9540:63:51;;25067:2:80;9540:63:51;;;25049:21:80;25106:2;25086:18;;;25079:30;-1:-1:-1;;;25125:18:80;;;25118:54;25189:18;;9540:63:51;24865:348:80;9540:63:51;9629:12;;9614;9676:289;9689:4;9683:3;:10;9676:289;;;9709:11;9723:34;9747:3;9752:4;9723:23;:34::i;:::-;9709:48;;9771:15;9789:29;9807:5;9813:3;9807:10;;;;;;;;:::i;:::-;;;;;;;;;;;;;;10872:35;9807:10;;;;;;;;;;10872:35;;;;10749:165;9789:29;9771:47;;9847:11;9836:8;:22;;;9832:123;;;9885:3;9878:10;;9832:123;;;9933:7;:3;9939:1;9933:7;:::i;:::-;9927:13;;9832:123;9695:270;;9676:289;;;9982:9;;:44;;9998:28;10010:5;10016:8;10023:1;10016:4;:8;:::i;9998:28::-;9982:44;;;-1:-1:-1;9994:1:51;;8353:1680;-1:-1:-1;;;;8353:1680:51:o;69470:330:63:-;69568:14;;69629:27;3642:12;69629:6;:27;:::i;:::-;69617:39;-1:-1:-1;69666:25:63;69694:18;69617:39;69694:6;:18;:::i;:::-;69666:46;-1:-1:-1;69732:61:63;3642:12;69734:25;69754:5;69666:46;69734:25;:::i;:::-;69733:48;;;;:::i;:::-;69732:59;:61::i;:::-;69722:71;;69607:193;69470:330;;;;;:::o;62444:1169::-;62666:34;;;;62644:6;;-1:-1:-1;;;;;62666:34:63;62662:91;;-1:-1:-1;62728:14:63;62721:21;;62662:91;62810:34;;;;62763:15;;-1:-1:-1;;;;;62810:34:63;;;62792:52;;;;62788:184;;-1:-1:-1;62871:14:63;62788:184;;;-1:-1:-1;62927:34:63;;;;-1:-1:-1;;;;;62927:34:63;62788:184;62983:19;63004:17;63025:67;63051:8;63073:9;63025:12;:67::i;:::-;62982:110;;;;63106:11;63121:1;63106:16;63102:68;;;63145:14;63138:21;;;;;;;63102:68;63179:22;63191:10;63179:22;;:::i;:::-;63211:34;;;:46;;63179:22;;-1:-1:-1;63179:22:63;;63211:34;;:46;;63179:22;;-1:-1:-1;;;;;63211:46:63;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;63211:46:63;;;;;-1:-1:-1;;;;;63211:46:63;;;;;;63285:8;63267:26;;;;;:::i;:::-;63346:16;;;63360:1;63346:16;;;;;;;;;63267:26;;-1:-1:-1;63304:39:63;;63346:16;;;;;;;;;;;;-1:-1:-1;63346:16:63;63304:58;;63400:15;63372:22;63395:1;63372:25;;;;;;;;:::i;:::-;-1:-1:-1;;;;;63372:43:63;;;:25;;;;;;;;;:43;63425:150;;-1:-1:-1;;;63425:150:63;;:19;:25;;;;;;:150;;63464:11;;63489:16;;63519:10;;63543:22;;63425:150;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;63592:14:63;;62444:1169;-1:-1:-1;;;;;;;;;;;62444:1169:63:o;67867:153::-;67967:46;67986:10;67998:7;68007:5;67967:18;:46::i;60042:2175::-;60330:34;;;;60283:32;;60240:28;;;;60220:17;;-1:-1:-1;;;;;60330:34:63;;;;60240:75;;60283:32;;;;60240:28;:75;:::i;:::-;:124;;;;:::i;:::-;60220:144;;60374:28;60434:9;60416:1613;60465:44;;;:51;60461:55;;60416:1613;;;60558:29;60590:21;:61;;60652:1;60590:64;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;60590:64:63;60709:76;;;:53;;;:76;;;;;;;60819:24;;60590:64;;-1:-1:-1;60709:76:63;-1:-1:-1;;;;;60819:24:63;;;;60886:91;;:63;;60819:24;;60886:63;;:36;:63::i;:91::-;60858:119;;:13;;:24;;:119;;;;-1:-1:-1;;;;;60858:119:63;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;60858:119:63;;;;;;;;;;;;;;;60996:24;;:37;;;:24;;:37;60992:113;;-1:-1:-1;60992:113:63;;61053:37;;-1:-1:-1;;;;;;61053:37:63;-1:-1:-1;;;;;61053:37:63;;;;;60992:113;61422:24;;61226:221;;-1:-1:-1;;;61226:221:63;;61137:4;;-1:-1:-1;;;;;61226:89:63;;;;;3583:6;;61226:221;;61393:15;;61410:10;;-1:-1:-1;;;;;61422:24:63;;61226:221;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;61206:314;;-1:-1:-1;61500:5:63;61206:314;61567:24;;-1:-1:-1;;;;;61567:24:63;;;-1:-1:-1;;;61537:27:63;;;;:54;61533:147;;;61641:24;;-1:-1:-1;;;;;;;;61641:24:63;;61611:54;-1:-1:-1;;;;;;;;61611:54:63;;;;;;61533:147;61849:24;;61698:217;;;;;;-1:-1:-1;;;;;61698:217:63;;;;;;;;;;;;61821:10;;-1:-1:-1;;;;;61849:24:63;;;;61698:217;:::i;:::-;;;;;;;;61933:24;;-1:-1:-1;;;;;61933:24:63;61929:90;;61982:22;;;;:::i;:::-;;;;61929:90;60544:1485;;;;60530:3;;;;;:::i;:::-;;;;60416:1613;;;-1:-1:-1;62042:24:63;;62038:173;;62082:118;62127:21;62166:20;62082:27;:118::i;69998:368::-;70098:14;;70206:28;70207:15;70217:5;-1:-1:-1;;;;;70207:15:63;;;:::i;70206:28::-;70193:41;-1:-1:-1;70244:25:63;70272:20;70193:41;70272:7;:20;:::i;:::-;-1:-1:-1;;;;;70244:48:63;;-1:-1:-1;70354:5:63;70312:38;3642:12;70244:48;70312:38;:::i;:::-;70311:48;;;;:::i;68204:340::-;68302:6;68324:21;68348:23;-1:-1:-1;;;;;68348:36:63;;68398:5;68417:15;68348:94;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;68324:118;;68453:14;68473:40;68484:13;68499;68473:10;:40::i;:::-;-1:-1:-1;68452:61:63;68204:340;-1:-1:-1;;;;;68204:340:63:o;68934:345::-;69032:6;69054:23;69080:19;-1:-1:-1;;;;;69080:33:63;;69127:15;69164:4;69080:99;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;69054:125;;69190:14;69210:38;69221:15;69238:9;69210:10;:38::i;:::-;-1:-1:-1;69189:59:63;68934:345;-1:-1:-1;;;;68934:345:63:o;1862:239:78:-;1969:125;2042:5;2063:2;2079:5;1969:33;:125::i;296:105:4:-;354:7;385:1;380;:6;;:14;;393:1;380:14;;;-1:-1:-1;389:1:4;;296:105;-1:-1:-1;296:105:4:o;472:104::-;530:7;560:1;556;:5;:13;;568:1;556:13;;2108:187:5;2164:6;-1:-1:-1;;;;;2190:25:5;;;2182:76;;;;-1:-1:-1;;;2182:76:5;;27185:2:80;2182:76:5;;;27167:21:80;27224:2;27204:18;;;27197:30;27263:34;27243:18;;;27236:62;-1:-1:-1;;;27314:18:80;;;27307:36;27360:19;;2182:76:5;26983:402:80;2182:76:5;-1:-1:-1;2282:5:5;2108:187::o;3056:::-;3112:6;3147:16;3138:25;;;3130:76;;;;-1:-1:-1;;;3130:76:5;;27592:2:80;3130:76:5;;;27574:21:80;27631:2;27611:18;;;27604:30;27670:34;27650:18;;;27643:62;-1:-1:-1;;;27721:18:80;;;27714:36;27767:19;;3130:76:5;27390:402:80;65098:1238:63;65268:44;;;:51;65333:24;;;65329:126;;;65373:51;65380:44;;;;65373:51;:::i;65329:126::-;65465:15;;;65541:23;65550:14;65541:6;:23;:::i;:::-;65521:43;;65574:622;65589:9;65581:5;:17;:45;;;;;65612:14;65602:7;:24;65581:45;65574:622;;;65642:19;65664:21;:44;;65726:5;65664:81;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;65664:81:63;65780:49;;;:36;;;:49;;;;;;;:60;65664:81;;-1:-1:-1;;;;;;65780:60:63;65759:427;;65994:44;;;66079:1;66060:16;66069:7;66060:6;:16;:::i;:::-;:20;;;;:::i;:::-;65994:104;;;;;;;;:::i;:::-;;;;;;;;;;;65894:44;;;:97;;-1:-1:-1;;;;;65994:104:63;;;;65964:5;;65894:97;;;;;;:::i;:::-;;;;;;;;;;:204;;-1:-1:-1;;;;;;65894:204:63;-1:-1:-1;;;;;65894:204:63;;;;;;;;;;66116:9;;;;:::i;:::-;;;;65759:427;;;66164:7;;;;:::i;:::-;;;;65759:427;65628:568;65574:622;;;66219:9;66211:17;;66206:124;66238:6;66230:5;:14;66206:124;;;66269:21;:44;;:50;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;66269:50:63;;;;;-1:-1:-1;;;;;;66269:50:63;;;;;;66246:7;;;;:::i;:::-;;;;66206:124;;3037:123:0;3085:4;3109:44;3147:4;3109:29;:44::i;:::-;3108:45;3101:52;;3037:123;:::o;68550:202:63:-;68645:10;;;-1:-1:-1;;;;;68665:22:63;;;-1:-1:-1;;;;;;68665:22:63;;;;;;68702:43;;68645:10;;;68702:43;;;;68645:10;;68678:9;;68702:43;:::i;55836:1664::-;56034:1;56025:6;-1:-1:-1;;;;;56025:10:63;;:42;;;;;56066:1;56039:17;:24;:28;56025:42;56004:117;;;;-1:-1:-1;;;56004:117:63;;;;;;;:::i;:::-;56192:10;56132:41;56176:27;;;:15;:27;;;;;56262:26;56234:24;;;;:54;;;;;;;;:::i;:::-;;56213:128;;;;-1:-1:-1;;;56213:128:63;;;;;;;:::i;:::-;56374:13;:20;56352:19;56404:643;56428:17;:24;56424:1;:28;56404:643;;;56473:23;56499:17;56517:1;56499:20;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;56594:33:63;;56533:21;56594:33;;;:16;:33;;;;;;56664:10;56594:81;;:69;;:81;;;;;;:113;56499:20;;-1:-1:-1;56557:188:63;;-1:-1:-1;;;;;56594:113:63;;;;56557:188;;:19;:188::i;:::-;56533:212;-1:-1:-1;56843:18:63;56759:158;;56894:8;;;;56759:158;56930:13;56966:56;;;;;;;;56980:15;-1:-1:-1;;;;;56966:56:63;;;;;56997:24;:13;:22;:24::i;:::-;-1:-1:-1;;;;;56966:56:63;;;;;;56930:106;;;;;;;-1:-1:-1;56930:106:63;;;;;;;;;;;;;;;;;;-1:-1:-1;;;56930:106:63;-1:-1:-1;;;;;56930:106:63;;;;;;;;;;-1:-1:-1;;56404:643:63;56454:3;;;;:::i;:::-;;;;56404:643;;;-1:-1:-1;;;;;;57061:22:63;;;57057:437;;57099:14;57116:101;57200:16;57172:18;;57141:11;57118:13;:20;;;;:34;;;;:::i;:::-;57117:73;;;;:::i;:::-;57116:83;;:101::i;:::-;57099:118;;57240:46;57260:6;57268:17;;57240:19;:46::i;:::-;57231:55;;57322:8;-1:-1:-1;;;;;57305:34:63;;57332:6;57305:34;;;;2547:25:80;;2535:2;2520:18;;2401:177;57305:34:63;;;;;;;;57357:11;;57353:131;;57409:6;57388:17;;:27;;;;;;;:::i;:::-;;;;-1:-1:-1;57433:36:63;;-1:-1:-1;;;;;;57433:5:63;:18;57452:8;57462:6;57433:18;:36::i;63852:1129::-;64039:32;;64017:6;;-1:-1:-1;;;;;64039:32:63;64035:89;;-1:-1:-1;64099:14:63;64092:21;;64035:89;64181:32;;64134:15;;-1:-1:-1;;;;;64181:32:63;;;64163:50;;;;64159:180;;-1:-1:-1;64240:14:63;64159:180;;;-1:-1:-1;64296:32:63;;-1:-1:-1;;;;;64296:32:63;64159:180;64350:17;64369;64390:71;64416:8;64438:13;64390:12;:71::i;:::-;64349:112;;;;64475:9;64488:1;64475:14;64471:66;;;64512:14;64505:21;;;;;;;64471:66;64546:22;64558:10;64546:22;;:::i;:::-;64578:44;;64546:22;;-1:-1:-1;64546:22:63;;64578:21;;:32;;:44;;64546:22;;-1:-1:-1;;;;;64578:44:63;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;64578:44:63;;;;;-1:-1:-1;;;;;64578:44:63;;;;;;64650:8;64632:26;;;;;:::i;:::-;;-1:-1:-1;64669:16:63;64688:90;64752:16;64688:42;:9;3458:1;64688:17;:42::i;:90::-;64837:27;;64788:155;;-1:-1:-1;;;64788:155:63;;-1:-1:-1;;;;;;;;64837:27:63;;;;;64788:155;;;28198:34:80;28248:18;;;28241:34;;;64901:10:63;28291:18:80;;;28284:43;28343:18;;;28336:34;;;;;-1:-1:-1;64788:23:63;:35;;;;28132:19:80;;64788:155:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;64960:14:63;;63852:1129;-1:-1:-1;;;;;;;;;;63852:1129:63:o;57719:2241::-;57928:24;;-1:-1:-1;;;;;57928:24:63;;57810:20;57898:64;;;:16;:64;;;;;58131:32;;57928:24;58082:34;;;58039:28;;;;57810:20;;57898:64;;-1:-1:-1;;;;;;;;57996:15:63;;;;;;57810:20;;58131:32;;;58039:77;;58082:34;;;;58039:28;:77;:::i;:::-;:124;;;;:::i;:::-;58196:28;;;;58021:142;;-1:-1:-1;;;;;;58196:28:63;:32;58192:364;;58266:28;;;;-1:-1:-1;;;;;58266:28:63;;;58248:46;;;;58244:198;;58330:14;58314:30;;58244:198;;;58399:28;;;;-1:-1:-1;;;;;58399:28:63;;-1:-1:-1;58244:198:63;58455:28;;;:45;;58487:13;;58455:28;;;:45;;58487:13;;-1:-1:-1;;;;;58455:45:63;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;58455:45:63;;;;;-1:-1:-1;;;;;58455:45:63;;;;;;58532:13;58514:31;;;;;:::i;:::-;;;58192:364;58609:1;58592:14;-1:-1:-1;;;;;58592:18:63;;:60;;;;-1:-1:-1;58614:34:63;;;;-1:-1:-1;;;;;58614:34:63;:38;;58592:60;58588:523;;;58755:24;;58700:80;;-1:-1:-1;;;58700:80:63;;58669:23;;-1:-1:-1;;;;;58700:19:63;:54;;;;;:80;;58755:24;;58700:80;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;58668:112;;;;58795:14;58815:38;58826:15;58843:9;58815:10;:38::i;:::-;-1:-1:-1;58867:34:63;;;:44;;-1:-1:-1;;;;;;58867:44:63;-1:-1:-1;;;;;58867:44:63;;;;;59009:24;;58867:44;;-1:-1:-1;58943:157:63;;58867:34;;-1:-1:-1;;;;;59009:24:63;59051:14;59083:3;58943:9;:157::i;:::-;58926:174;;58654:457;;58588:523;59162:1;59145:14;-1:-1:-1;;;;;59145:18:63;;:58;;;;-1:-1:-1;59167:32:63;;-1:-1:-1;;;;;59167:32:63;:36;;59145:58;59141:299;;;59316:113;59341:21;59380:14;59412:3;59316:7;:113::i;:::-;59299:130;;59141:299;59473:15;;59450:20;;59473:32;;59491:14;;-1:-1:-1;;;59473:15:63;;-1:-1:-1;;;;;59473:15:63;:32;:::i;:::-;59533:24;;59520:60;;59450:55;;-1:-1:-1;59574:5:63;;-1:-1:-1;;;;;59533:24:63;;;;-1:-1:-1;;;;;;;;;;;59520:60:63;;;59450:55;;59520:60;:::i;:::-;;;;;;;;59625:24;;59590:131;;-1:-1:-1;;;;;59625:24:63;59663:21;59698:13;59590:21;:131::i;:::-;59841:32;;;59792:34;;;59749:28;;;;59731:15;;-1:-1:-1;;;;;59841:32:63;;;;59749:77;;59792:34;;;;59749:28;:77;:::i;:::-;:124;;;;:::i;:::-;59907:24;;59731:142;;-1:-1:-1;59883:70:63;;-1:-1:-1;;;;;59907:24:63;59933:19;59731:142;59933:8;:19;:::i;59883:70::-;57836:2124;;;;;57719:2241;;;:::o;1117:108:77:-;1179:7;1215:3;1206:5;1210:1;1206;:5;:::i;:::-;1205:13;;;;:::i;5622:1032:51:-;5749:3;-1:-1:-1;;;;;5742:10:51;:3;-1:-1:-1;;;;;5742:10:51;;;:24;;;;;5765:1;5756:6;:10;5742:24;5738:910;;;-1:-1:-1;;;;;5786:17:51;;;5782:421;;-1:-1:-1;;;;;6025:17:51;;5948;6025;;;:12;:17;;;;;5948;;5988:130;;6064:8;6094:6;5988:15;:130::i;:::-;5947:171;;;;6162:3;-1:-1:-1;;;;;6141:47:51;-1:-1:-1;;;;;;;;;;;6167:9:51;6178;6141:47;;;;;;23376:25:80;;;23432:2;23417:18;;23410:34;23364:2;23349:18;;23202:248;6141:47:51;;;;;;;;5805:398;;5782:421;-1:-1:-1;;;;;6221:17:51;;;6217:421;;-1:-1:-1;;;;;6465:17:51;;6388;6465;;;:12;:17;;;;;6388;;6428:125;;6504:3;6529:6;6428:15;:125::i;:::-;6387:166;;;;6597:3;-1:-1:-1;;;;;6576:47:51;-1:-1:-1;;;;;;;;;;;6602:9:51;6613;6576:47;;;;;;23376:25:80;;;23432:2;23417:18;;23410:34;23364:2;23349:18;;23202:248;66619:680:63;-1:-1:-1;;;;;66751:12:63;;66747:49;;66619:680;;;:::o;66747:49::-;66805:122;66834:23;66871:8;:25;;66888:8;66871:25;;;66882:3;66871:25;66910:7;-1:-1:-1;;;;;66805:122:63;:15;:122::i;:::-;;;66937:17;66957:21;66967:10;66957:9;:21::i;:::-;66937:41;-1:-1:-1;;;;;;66992:23:63;;;66988:305;;-1:-1:-1;;;;;67105:23:63;;67032:17;67105:23;;;:12;:23;;;;;67032:17;;67072:138;;67146:8;:25;;67163:8;67146:25;;;67157:3;67146:25;67189:7;-1:-1:-1;;;;;67072:138:63;:15;:138::i;:::-;67031:179;;;;67250:9;-1:-1:-1;;;;;67229:53:63;-1:-1:-1;;;;;;;;;;;67261:9:63;67272;67229:53;;;;;;23376:25:80;;;23432:2;23417:18;;23410:34;23364:2;23349:18;;23202:248;67229:53:63;;;;;;;;67017:276;;66737:562;66619:680;;;:::o;967:252:2:-;1143:68;;-1:-1:-1;;;;;28639:15:80;;;1143:68:2;;;28621:34:80;28691:15;;28671:18;;;28664:43;28723:18;;;28716:34;;;1116:96:2;;1136:5;;-1:-1:-1;;;1166:27:2;28556:18:80;;1143:68:2;;;;-1:-1:-1;;1143:68:2;;;;;;;;;;;;;;-1:-1:-1;;;;;1143:68:2;-1:-1:-1;;;;;;1143:68:2;;;;;;;;;;1116:19;:96::i;689:153:4:-;751:7;824:11;834:1;825:5;;;824:11;:::i;:::-;814:21;;815:5;;;814:21;:::i;745:216:2:-;895:58;;-1:-1:-1;;;;;28953:32:80;;895:58:2;;;28935:51:80;29002:18;;;28995:34;;;868:86:2;;888:5;;-1:-1:-1;;;918:23:2;28908:18:80;;895:58:2;28761:274:80;11639:101:51;11702:7;11728:5;11732:1;11728;:5;:::i;7180:973::-;7409:12;;7347:17;;;;7443:8;;:42;;7458:27;7470:5;7476:7;7482:1;7476:3;:7;:::i;7458:27::-;7443:42;;;7454:1;7443:42;-1:-1:-1;;;;;7431:54:51;;;7507:20;7510:9;7521:5;7507:2;:20;;:::i;:::-;7495:32;-1:-1:-1;7542:7:51;;7538:417;;7565:16;7584:33;7602:5;7608:7;7614:1;7608:3;:7;:::i;:::-;7602:14;;;;;;;;:::i;7584:33::-;7565:52;;7708:12;7695:9;:25;;;7691:254;;;7757:126;7795:9;7826:39;7855:9;7826:28;:39::i;:::-;-1:-1:-1;;;;;10652:14:51;10646:2;10622:26;;;;-1:-1:-1;;;10622:26:51;10621:45;;10484:189;7757:126;7740:5;7746:7;7752:1;7746:3;:7;:::i;:::-;7740:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:143;;;;;-1:-1:-1;;;;;7740:143:51;;;;;-1:-1:-1;;;;;7740:143:51;;;;;;7901:29;;;;7691:254;7551:404;7538:417;7965:5;7989:147;8023:42;8052:12;8023:28;:42::i;:::-;8083:39;8112:9;8083:28;:39::i;7989:147::-;7965:181;;;;;;;;-1:-1:-1;7965:181:51;;;;;;;;;;;;;-1:-1:-1;;;;;7965:181:51;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7180:973:51;;;;;;;:::o;11494:96::-;11552:7;11578:5;11582:1;11578;:5;:::i;3306:717:2:-;3736:23;3762:69;3790:4;3762:69;;;;;;;;;;;;;;;;;3770:5;-1:-1:-1;;;;;3762:27:2;;;:69;;;;;:::i;:::-;3845:17;;3736:95;;-1:-1:-1;3845:21:2;3841:176;;3940:10;3929:30;;;;;;;;;;;;:::i;:::-;3921:85;;;;-1:-1:-1;;;3921:85:2;;29524:2:80;3921:85:2;;;29506:21:80;29563:2;29543:18;;;29536:30;29602:34;29582:18;;;29575:62;-1:-1:-1;;;29653:18:80;;;29646:40;29703:19;;3921:85:2;29322:406:80;3872:223:3;4005:12;4036:52;4058:6;4066:4;4072:1;4075:12;4005;5247:18;5258:6;5247:10;:18::i;:::-;5239:60;;;;-1:-1:-1;;;5239:60:3;;30342:2:80;5239:60:3;;;30324:21:80;30381:2;30361:18;;;30354:30;30420:31;30400:18;;;30393:59;30469:18;;5239:60:3;30140:353:80;5239:60:3;5311:12;5325:23;5352:6;-1:-1:-1;;;;;5352:11:3;5371:5;5378:4;5352:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5310:73;;;;5400:51;5417:7;5426:10;5438:12;5400:16;:51::i;:::-;5393:58;4959:499;-1:-1:-1;;;;;;;4959:499:3:o;6622:692::-;6768:12;6796:7;6792:516;;;-1:-1:-1;6826:10:3;6819:17;;6792:516;6937:17;;:21;6933:365;;7131:10;7125:17;7191:15;7178:10;7174:2;7170:19;7163:44;6933:365;7270:12;7263:20;;-1:-1:-1;;;7263:20:3;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:131:80;-1:-1:-1;;;;;89:31:80;;79:42;;69:70;;135:1;132;125:12;150:134;218:20;;247:31;218:20;247:31;:::i;:::-;150:134;;;:::o;289:247::-;348:6;401:2;389:9;380:7;376:23;372:32;369:52;;;417:1;414;407:12;369:52;456:9;443:23;475:31;500:5;475:31;:::i;541:127::-;602:10;597:3;593:20;590:1;583:31;633:4;630:1;623:15;657:4;654:1;647:15;673:448;856:2;841:18;;889:1;878:13;;868:144;;934:10;929:3;925:20;922:1;915:31;969:4;966:1;959:15;997:4;994:1;987:15;868:144;1021:25;;;-1:-1:-1;;;;;1082:32:80;;;;1077:2;1062:18;;;1055:60;673:448;:::o;1126:388::-;1194:6;1202;1255:2;1243:9;1234:7;1230:23;1226:32;1223:52;;;1271:1;1268;1261:12;1223:52;1310:9;1297:23;1329:31;1354:5;1329:31;:::i;:::-;1379:5;-1:-1:-1;1436:2:80;1421:18;;1408:32;1449:33;1408:32;1449:33;:::i;:::-;1501:7;1491:17;;;1126:388;;;;;:::o;1901:171::-;1968:20;;-1:-1:-1;;;;;2017:30:80;;2007:41;;1997:69;;2062:1;2059;2052:12;2077:319;2144:6;2152;2205:2;2193:9;2184:7;2180:23;2176:32;2173:52;;;2221:1;2218;2211:12;2173:52;2260:9;2247:23;2279:31;2304:5;2279:31;:::i;:::-;2329:5;-1:-1:-1;2353:37:80;2386:2;2371:18;;2353:37;:::i;:::-;2343:47;;2077:319;;;;;:::o;2988:200::-;-1:-1:-1;;;;;3150:31:80;;;;3132:50;;3120:2;3105:18;;2988:200::o;3193:315::-;3261:6;3269;3322:2;3310:9;3301:7;3297:23;3293:32;3290:52;;;3338:1;3335;3328:12;3290:52;3377:9;3364:23;3396:31;3421:5;3396:31;:::i;:::-;3446:5;3498:2;3483:18;;;;3470:32;;-1:-1:-1;;;3193:315:80:o;3513:184::-;3571:6;3624:2;3612:9;3603:7;3599:23;3595:32;3592:52;;;3640:1;3637;3630:12;3592:52;3663:28;3681:9;3663:28;:::i;3702:203::-;-1:-1:-1;;;;;3866:32:80;;;;3848:51;;3836:2;3821:18;;3702:203::o;3910:610::-;4003:6;4011;4019;4027;4080:3;4068:9;4059:7;4055:23;4051:33;4048:53;;;4097:1;4094;4087:12;4048:53;4136:9;4123:23;4155:31;4180:5;4155:31;:::i;:::-;4205:5;-1:-1:-1;4262:2:80;4247:18;;4234:32;4275:33;4234:32;4275:33;:::i;:::-;4327:7;-1:-1:-1;4386:2:80;4371:18;;4358:32;4399:33;4358:32;4399:33;:::i;:::-;4451:7;-1:-1:-1;4477:37:80;4510:2;4495:18;;4477:37;:::i;:::-;4467:47;;3910:610;;;;;;;:::o;4525:460::-;4601:6;4609;4617;4670:2;4658:9;4649:7;4645:23;4641:32;4638:52;;;4686:1;4683;4676:12;4638:52;4725:9;4712:23;4744:31;4769:5;4744:31;:::i;:::-;4794:5;-1:-1:-1;4851:2:80;4836:18;;4823:32;4864:33;4823:32;4864:33;:::i;:::-;4916:7;-1:-1:-1;4942:37:80;4975:2;4960:18;;4942:37;:::i;:::-;4932:47;;4525:460;;;;;:::o;4990:412::-;5073:6;5081;5134:2;5122:9;5113:7;5109:23;5105:32;5102:52;;;5150:1;5147;5140:12;5102:52;5189:9;5176:23;5208:31;5233:5;5208:31;:::i;:::-;5258:5;-1:-1:-1;5315:2:80;5300:18;;5287:32;5350:1;5338:14;;5328:42;;5366:1;5363;5356:12;5604:252;5671:6;5679;5732:2;5720:9;5711:7;5707:23;5703:32;5700:52;;;5748:1;5745;5738:12;5700:52;5771:28;5789:9;5771:28;:::i;5861:537::-;5946:6;5954;5962;6015:2;6003:9;5994:7;5990:23;5986:32;5983:52;;;6031:1;6028;6021:12;5983:52;6070:9;6057:23;6089:31;6114:5;6089:31;:::i;:::-;6139:5;-1:-1:-1;6196:2:80;6181:18;;6168:32;6209:33;6168:32;6209:33;:::i;:::-;6261:7;-1:-1:-1;6320:2:80;6305:18;;6292:32;6333:33;6292:32;6333:33;:::i;:::-;6385:7;6375:17;;;5861:537;;;;;:::o;6403:127::-;6464:10;6459:3;6455:20;6452:1;6445:31;6495:4;6492:1;6485:15;6519:4;6516:1;6509:15;6535:908;6589:5;6642:3;6635:4;6627:6;6623:17;6619:27;6609:55;;6660:1;6657;6650:12;6609:55;6683:20;;6722:4;-1:-1:-1;;;;;6775:10:80;;;6772:36;;;6788:18;;:::i;:::-;6834:2;6831:1;6827:10;6866:2;6860:9;6929:2;6925:7;6920:2;6916;6912:11;6908:25;6900:6;6896:38;6984:6;6972:10;6969:22;6964:2;6952:10;6949:18;6946:46;6943:72;;;6995:18;;:::i;:::-;7031:2;7024:22;7081:18;;;7157:15;;;7153:24;;;7115:15;;;;-1:-1:-1;7189:15:80;;;7186:35;;;7217:1;7214;7207:12;7186:35;7253:2;7245:6;7241:15;7230:26;;7265:148;7281:6;7276:3;7273:15;7265:148;;;7347:23;7366:3;7347:23;:::i;:::-;7335:36;;7391:12;;;;7298;;;;7265:148;;7448:624;7558:6;7566;7574;7582;7635:3;7623:9;7614:7;7610:23;7606:33;7603:53;;;7652:1;7649;7642:12;7603:53;7675:28;7693:9;7675:28;:::i;:::-;7665:38;;7750:2;7739:9;7735:18;7722:32;7712:42;;7804:2;7793:9;7789:18;7776:32;7817:31;7842:5;7817:31;:::i;:::-;7867:5;-1:-1:-1;7923:2:80;7908:18;;7895:32;-1:-1:-1;;;;;7939:30:80;;7936:50;;;7982:1;7979;7972:12;7936:50;8005:61;8058:7;8049:6;8038:9;8034:22;8005:61;:::i;:::-;7995:71;;;7448:624;;;;;;;:::o;8077:180::-;8136:6;8189:2;8177:9;8168:7;8164:23;8160:32;8157:52;;;8205:1;8202;8195:12;8157:52;-1:-1:-1;8228:23:80;;8077:180;-1:-1:-1;8077:180:80:o;8262:420::-;8354:6;8362;8415:2;8403:9;8394:7;8390:23;8386:32;8383:52;;;8431:1;8428;8421:12;8383:52;8454:28;8472:9;8454:28;:::i;:::-;8444:38;-1:-1:-1;8533:2:80;8518:18;;8505:32;-1:-1:-1;;;;;8549:30:80;;8546:50;;;8592:1;8589;8582:12;8546:50;8615:61;8668:7;8659:6;8648:9;8644:22;8615:61;:::i;:::-;8605:71;;;8262:420;;;;;:::o;8687:419::-;8754:6;8762;8815:2;8803:9;8794:7;8790:23;8786:32;8783:52;;;8831:1;8828;8821:12;8783:52;8870:9;8857:23;8889:31;8914:5;8889:31;:::i;:::-;8939:5;-1:-1:-1;8996:2:80;8981:18;;8968:32;9044:10;9031:24;;9019:37;;9009:65;;9070:1;9067;9060:12;9463:297;-1:-1:-1;;;;;9653:32:80;;;;9635:51;;-1:-1:-1;;;;;9722:31:80;9717:2;9702:18;;9695:59;9623:2;9608:18;;9463:297::o;9765:352::-;9967:2;9949:21;;;10006:2;9986:18;;;9979:30;-1:-1:-1;;;10040:2:80;10025:18;;10018:58;10108:2;10093:18;;9765:352::o;10122:351::-;10324:2;10306:21;;;10363:2;10343:18;;;10336:30;-1:-1:-1;;;10397:2:80;10382:18;;10375:57;10464:2;10449:18;;10122:351::o;10478:341::-;10680:2;10662:21;;;10719:2;10699:18;;;10692:30;-1:-1:-1;;;10753:2:80;10738:18;;10731:47;10810:2;10795:18;;10478:341::o;10824:352::-;11026:2;11008:21;;;11065:2;11045:18;;;11038:30;-1:-1:-1;;;11099:2:80;11084:18;;11077:58;11167:2;11152:18;;10824:352::o;11181:127::-;11242:10;11237:3;11233:20;11230:1;11223:31;11273:4;11270:1;11263:15;11297:4;11294:1;11287:15;11313:236;11352:3;-1:-1:-1;;;;;11418:10:80;;;11448;;;11478:12;;;11470:21;;11467:47;;;11494:18;;:::i;:::-;11530:13;;11313:236;-1:-1:-1;;;;11313:236:80:o;12265:340::-;12467:2;12449:21;;;12506:2;12486:18;;;12479:30;-1:-1:-1;;;12540:2:80;12525:18;;12518:46;12596:2;12581:18;;12265:340::o;12610:306::-;12698:6;12706;12714;12767:2;12755:9;12746:7;12742:23;12738:32;12735:52;;;12783:1;12780;12773:12;12735:52;12812:9;12806:16;12796:26;;12862:2;12851:9;12847:18;12841:25;12831:35;;12906:2;12895:9;12891:18;12885:25;12875:35;;12610:306;;;;;:::o;12921:347::-;13123:2;13105:21;;;13162:2;13142:18;;;13135:30;-1:-1:-1;;;13196:2:80;13181:18;;13174:53;13259:2;13244:18;;12921:347::o;13273:229::-;13312:4;-1:-1:-1;;;;;13409:10:80;;;;13379;;13431:12;;;13428:38;;;13446:18;;:::i;:::-;13483:13;;13273:229;-1:-1:-1;;;13273:229:80:o;13861:128::-;13901:3;13932:1;13928:6;13925:1;13922:13;13919:39;;;13938:18;;:::i;:::-;-1:-1:-1;13974:9:80;;13861:128::o;13994:345::-;14196:2;14178:21;;;14235:2;14215:18;;;14208:30;-1:-1:-1;;;14269:2:80;14254:18;;14247:51;14330:2;14315:18;;13994:345::o;15047:354::-;15249:2;15231:21;;;15288:2;15268:18;;;15261:30;15327:32;15322:2;15307:18;;15300:60;15392:2;15377:18;;15047:354::o;15406:350::-;15608:2;15590:21;;;15647:2;15627:18;;;15620:30;-1:-1:-1;;;15681:2:80;15666:18;;15659:56;15747:2;15732:18;;15406:350::o;15761:339::-;15963:2;15945:21;;;16002:2;15982:18;;;15975:30;-1:-1:-1;;;16036:2:80;16021:18;;16014:45;16091:2;16076:18;;15761:339::o;16105:251::-;16175:6;16228:2;16216:9;16207:7;16203:23;16199:32;16196:52;;;16244:1;16241;16234:12;16196:52;16276:9;16270:16;16295:31;16320:5;16295:31;:::i;16625:406::-;-1:-1:-1;;;;;16889:15:80;;;16871:34;;16941:15;;;;16936:2;16921:18;;16914:43;-1:-1:-1;;;;;16993:31:80;;;16988:2;16973:18;;16966:59;16821:2;16806:18;;16625:406::o;17036:343::-;17238:2;17220:21;;;17277:2;17257:18;;;17250:30;-1:-1:-1;;;17311:2:80;17296:18;;17289:49;17370:2;17355:18;;17036:343::o;17740:338::-;17942:2;17924:21;;;17981:2;17961:18;;;17954:30;-1:-1:-1;;;18015:2:80;18000:18;;17993:44;18069:2;18054:18;;17740:338::o;18437:299::-;-1:-1:-1;;;;;18662:15:80;;;18644:34;;18714:15;;18709:2;18694:18;;18687:43;18595:2;18580:18;;18437:299::o;18741:396::-;-1:-1:-1;;;;;18957:32:80;;;;18939:51;;-1:-1:-1;;;;;19063:15:80;;;19058:2;19043:18;;19036:43;19115:15;19110:2;19095:18;;19088:43;18927:2;18912:18;;18741:396::o;19488:125::-;19528:4;19556:1;19553;19550:8;19547:34;;;19561:18;;:::i;:::-;-1:-1:-1;19598:9:80;;19488:125::o;19618:127::-;19679:10;19674:3;19670:20;19667:1;19660:31;19710:4;19707:1;19700:15;19734:4;19731:1;19724:15;19750:135;19789:3;-1:-1:-1;;19810:17:80;;19807:43;;;19830:18;;:::i;:::-;-1:-1:-1;19877:1:80;19866:13;;19750:135::o;21288:184::-;21358:6;21411:2;21399:9;21390:7;21386:23;21382:32;21379:52;;;21427:1;21424;21417:12;21379:52;-1:-1:-1;21450:16:80;;21288:184;-1:-1:-1;21288:184:80:o;25218:127::-;25279:10;25274:3;25270:20;25267:1;25260:31;25310:4;25307:1;25300:15;25334:4;25331:1;25324:15;25350:112;25382:1;25408;25398:35;;25413:18;;:::i;:::-;-1:-1:-1;25447:9:80;;25350:112::o;25467:168::-;25507:7;25573:1;25569;25565:6;25561:14;25558:1;25555:21;25550:1;25543:9;25536:17;25532:45;25529:71;;;25580:18;;:::i;:::-;-1:-1:-1;25620:9:80;;25467:168::o;25640:120::-;25680:1;25706;25696:35;;25711:18;;:::i;:::-;-1:-1:-1;25745:9:80;;25640:120::o;25765:904::-;26052:25;;;26096:2;26114:18;;;26107:34;;;-1:-1:-1;;;;;26215:15:80;;;26210:2;26195:18;;26188:43;26039:3;26262:2;26247:18;;26240:31;;;26320:13;;26024:19;;;26342:22;;;25991:4;;26422:15;;;;26096:2;;26168:3;26380:19;;;25991:4;26465:178;26479:6;26476:1;26473:13;26465:178;;;26544:13;;26540:22;;26528:35;;26618:15;;;;26583:12;;;;26501:1;26494:9;26465:178;;;-1:-1:-1;26660:3:80;;25765:904;-1:-1:-1;;;;;;;;;;25765:904:80:o;26674:304::-;-1:-1:-1;;;;;26904:15:80;;;26886:34;;26956:15;;26951:2;26936:18;;26929:43;26836:2;26821:18;;26674:304::o;27797:127::-;27858:10;27853:3;27849:20;27846:1;27839:31;27889:4;27886:1;27879:15;27913:4;27910:1;27903:15;29040:277;29107:6;29160:2;29148:9;29139:7;29135:23;29131:32;29128:52;;;29176:1;29173;29166:12;29128:52;29208:9;29202:16;29261:5;29254:13;29247:21;29240:5;29237:32;29227:60;;29283:1;29280;29273:12;30498:258;30570:1;30580:113;30594:6;30591:1;30588:13;30580:113;;;30670:11;;;30664:18;30651:11;;;30644:39;30616:2;30609:10;30580:113;;;30711:6;30708:1;30705:13;30702:48;;;-1:-1:-1;;30746:1:80;30728:16;;30721:27;30498:258::o;30761:274::-;30890:3;30928:6;30922:13;30944:53;30990:6;30985:3;30978:4;30970:6;30966:17;30944:53;:::i;:::-;31013:16;;;;;30761:274;-1:-1:-1;;30761:274:80:o;31040:383::-;31189:2;31178:9;31171:21;31152:4;31221:6;31215:13;31264:6;31259:2;31248:9;31244:18;31237:34;31280:66;31339:6;31334:2;31323:9;31319:18;31314:2;31306:6;31302:15;31280:66;:::i;:::-;31407:2;31386:15;-1:-1:-1;;31382:29:80;31367:45;;;;31414:2;31363:54;;31040:383;-1:-1:-1;;31040:383:80:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "4809200",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "applicationInfo(address)": "2627",
        "applications(uint256)": "5694",
        "approveApplication(address)": "84442",
        "approveAuthorizationDecrease(address)": "infinite",
        "authorizationCeiling()": "2405",
        "authorizedStake(address,address)": "infinite",
        "checkpoints(address,uint32)": "7926",
        "delegateVoting(address,address)": "infinite",
        "delegates(address)": "2971",
        "disableApplication(address)": "32868",
        "forceDecreaseAuthorization(address,address)": "infinite",
        "getApplicationsLength()": "3172",
        "getAvailableToAuthorize(address,address)": "infinite",
        "getMinStaked(address,uint8)": "infinite",
        "getPastTotalSupply(uint256)": "infinite",
        "getPastVotes(address,uint256)": "8982",
        "getSlashingQueueLength()": "3568",
        "getStartStakingTimestamp(address)": "3769",
        "getVotes(address)": "infinite",
        "governance()": "2801",
        "increaseAuthorization(address,address,uint96)": "infinite",
        "initialize()": "81948",
        "minTStakeAmount()": "2532",
        "notificationReward()": "2867",
        "notifiersTreasury()": "2911",
        "notifyKeepStakeDiscrepancy(address)": "infinite",
        "notifyNuStakeDiscrepancy(address)": "infinite",
        "numCheckpoints(address)": "3214",
        "pauseApplication(address)": "30672",
        "processSlashing(uint256)": "infinite",
        "pushNotificationReward(uint96)": "infinite",
        "refreshKeepStakeOwner(address)": "infinite",
        "requestAuthorizationDecrease(address)": "infinite",
        "requestAuthorizationDecrease(address,address,uint96)": "infinite",
        "rolesOf(address)": "7040",
        "seize(uint96,uint256,address,address[])": "infinite",
        "setAuthorizationCeiling(uint256)": "26465",
        "setMinimumStakeAmount(uint96)": "28314",
        "setNotificationReward(uint96)": "26701",
        "setPanicButton(address,address)": "infinite",
        "setStakeDiscrepancyPenalty(uint96,uint256)": "50812",
        "slash(uint96,address[])": "infinite",
        "slashingQueue(uint256)": "5922",
        "slashingQueueIndex()": "3153",
        "stake(address,address,address,uint96)": "infinite",
        "stakeDiscrepancyPenalty()": "3483",
        "stakeDiscrepancyRewardMultiplier()": "2537",
        "stakeKeep(address)": "infinite",
        "stakeNu(address,address,address)": "infinite",
        "stakedNu(address)": "infinite",
        "stakes(address)": "6897",
        "topUp(address,uint96)": "infinite",
        "topUpKeep(address)": "infinite",
        "topUpNu(address)": "infinite",
        "transferGovernance(address)": "infinite",
        "unstakeAll(address)": "infinite",
        "unstakeKeep(address)": "infinite",
        "unstakeNu(address,uint96)": "infinite",
        "unstakeT(address,uint96)": "infinite",
        "withdrawNotificationReward(address,uint96)": "infinite"
      },
      "internal": {
        "_transferGovernance(address)": "infinite",
        "authorizationDecrease(address,struct TokenStaking.StakingProviderInfo storage pointer,uint96)": "infinite",
        "cleanAuthorizedApplications(struct TokenStaking.StakingProviderInfo storage pointer,uint256)": "infinite",
        "convertFromT(uint96,uint256)": "infinite",
        "convertToT(uint256,uint256)": "infinite",
        "decreaseStakeCheckpoint(address,uint96)": "infinite",
        "delegate(address,address)": "infinite",
        "getKeepAmountInT(address)": "infinite",
        "getNuAmountInT(address,address)": "infinite",
        "increaseStakeCheckpoint(address,uint96)": "infinite",
        "newStakeCheckpoint(address,uint96,bool)": "infinite",
        "notify(uint96,uint256,address,address[] memory)": "infinite",
        "processSlashing(struct TokenStaking.SlashingEvent storage pointer)": "infinite",
        "seizeKeep(struct TokenStaking.StakingProviderInfo storage pointer,address,uint96,uint256)": "infinite",
        "seizeNu(struct TokenStaking.StakingProviderInfo storage pointer,uint96,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "applicationInfo(address)": "067e6bb1",
      "applications(uint256)": "dfefadff",
      "approveApplication(address)": "e3ae4d0a",
      "approveAuthorizationDecrease(address)": "75e0ae5a",
      "authorizationCeiling()": "2cd62915",
      "authorizedStake(address,address)": "e009245a",
      "checkpoints(address,uint32)": "f1127ed8",
      "delegateVoting(address,address)": "0fa78bf4",
      "delegates(address)": "587cde1e",
      "disableApplication(address)": "43445748",
      "forceDecreaseAuthorization(address,address)": "b626ca3e",
      "getApplicationsLength()": "ad30e4cd",
      "getAvailableToAuthorize(address,address)": "8b7adc09",
      "getMinStaked(address,uint8)": "6da91d8b",
      "getPastTotalSupply(uint256)": "8e539e8c",
      "getPastVotes(address,uint256)": "3a46b1a8",
      "getSlashingQueueLength()": "ffd2f984",
      "getStartStakingTimestamp(address)": "f6e0faeb",
      "getVotes(address)": "9ab24eb0",
      "governance()": "5aa6e675",
      "increaseAuthorization(address,address,uint96)": "f848beff",
      "initialize()": "8129fc1c",
      "minTStakeAmount()": "32719e06",
      "notificationReward()": "7368dba2",
      "notifiersTreasury()": "793c1365",
      "notifyKeepStakeDiscrepancy(address)": "402121af",
      "notifyNuStakeDiscrepancy(address)": "8e46ecb6",
      "numCheckpoints(address)": "6fcfff45",
      "pauseApplication(address)": "2c686ca0",
      "processSlashing(uint256)": "be2f3351",
      "pushNotificationReward(uint96)": "483046bb",
      "refreshKeepStakeOwner(address)": "af5f24ad",
      "requestAuthorizationDecrease(address)": "86d18a25",
      "requestAuthorizationDecrease(address,address,uint96)": "5f2d5030",
      "rolesOf(address)": "2de94807",
      "seize(uint96,uint256,address,address[])": "83ddba8f",
      "setAuthorizationCeiling(uint256)": "b1958150",
      "setMinimumStakeAmount(uint96)": "6d08f5b0",
      "setNotificationReward(uint96)": "d3e25ef3",
      "setPanicButton(address,address)": "1d5270d3",
      "setStakeDiscrepancyPenalty(uint96,uint256)": "7d0379f0",
      "slash(uint96,address[])": "f07f91c5",
      "slashingQueue(uint256)": "f1f6c315",
      "slashingQueueIndex()": "a7bb8ba8",
      "stake(address,address,address,uint96)": "5961d5e9",
      "stakeDiscrepancyPenalty()": "eaa86492",
      "stakeDiscrepancyRewardMultiplier()": "44e97423",
      "stakeKeep(address)": "570ea461",
      "stakeNu(address,address,address)": "81b0a0ce",
      "stakedNu(address)": "4a11fae3",
      "stakes(address)": "16934fc4",
      "topUp(address,uint96)": "28c8c55f",
      "topUpKeep(address)": "ef47bf40",
      "topUpNu(address)": "56f958ee",
      "transferGovernance(address)": "d38bfff4",
      "unstakeAll(address)": "a0d6ff9a",
      "unstakeKeep(address)": "4ec0a9fe",
      "unstakeNu(address,uint96)": "58ccdf38",
      "unstakeT(address,uint96)": "d3ecb6cd",
      "withdrawNotificationReward(address,uint96)": "6d9b9a34"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract T\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IKeepTokenStaking\",\"name\":\"_keepStakingContract\",\"type\":\"address\"},{\"internalType\":\"contract INuCypherStakingEscrow\",\"name\":\"_nucypherStakingContract\",\"type\":\"address\"},{\"internalType\":\"contract VendingMachine\",\"name\":\"_keepVendingMachine\",\"type\":\"address\"},{\"internalType\":\"contract VendingMachine\",\"name\":\"_nucypherVendingMachine\",\"type\":\"address\"},{\"internalType\":\"contract KeepStake\",\"name\":\"_keepStake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum TokenStaking.ApplicationStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ApplicationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"AuthorizationCeilingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationDecreaseApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationDecreaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"successfulCall\",\"type\":\"bool\"}],\"name\":\"AuthorizationInvoluntaryDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"MinimumStakeAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifierRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerRefreshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"name\":\"PanicButtonSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"SlashingProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"penalty\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"StakeDiscrepancyPenaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IStaking.StakeType\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"discrepancy\",\"type\":\"bool\"}],\"name\":\"TokensSeized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"ToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applicationInfo\",\"outputs\":[{\"internalType\":\"enum TokenStaking.ApplicationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"approveApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"approveAuthorizationDecrease\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizationCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"authorizedStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct Checkpoints.Checkpoint\",\"name\":\"checkpoint\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"disableApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"forceDecreaseAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApplicationsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"getAvailableToAuthorize\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"availableTValue\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"enum IStaking.StakeType\",\"name\":\"stakeTypes\",\"type\":\"uint8\"}],\"name\":\"getMinStaked\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"getStartStakingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"increaseAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTStakeAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notificationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifiersTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"notifyKeepStakeDiscrepancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"notifyNuStakeDiscrepancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"pauseApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"processSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"pushNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"refreshKeepStakeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"requestAuthorizationDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"requestAuthorizationDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"rolesOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"notifier\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_stakingProviders\",\"type\":\"address[]\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"setAuthorizationCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"setMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"setNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"name\":\"setPanicButton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"penalty\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setStakeDiscrepancyPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"address[]\",\"name\":\"_stakingProviders\",\"type\":\"address[]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashingQueueIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDiscrepancyPenalty\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDiscrepancyRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakeKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"name\":\"stakeNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakedNu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"tStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"keepInTStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nuInTStake\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"topUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"topUpNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuvnor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"unstakeKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"unstakeNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"unstakeT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"withdrawNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"TokenStaking is upgradeable, using OpenZeppelin's Upgradeability      framework. As such, it is required to satisfy OZ's guidelines, like      restrictions on constructors, immutable variables, base contracts and      libraries. See https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"_keepStake\":\"Address of Keep contract with grant owners\",\"_keepStakingContract\":\"Address of Keep staking contract\",\"_keepVendingMachine\":\"Address of Keep vending machine\",\"_nucypherStakingContract\":\"Address of NuCypher staking contract\",\"_nucypherVendingMachine\":\"Address of NuCypher vending machine\",\"_token\":\"Address of T token contract\"}},\"getMinStaked(address,uint8)\":{\"details\":\"For example, suppose the given staking provider has 10 T, 20 T worth      of KEEP, and 30 T worth of NU all staked, and the maximum      application authorization is 40 T, then `getMinStaked` for      that staking provider returns:          * 0 T if KEEP stake type specified i.e.            min = 40 T max - (10 T + 30 T worth of NU) = 0 T          * 10 T if NU stake type specified i.e.            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T          * 0 T if T stake type specified i.e.            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T      In other words, the minimum stake amount for the specified      stake type is the minimum amount of stake of the given type      needed to satisfy the maximum application authorization given      the staked amounts of the other stake types for that staking      provider.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"`blockNumber` must have been already mined\",\"params\":{\"blockNumber\":\"The block number to get the total supply at\"}},\"getPastVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will      revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"getStartStakingTimestamp(address)\":{\"details\":\"This value is set at most once.\"},\"getVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"increaseAuthorization(address,address,uint96)\":{\"details\":\"Calls `authorizationIncreased` callback on the given application to      notify the application about authorization change.      See `IApplication`.\"},\"notifyNuStakeDiscrepancy(address)\":{\"details\":\"Real discrepancy between T and Nu is impossible.         This method is a safeguard in case of bugs in NuCypher staking         contract\"},\"refreshKeepStakeOwner(address)\":{\"details\":\"The staking provider in T staking contract is the legacy KEEP      staking contract operator.\"},\"requestAuthorizationDecrease(address)\":{\"details\":\"Calls `authorizationDecreaseRequested` callback      for each authorized application. See `IApplication`.\"},\"requestAuthorizationDecrease(address,address,uint96)\":{\"details\":\"Calls `authorizationDecreaseRequested` callback on the given      application. See `IApplication`.\"},\"rolesOf(address)\":{\"returns\":{\"authorizer\":\"Authorizer address.\",\"beneficiary\":\"Beneficiary address.\",\"owner\":\"Stake owner address.\"}},\"seize(uint96,uint256,address,address[])\":{\"details\":\"This method doesn't emit events for staking providers that are         added to the queue. If necessary  events can be added to the         application level.\"},\"setMinimumStakeAmount(uint96)\":{\"details\":\"Staking providers are not required to maintain a minimum T stake      all the time. 24 hours after the delegation, T stake can be reduced      below the minimum stake. The minimum stake in the staking contract      is just to protect against griefing stake operation. Please note      that each application may have its own minimum authorization though      and the authorization can not be higher than the stake.\"},\"slash(uint96,address[])\":{\"details\":\"This method doesn't emit events for providers that are added to         the queue. If necessary  events can be added to the application         level.\"},\"stake(address,address,address,uint96)\":{\"details\":\"The owner of the delegation needs to have the amount approved to      transfer to the staking contract.\"},\"stakeKeep(address)\":{\"details\":\"The staking provider in T staking contract is the legacy KEEP      staking contract operator.\"},\"stakes(address)\":{\"details\":\"All values are in T denomination\"},\"topUp(address,uint96)\":{\"details\":\"The sender of this transaction needs to have the amount approved to      transfer to the staking contract.\"},\"unstakeKeep(address)\":{\"details\":\"This function (or `unstakeAll`) must be called before         `undelegate`/`undelegateAt` in Keep staking contract. Otherwise         provider can be slashed by `notifyKeepStakeDiscrepancy` method.\"},\"unstakeNu(address,uint96)\":{\"details\":\"This function (or `unstakeAll`) must be called before `withdraw`         in NuCypher staking contract. Otherwise NU tokens can't be         unlocked.\",\"params\":{\"amount\":\"Amount of NU to unstake in T denomination\",\"stakingProvider\":\"Staking provider address\"}}},\"stateVariables\":{\"keepRatio\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"keepStake\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"keepStakingContract\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"nucypherRatio\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"nucypherStakingContract\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"token\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"Emitted when a balance or delegate change results in changes         to an account's voting power.\"}},\"kind\":\"user\",\"methods\":{\"approveApplication(address)\":{\"notice\":\"Allows the Governance to approve the particular application         before individual stake authorizers are able to authorize it.\"},\"approveAuthorizationDecrease(address)\":{\"notice\":\"Called by the application at its discretion to approve the         previously requested authorization decrease request. Can only be         called by the application that was previously requested to         decrease the authorization for that staking provider.         Returns resulting authorized amount for the application.\"},\"authorizedStake(address,address)\":{\"notice\":\"Returns the authorized stake amount of the staking provider for         the application.\"},\"delegateVoting(address,address)\":{\"notice\":\"Delegate voting power from the stake associated to the         `stakingProvider` to a `delegatee` address. Caller must be the         owner of this stake.\"},\"delegates(address)\":{\"notice\":\"Get the address `account` is currently delegating to.\"},\"disableApplication(address)\":{\"notice\":\"Disables the given application. The disabled application can't         slash stakers. Also stakers can't increase authorization to that         application but can decrease without waiting by calling         `forceDecreaseAuthorization` at any moment. Can be called only         by the governance. The disabled application can't be approved         again. Should be used only in case of an emergency.\"},\"forceDecreaseAuthorization(address,address)\":{\"notice\":\"Decreases the authorization for the given `stakingProvider` on         the given disabled `application`, for all authorized amount.         Can be called by anyone.\"},\"getApplicationsLength()\":{\"notice\":\"Returns length of application array\"},\"getAvailableToAuthorize(address,address)\":{\"notice\":\"Returns available amount to authorize for the specified         application.\"},\"getMinStaked(address,uint8)\":{\"notice\":\"Returns minimum possible stake for T, KEEP or NU in T denomination\"},\"getPastTotalSupply(uint256)\":{\"notice\":\"Retrieve the `totalSupply` at the end of `blockNumber`.         Note, this value is the sum of all balances, but it is NOT the         sum of all the delegated votes!\"},\"getPastVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of         a block number.\"},\"getSlashingQueueLength()\":{\"notice\":\"Returns length of slashing queue\"},\"getStartStakingTimestamp(address)\":{\"notice\":\"Returns start staking timestamp.\"},\"getVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`.\"},\"increaseAuthorization(address,address,uint96)\":{\"notice\":\"Increases the authorization of the given staking provider for         the given application by the given amount. Can only be called by         the given staking provider\\u2019s authorizer.\"},\"notifyKeepStakeDiscrepancy(address)\":{\"notice\":\"Notifies about the discrepancy between legacy KEEP active stake         and the amount cached in T staking contract. Slashes the staking         provider in case the amount cached is higher than the actual         active stake amount in KEEP staking contract. Needs to update         authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward.\"},\"notifyNuStakeDiscrepancy(address)\":{\"notice\":\"Notifies about the discrepancy between legacy NU active stake         and the amount cached in T staking contract. Slashes the         staking provider in case the amount cached is higher than the         actual active stake amount in NU staking contract. Needs to         update authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward.\"},\"numCheckpoints(address)\":{\"notice\":\"Get number of checkpoints for `account`.\"},\"pauseApplication(address)\":{\"notice\":\"Pauses the given application\\u2019s eligibility to slash stakes.         Besides that stakers can't change authorization to the application.         Can be called only by the Panic Button of the particular         application. The paused application can not slash stakes until         it is approved again by the Governance using `approveApplication`         function. Should be used only in case of an emergency.\"},\"processSlashing(uint256)\":{\"notice\":\"Takes the given number of queued slashing operations and         processes them. Receives 5% of the slashed amount.         Executes `involuntaryAuthorizationDecrease` function on each         affected application.\"},\"pushNotificationReward(uint96)\":{\"notice\":\"Transfer some amount of T tokens as reward for notifications         of misbehaviour\"},\"refreshKeepStakeOwner(address)\":{\"notice\":\"Refresh Keep stake owner. Can be called only by the old owner         or their staking provider.\"},\"requestAuthorizationDecrease(address)\":{\"notice\":\"Requests decrease of all authorizations for the given staking         provider on all applications by all authorized amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider\\u2019s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application.\"},\"requestAuthorizationDecrease(address,address,uint96)\":{\"notice\":\"Requests decrease of the authorization for the given staking         provider on the given application by the provided amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider\\u2019s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application if the application agrees for that. If the         application does not agree for overwriting, the function         reverts.\"},\"rolesOf(address)\":{\"notice\":\"Gets the stake owner, the beneficiary and the authorizer         for the specified staking provider address.\"},\"seize(uint96,uint256,address,address[])\":{\"notice\":\"Adds staking providers to the slashing queue along with the         amount. The notifier will receive reward per each provider from         notifiers treasury. Can only be called by application         authorized for all staking providers in the array.\"},\"setAuthorizationCeiling(uint256)\":{\"notice\":\"Sets the maximum number of applications one staking provider can         have authorized. Used to protect against DoSing slashing queue.         Can only be called by the Governance.\"},\"setMinimumStakeAmount(uint96)\":{\"notice\":\"Allows the Governance to set the minimum required stake amount.         This amount is required to protect against griefing the staking         contract and individual applications are allowed to require         higher minimum stakes if necessary.\"},\"setNotificationReward(uint96)\":{\"notice\":\"Sets reward in T tokens for notification of misbehaviour         of one staking provider. Can only be called by the governance.\"},\"setPanicButton(address,address)\":{\"notice\":\"Sets the Panic Button role for the given application to the         provided address. Can only be called by the Governance. If the         Panic Button for the given application should be disabled, the         role address should be set to 0x0 address.\"},\"setStakeDiscrepancyPenalty(uint96,uint256)\":{\"notice\":\"Sets the penalty amount for stake discrepancy and reward         multiplier for reporting it. The penalty is seized from the         delegated stake, and 5% of the penalty, scaled by the         multiplier, is given to the notifier. The rest of the tokens are         burned. Can only be called by the Governance. See `seize` function.\"},\"slash(uint96,address[])\":{\"notice\":\"Adds staking providers to the slashing queue along with the         amount that should be slashed from each one of them. Can only be         called by application authorized for all staking providers in         the array.\"},\"stake(address,address,address,uint96)\":{\"notice\":\"Creates a delegation with `msg.sender` owner with the given         staking provider, beneficiary, and authorizer. Transfers the         given amount of T to the staking contract.\"},\"stakeKeep(address)\":{\"notice\":\"Copies delegation from the legacy KEEP staking contract to T         staking contract. No tokens are transferred. Caches the active         stake amount from KEEP staking contract. Can be called by         anyone.\"},\"stakeNu(address,address,address)\":{\"notice\":\"Copies delegation from the legacy NU staking contract to T         staking contract, additionally appointing beneficiary and         authorizer roles. Caches the amount staked in NU staking         contract. Can be called only by the original delegation owner.\"},\"stakedNu(address)\":{\"notice\":\"Returns staked amount of NU for the specified staking provider.\"},\"stakes(address)\":{\"notice\":\"Returns staked amount of T, Keep and Nu for the specified         staking provider.\"},\"topUp(address,uint96)\":{\"notice\":\"Increases the amount of the stake for the given staking provider.\"},\"topUpKeep(address)\":{\"notice\":\"Propagates information about stake top-up from the legacy KEEP         staking contract to T staking contract. Can be called only by         the owner or the staking provider.\"},\"topUpNu(address)\":{\"notice\":\"Propagates information about stake top-up from the legacy NU         staking contract to T staking contract. Can be called only by         the owner or the staking provider.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers ownership of the contract to `newGuvnor`.\"},\"unstakeAll(address)\":{\"notice\":\"Sets cached legacy stake amount to 0, sets the liquid T stake         amount to 0 and withdraws all liquid T from the stake to the         owner. Reverts if there is at least one non-zero authorization.         Can be called only by the delegation owner or the staking         provider. Can only be called when 24h passed since the stake         has been delegated.\"},\"unstakeKeep(address)\":{\"notice\":\"Sets the legacy KEEP staking contract active stake amount cached         in T staking contract to 0. Reverts if the amount of liquid T         staked in T staking contract is lower than the highest         application authorization. This function allows to unstake from         KEEP staking contract and still being able to operate in T         network and earning rewards based on the liquid T staked. Can be         called only by the delegation owner or the staking provider.         Can only be called when 24h passed since the stake has been         delegated.\"},\"unstakeNu(address,uint96)\":{\"notice\":\"Reduces cached legacy NU stake amount by the provided amount.         Reverts if there is at least one authorization higher than the         sum of remaining legacy NU stake and liquid T stake for that         staking provider or if the untaked amount is higher than the         cached legacy stake amount. If succeeded, the legacy NU stake         can be partially or fully undelegated on the legacy staking         contract. This function allows to unstake from NU staking         contract and still being able to operate in T network and         earning rewards based on the liquid T staked. Can be called only         by the delegation owner or the staking provider. Can only be         called when 24h passed since the stake has been delegated.\"},\"unstakeT(address,uint96)\":{\"notice\":\"Reduces the liquid T stake amount by the provided amount and         withdraws T to the owner. Reverts if there is at least one         authorization higher than the sum of the legacy stake and         remaining liquid T stake or if the unstake amount is higher than         the liquid T stake amount. Can be called only by the owner or         the staking provider. Can only be called when 24h passed since         the stake has been delegated.\"},\"withdrawNotificationReward(address,uint96)\":{\"notice\":\"Withdraw some amount of T tokens from notifiers treasury.         Can only be called by the governance.\"}},\"notice\":\"TokenStaking is the main staking contract of the Threshold Network.         Apart from the basic usage of enabling T stakes, it also acts as a         sort of \\\"meta-staking\\\" contract, accepting existing legacy NU/KEEP         stakes. Additionally, it serves as application manager for the apps         that run on the Threshold Network. Note that legacy NU/KEEP staking         contracts see TokenStaking as an application (e.g., slashing is         requested by TokenStaking and performed by the legacy contracts).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/TokenStaking.sol\":\"TokenStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcec885ecdf113b4265ed0856972d7ff167bfeb3802604b18cbb782bf47ecc4ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IERC20WithPermit.sol\\\";\\nimport \\\"./IReceiveApproval.sol\\\";\\n\\n/// @title  ERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ncontract ERC20WithPermit is IERC20WithPermit, Ownable {\\n    /// @notice The amount of tokens owned by the given account.\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /// @notice The remaining number of tokens that spender will be\\n    ///         allowed to spend on behalf of owner through `transferFrom` and\\n    ///         `burnFrom`. This is zero by default.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    mapping(address => uint256) public override nonce;\\n\\n    uint256 public immutable cachedChainId;\\n    bytes32 public immutable cachedDomainSeparator;\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /// @notice The amount of tokens in existence.\\n    uint256 public override totalSupply;\\n\\n    /// @notice The name of the token.\\n    string public override name;\\n\\n    /// @notice The symbol of the token.\\n    string public override symbol;\\n\\n    /// @notice The decimals places of the token.\\n    uint8 public constant override decimals = 18;\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n\\n        cachedChainId = block.chainid;\\n        cachedDomainSeparator = buildDomainSeparator();\\n    }\\n\\n    /// @notice Moves `amount` tokens from the caller's account to `recipient`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///       - `recipient` cannot be the zero address,\\n    ///       - the caller must have a balance of at least `amount`.\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Moves `amount` tokens from `spender` to `recipient` using the\\n    ///         allowance mechanism. `amount` is then deducted from the caller's\\n    ///         allowance unless the allowance was made for `type(uint256).max`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///      - `spender` and `recipient` cannot be the zero address,\\n    ///      - `spender` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `spender`'s tokens of at least\\n    ///        `amount`.\\n    function transferFrom(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = allowance[spender][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            );\\n            _approve(spender, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(spender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.  If the `amount` is set\\n    ///         to `type(uint256).max` then `transferFrom` and `burnFrom` will\\n    ///         not reduce an allowance.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Permission expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        amount,\\n                        nonce[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Invalid signature\\\"\\n        );\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /// @notice Creates `amount` tokens and assigns them to `account`,\\n    ///         increasing the total supply.\\n    /// @dev Requirements:\\n    ///      - `recipient` cannot be the zero address.\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(recipient != address(0), \\\"Mint to the zero address\\\");\\n\\n        beforeTokenTransfer(address(0), recipient, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    /// @dev Requirements:\\n    ///       - the caller must have a balance of at least `amount`.\\n    function burn(uint256 amount) external override {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of tokens from `account` using the allowance\\n    ///         mechanism. `amount` is then deducted from the caller's allowance\\n    ///         unless the allowance was made for `type(uint256).max`.\\n    /// @dev Requirements:\\n    ///      - `account` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `account`'s tokens of at least\\n    ///        `amount`.\\n    function burnFrom(address account, uint256 amount) external override {\\n        uint256 currentAllowance = allowance[account][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Burn amount exceeds allowance\\\"\\n            );\\n            _approve(account, msg.sender, currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n\\n    /// @notice Calls `receiveApproval` function on spender previously approving\\n    ///         the spender to withdraw from the caller multiple times, up to\\n    ///         the `amount` amount. If this function is called again, it\\n    ///         overwrites the current allowance with `amount`. Reverts if the\\n    ///         approval reverted or if `receiveApproval` call on the spender\\n    ///         reverted.\\n    /// @return True if both approval and `receiveApproval` calls succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external override returns (bool) {\\n        if (approve(spender, amount)) {\\n            IReceiveApproval(spender).receiveApproval(\\n                msg.sender,\\n                amount,\\n                address(this),\\n                extraData\\n            );\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's\\n    ///         tokens.\\n    /// @return True if the operation succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    ///      Beware that changing an allowance with this method brings the risk\\n    ///      that someone may use both the old and the new allowance by\\n    ///      unfortunate transaction ordering. One possible solution to mitigate\\n    ///      this race condition is to first reduce the spender's allowance to 0\\n    ///      and set the desired value afterwards:\\n    ///      https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        // As explained in EIP-2612, if the DOMAIN_SEPARATOR contains the\\n        // chainId and is defined at contract deployment instead of\\n        // reconstructed for every signature, there is a risk of possible replay\\n        // attacks between chains in the event of a future chain split.\\n        // To address this issue, we check the cached chain ID against the\\n        // current one and in case they are different, we build domain separator\\n        // from scratch.\\n        if (block.chainid == cachedChainId) {\\n            return cachedDomainSeparator;\\n        } else {\\n            return buildDomainSeparator();\\n        }\\n    }\\n\\n    /// @dev Hook that is called before any transfer of tokens. This includes\\n    ///      minting and burning.\\n    ///\\n    /// Calling conditions:\\n    /// - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n    ///   will be to transferred to `to`.\\n    /// - when `from` is zero, `amount` tokens will be minted for `to`.\\n    /// - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n    /// - `from` and `to` are never both zero.\\n    // slither-disable-next-line dead-code\\n    function beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _burn(address account, uint256 amount) internal {\\n        uint256 currentBalance = balanceOf[account];\\n        require(currentBalance >= amount, \\\"Burn amount exceeds balance\\\");\\n\\n        beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] = currentBalance - amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _transfer(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(spender != address(0), \\\"Transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"Transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"Transfer to the token address\\\");\\n\\n        beforeTokenTransfer(spender, recipient, amount);\\n\\n        uint256 spenderBalance = balanceOf[spender];\\n        require(spenderBalance >= amount, \\\"Transfer amount exceeds balance\\\");\\n        balanceOf[spender] = spenderBalance - amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(spender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"Approve from the zero address\\\");\\n        require(spender != address(0), \\\"Approve to the zero address\\\");\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function buildDomainSeparator() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1e1bf4ec5c9d6fe70f6f834316482aeff3f122ff4ffaa7178099e7ae71a0b16d\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by tokens supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IApproveAndCall {\\n    /// @notice Executes `receiveApproval` function on spender as specified in\\n    ///         `IReceiveApproval` interface. Approves spender to withdraw from\\n    ///         the caller multiple times, up to the `amount`. If this\\n    ///         function is called again, it overwrites the current allowance\\n    ///         with `amount`. Reverts if the approval reverted or if\\n    ///         `receiveApproval` call on the spender reverted.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x393d18ef81a57dcc96fff4c340cc2945deaebb37b9796c322cf2bc96872c3df8\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IApproveAndCall.sol\\\";\\n\\n/// @title  IERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ninterface IERC20WithPermit is IERC20, IERC20Metadata, IApproveAndCall {\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    function burn(uint256 amount) external;\\n\\n    /// @notice Destroys `amount` of tokens from `account`, deducting the amount\\n    ///         from caller's allowance.\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    function nonce(address owner) external view returns (uint256);\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdac9a5086c19a7128b505a7be1ab0ac1aa314f6989cb88d2417e9d7383f89fa9\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by contracts supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IReceiveApproval {\\n    /// @notice Receives approval to spend tokens. Called as a result of\\n    ///         `approveAndCall` call on the token.\\n    function receiveApproval(\\n        address from,\\n        uint256 amount,\\n        address token,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6a30d83ad230548b1e7839737affc8489a035314209de14b89dbef7fb0f66395\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title  MisfundRecovery\\n/// @notice Allows the owner of the token contract extending MisfundRecovery\\n///         to recover any ERC20 and ERC721 sent mistakenly to the token\\n///         contract address.\\ncontract MisfundRecovery is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    function recoverERC20(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    function recoverERC721(\\n        IERC721 token,\\n        address recipient,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        token.safeTransferFrom(address(this), recipient, tokenId, data);\\n    }\\n}\\n\",\"keccak256\":\"0xbbfea02bf20e2a6df5a497bbc05c7540a3b7c7dfb8b1feeaffef7f6b8ba65d65\",\"license\":\"MIT\"},\"contracts/governance/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IVotesHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\n/// @title Checkpoints\\n/// @dev Abstract contract to support checkpoints for Compound-like voting and\\n///      delegation. This implementation supports token supply up to 2^96 - 1.\\n///      This contract keeps a history (checkpoints) of each account's vote\\n///      power. Vote power can be delegated either by calling the {delegate}\\n///      function directly, or by providing a signature to be used with\\n///      {delegateBySig}. Voting power can be publicly queried through\\n///      {getVotes} and {getPastVotes}.\\n///      NOTE: Extracted from OpenZeppelin ERCVotes.sol.\\n/// @dev This contract is upgrade-safe.\\nabstract contract Checkpoints is IVotesHistory {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) internal _delegates;\\n    mapping(address => uint128[]) internal _checkpoints;\\n    uint128[] internal _totalSupplyCheckpoints;\\n\\n    // Reserved storage space in case we need to add more variables,\\n    // since there are upgradeable contracts that inherit from this one.\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    // slither-disable-next-line unused-state\\n    uint256[47] private __gap;\\n\\n    /// @notice Emitted when an account changes their delegate.\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice Emitted when a balance or delegate change results in changes\\n    ///         to an account's voting power.\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    function checkpoints(address account, uint32 pos)\\n        public\\n        view\\n        virtual\\n        returns (Checkpoint memory checkpoint)\\n    {\\n        (uint32 fromBlock, uint96 votes) = decodeCheckpoint(\\n            _checkpoints[account][pos]\\n        );\\n        checkpoint = Checkpoint(fromBlock, votes);\\n    }\\n\\n    /// @notice Get number of checkpoints for `account`.\\n    function numCheckpoints(address account)\\n        public\\n        view\\n        virtual\\n        returns (uint32)\\n    {\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /// @notice Get the address `account` is currently delegating to.\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /// @notice Gets the current votes balance for `account`.\\n    /// @param account The address to get votes balance\\n    /// @return The number of current votes for `account`\\n    function getVotes(address account) public view returns (uint96) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : decodeValue(_checkpoints[account][pos - 1]);\\n    }\\n\\n    /// @notice Determine the prior number of votes for an account as of\\n    ///         a block number.\\n    /// @dev Block number must be a finalized block or else this function will\\n    ///      revert to prevent misinformation.\\n    /// @param account The address of the account to check\\n    /// @param blockNumber The block number to get the vote balance at\\n    /// @return The number of votes the account had as of the given block\\n    function getPastVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        return lookupCheckpoint(_checkpoints[account], blockNumber);\\n    }\\n\\n    /// @notice Retrieve the `totalSupply` at the end of `blockNumber`.\\n    ///         Note, this value is the sum of all balances, but it is NOT the\\n    ///         sum of all the delegated votes!\\n    /// @param blockNumber The block number to get the total supply at\\n    /// @dev `blockNumber` must have been already mined\\n    function getPastTotalSupply(uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        return lookupCheckpoint(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /// @notice Change delegation for `delegator` to `delegatee`.\\n    // slither-disable-next-line dead-code\\n    function delegate(address delegator, address delegatee) internal virtual;\\n\\n    /// @notice Moves voting power from one delegate to another\\n    /// @param src Address of old delegate\\n    /// @param dst Address of new delegate\\n    /// @param amount Voting power amount to transfer between delegates\\n    function moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) internal {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                // https://github.com/crytic/slither/issues/960\\n                // slither-disable-next-line variable-scope\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                    _checkpoints[src],\\n                    subtract,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                // https://github.com/crytic/slither/issues/959\\n                // slither-disable-next-line uninitialized-local\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                    _checkpoints[dst],\\n                    add,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    /// @notice Writes a new checkpoint based on operating last stored value\\n    ///         with a `delta`. Usually, said operation is the `add` or\\n    ///         `subtract` functions from this contract, but more complex\\n    ///         functions can be passed as parameters.\\n    /// @param ckpts The checkpoints array to use\\n    /// @param op The function to apply over the last value and the `delta`\\n    /// @param delta Variation with respect to last stored value to be used\\n    ///              for new checkpoint\\n    function writeCheckpoint(\\n        uint128[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : decodeValue(ckpts[pos - 1]);\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0) {\\n            uint32 fromBlock = decodeBlockNumber(ckpts[pos - 1]);\\n            // slither-disable-next-line incorrect-equality\\n            if (fromBlock == block.number) {\\n                ckpts[pos - 1] = encodeCheckpoint(\\n                    fromBlock,\\n                    SafeCastUpgradeable.toUint96(newWeight)\\n                );\\n                return (oldWeight, newWeight);\\n            }\\n        }\\n\\n        ckpts.push(\\n            encodeCheckpoint(\\n                SafeCastUpgradeable.toUint32(block.number),\\n                SafeCastUpgradeable.toUint96(newWeight)\\n            )\\n        );\\n    }\\n\\n    /// @notice Lookup a value in a list of (sorted) checkpoints.\\n    /// @param ckpts The checkpoints array to use\\n    /// @param blockNumber Block number when we want to get the checkpoint at\\n    function lookupCheckpoint(uint128[] storage ckpts, uint256 blockNumber)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        // We run a binary search to look for the earliest checkpoint taken\\n        // after `blockNumber`. During the loop, the index of the wanted\\n        // checkpoint remains in the range [low-1, high). With each iteration,\\n        // either `low` or `high` is moved towards the middle of the range to\\n        // maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`,\\n        //   we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`,\\n        //   we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the\\n        // right checkpoint at the index high-1, if not out of bounds (in that\\n        // case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for\\n        // `blockNumber`, we end up with an index that is past the end of the\\n        // array, so we technically don't find a checkpoint after\\n        // `blockNumber`, but it works out the same.\\n        require(blockNumber < block.number, \\\"Block not yet determined\\\");\\n\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            uint32 midBlock = decodeBlockNumber(ckpts[mid]);\\n            if (midBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : decodeValue(ckpts[high - 1]);\\n    }\\n\\n    /// @notice Maximum token supply. Defaults to `type(uint96).max` (2^96 - 1)\\n    // slither-disable-next-line dead-code\\n    function maxSupply() internal view virtual returns (uint96) {\\n        return type(uint96).max;\\n    }\\n\\n    /// @notice Encodes a `blockNumber` and `value` into a single `uint128`\\n    ///         checkpoint.\\n    /// @dev `blockNumber` is stored in the first 32 bits, while `value` in the\\n    ///      remaining 96 bits.\\n    function encodeCheckpoint(uint32 blockNumber, uint96 value)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return (uint128(blockNumber) << 96) | uint128(value);\\n    }\\n\\n    /// @notice Decodes a block number from a `uint128` `checkpoint`.\\n    function decodeBlockNumber(uint128 checkpoint)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return uint32(bytes4(bytes16(checkpoint)));\\n    }\\n\\n    /// @notice Decodes a voting value from a `uint128` `checkpoint`.\\n    function decodeValue(uint128 checkpoint) internal pure returns (uint96) {\\n        return uint96(checkpoint);\\n    }\\n\\n    /// @notice Decodes a block number and voting value from a `uint128`\\n    ///         `checkpoint`.\\n    function decodeCheckpoint(uint128 checkpoint)\\n        internal\\n        pure\\n        returns (uint32 blockNumber, uint96 value)\\n    {\\n        blockNumber = decodeBlockNumber(checkpoint);\\n        value = decodeValue(checkpoint);\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x67b28349e88afe7440c43df93ba5de56873d850a25147161e4469731750efb16\",\"license\":\"GPL-3.0-or-later\"},\"contracts/governance/IVotesHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\ninterface IVotesHistory {\\n    function getPastVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    function getPastTotalSupply(uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n}\\n\",\"keccak256\":\"0x535e87cf4c2e9a9439d99cf0918f013965fa6c4ddfbab07ff6ca4b195c8edc9f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/IApplication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.9;\\n\\n/// @title  Application interface for Threshold Network applications\\n/// @notice Generic interface for an application. Application is an external\\n///         smart contract or a set of smart contracts utilizing functionalities\\n///         offered by Threshold Network. Applications authorized for the given\\n///         staking provider are eligible to slash the stake delegated to that\\n///         staking provider.\\ninterface IApplication {\\n    /// @dev Event emitted by `withdrawRewards` function.\\n    event RewardsWithdrawn(address indexed stakingProvider, uint96 amount);\\n\\n    /// @notice Withdraws application rewards for the given staking provider.\\n    ///         Rewards are withdrawn to the staking provider's beneficiary\\n    ///         address set in the staking contract.\\n    /// @dev Emits `RewardsWithdrawn` event.\\n    function withdrawRewards(address stakingProvider) external;\\n\\n    /// @notice Used by T staking contract to inform the application that the\\n    ///         authorized amount for the given staking provider increased.\\n    ///         The application may do any necessary housekeeping. The\\n    ///         application must revert the transaction in case the\\n    ///         authorization is below the minimum required.\\n    function authorizationIncreased(\\n        address stakingProvider,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    ) external;\\n\\n    /// @notice Used by T staking contract to inform the application that the\\n    ///         authorization decrease for the given staking provider has been\\n    ///         requested. The application should mark the authorization as\\n    ///         pending decrease and respond to the staking contract with\\n    ///         `approveAuthorizationDecrease` at its discretion. It may\\n    ///         happen right away but it also may happen several months later.\\n    ///         If there is already a pending authorization decrease request\\n    ///         for the application, and the application does not agree for\\n    ///         overwriting it, the function should revert.\\n    function authorizationDecreaseRequested(\\n        address stakingProvider,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    ) external;\\n\\n    /// @notice Used by T staking contract to inform the application the\\n    ///         authorization has been decreased for the given staking provider\\n    ///         involuntarily, as a result of slashing. Lets the application to\\n    ///         do any housekeeping neccessary. Called with 250k gas limit and\\n    ///         does not revert the transaction if\\n    ///         `involuntaryAuthorizationDecrease` call failed.\\n    function involuntaryAuthorizationDecrease(\\n        address stakingProvider,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    ) external;\\n\\n    /// @notice Returns the amount of application rewards available for\\n    ///         withdrawal for the given staking provider.\\n    function availableRewards(address stakingProvider)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /// @notice The minimum authorization amount required for the staking\\n    ///         provider so that they can participate in the application.\\n    function minimumAuthorization() external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x43d707dccc548bf48ad316d9652450cb297203234d251132cdc6b97508eb44c5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/ILegacyTokenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\n/// @title IKeepTokenStaking\\n/// @notice Interface for Keep TokenStaking contract\\ninterface IKeepTokenStaking {\\n    /// @notice Seize provided token amount from every member in the misbehaved\\n    /// operators array. The tattletale is rewarded with 5% of the total seized\\n    /// amount scaled by the reward adjustment parameter and the rest 95% is burned.\\n    /// @param amountToSeize Token amount to seize from every misbehaved operator.\\n    /// @param rewardMultiplier Reward adjustment in percentage. Min 1% and 100% max.\\n    /// @param tattletale Address to receive the 5% reward.\\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\\n    function seize(\\n        uint256 amountToSeize,\\n        uint256 rewardMultiplier,\\n        address tattletale,\\n        address[] memory misbehavedOperators\\n    ) external;\\n\\n    /// @notice Gets stake delegation info for the given operator.\\n    /// @param operator Operator address.\\n    /// @return amount The amount of tokens the given operator delegated.\\n    /// @return createdAt The time when the stake has been delegated.\\n    /// @return undelegatedAt The time when undelegation has been requested.\\n    /// If undelegation has not been requested, 0 is returned.\\n    function getDelegationInfo(address operator)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 createdAt,\\n            uint256 undelegatedAt\\n        );\\n\\n    /// @notice Gets the stake owner for the specified operator address.\\n    /// @return Stake owner address.\\n    function ownerOf(address operator) external view returns (address);\\n\\n    /// @notice Gets the beneficiary for the specified operator address.\\n    /// @return Beneficiary address.\\n    function beneficiaryOf(address operator)\\n        external\\n        view\\n        returns (address payable);\\n\\n    /// @notice Gets the authorizer for the specified operator address.\\n    /// @return Authorizer address.\\n    function authorizerOf(address operator) external view returns (address);\\n\\n    /// @notice Gets the eligible stake balance of the specified address.\\n    /// An eligible stake is a stake that passed the initialization period\\n    /// and is not currently undelegating. Also, the operator had to approve\\n    /// the specified operator contract.\\n    ///\\n    /// Operator with a minimum required amount of eligible stake can join the\\n    /// network and participate in new work selection.\\n    ///\\n    /// @param operator address of stake operator.\\n    /// @param operatorContract address of operator contract.\\n    /// @return balance an uint256 representing the eligible stake balance.\\n    function eligibleStake(address operator, address operatorContract)\\n        external\\n        view\\n        returns (uint256 balance);\\n}\\n\\n/// @title INuCypherStakingEscrow\\n/// @notice Interface for NuCypher StakingEscrow contract\\ninterface INuCypherStakingEscrow {\\n    /// @notice Slash the staker's stake and reward the investigator\\n    /// @param staker Staker's address\\n    /// @param penalty Penalty\\n    /// @param investigator Investigator\\n    /// @param reward Reward for the investigator\\n    function slashStaker(\\n        address staker,\\n        uint256 penalty,\\n        address investigator,\\n        uint256 reward\\n    ) external;\\n\\n    /// @notice Request merge between NuCypher staking contract and T staking contract.\\n    ///         Returns amount of staked tokens\\n    function requestMerge(address staker, address stakingProvider)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Get all tokens belonging to the staker\\n    function getAllTokens(address staker) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x807d42d248e94c1f2269c7aa27031302a1225525e1405010424dd91adcc092ab\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity ^0.8.9;\\n\\n/// @title Interface of Threshold Network staking contract\\n/// @notice The staking contract enables T owners to have their wallets offline\\n///         and their stake managed by staking providers on their behalf.\\n///         The staking contract does not define operator role. The operator\\n///         responsible for running off-chain client software is appointed by\\n///         the staking provider in the particular application utilizing the\\n///         staking contract. All off-chain client software should be able\\n///         to run without exposing operator's or staking provider\\u2019s private\\n///         key and should not require any owner\\u2019s keys at all. The stake\\n///         delegation optimizes the network throughput without compromising the\\n///         security of the owners\\u2019 stake.\\ninterface IStaking {\\n    enum StakeType {\\n        NU,\\n        KEEP,\\n        T\\n    }\\n\\n    //\\n    //\\n    // Delegating a stake\\n    //\\n    //\\n\\n    /// @notice Creates a delegation with `msg.sender` owner with the given\\n    ///         staking provider, beneficiary, and authorizer. Transfers the\\n    ///         given amount of T to the staking contract.\\n    /// @dev The owner of the delegation needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function stake(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer,\\n        uint96 amount\\n    ) external;\\n\\n    /// @notice Copies delegation from the legacy KEEP staking contract to T\\n    ///         staking contract. No tokens are transferred. Caches the active\\n    ///         stake amount from KEEP staking contract. Can be called by\\n    ///         anyone.\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\n    ///      staking contract operator.\\n    function stakeKeep(address stakingProvider) external;\\n\\n    /// @notice Copies delegation from the legacy NU staking contract to T\\n    ///         staking contract, additionally appointing staking provider,\\n    ///         beneficiary and authorizer roles. Caches the amount staked in NU\\n    ///         staking contract. Can be called only by the original delegation\\n    ///         owner.\\n    function stakeNu(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer\\n    ) external;\\n\\n    /// @notice Refresh Keep stake owner. Can be called only by the old owner\\n    ///         or their staking provider.\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\n    ///      staking contract operator.\\n    function refreshKeepStakeOwner(address stakingProvider) external;\\n\\n    /// @notice Allows the Governance to set the minimum required stake amount.\\n    ///         This amount is required to protect against griefing the staking\\n    ///         contract and individual applications are allowed to require\\n    ///         higher minimum stakes if necessary.\\n    function setMinimumStakeAmount(uint96 amount) external;\\n\\n    //\\n    //\\n    // Authorizing an application\\n    //\\n    //\\n\\n    /// @notice Allows the Governance to approve the particular application\\n    ///         before individual stake authorizers are able to authorize it.\\n    function approveApplication(address application) external;\\n\\n    /// @notice Increases the authorization of the given staking provider for\\n    ///         the given application by the given amount. Can only be called by\\n    ///         the authorizer for that staking provider.\\n    /// @dev Calls `authorizationIncreased(address stakingProvider, uint256 amount)`\\n    ///      on the given application to notify the application about\\n    ///      authorization change. See `IApplication`.\\n    function increaseAuthorization(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) external;\\n\\n    /// @notice Requests decrease of the authorization for the given staking\\n    ///         provider on the given application by the provided amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application if the application agrees for that. If the\\n    ///         application does not agree for overwriting, the function\\n    ///         reverts.\\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\\n    ///      on the given application. See `IApplication`.\\n    function requestAuthorizationDecrease(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) external;\\n\\n    /// @notice Requests decrease of all authorizations for the given staking\\n    ///         provider on all applications by all authorized amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application.\\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\\n    ///      for each authorized application. See `IApplication`.\\n    function requestAuthorizationDecrease(address stakingProvider) external;\\n\\n    /// @notice Called by the application at its discretion to approve the\\n    ///         previously requested authorization decrease request. Can only be\\n    ///         called by the application that was previously requested to\\n    ///         decrease the authorization for that staking provider.\\n    ///         Returns resulting authorized amount for the application.\\n    function approveAuthorizationDecrease(address stakingProvider)\\n        external\\n        returns (uint96);\\n\\n    /// @notice Decreases the authorization for the given `stakingProvider` on\\n    ///         the given disabled `application`, for all authorized amount.\\n    ///         Can be called by anyone.\\n    function forceDecreaseAuthorization(\\n        address stakingProvider,\\n        address application\\n    ) external;\\n\\n    /// @notice Pauses the given application\\u2019s eligibility to slash stakes.\\n    ///         Besides that stakers can't change authorization to the application.\\n    ///         Can be called only by the Panic Button of the particular\\n    ///         application. The paused application can not slash stakes until\\n    ///         it is approved again by the Governance using `approveApplication`\\n    ///         function. Should be used only in case of an emergency.\\n    function pauseApplication(address application) external;\\n\\n    /// @notice Disables the given application. The disabled application can't\\n    ///         slash stakers. Also stakers can't increase authorization to that\\n    ///         application but can decrease without waiting by calling\\n    ///         `requestAuthorizationDecrease` at any moment. Can be called only\\n    ///         by the governance. The disabled application can't be approved\\n    ///         again. Should be used only in case of an emergency.\\n    function disableApplication(address application) external;\\n\\n    /// @notice Sets the Panic Button role for the given application to the\\n    ///         provided address. Can only be called by the Governance. If the\\n    ///         Panic Button for the given application should be disabled, the\\n    ///         role address should be set to 0x0 address.\\n    function setPanicButton(address application, address panicButton) external;\\n\\n    /// @notice Sets the maximum number of applications one staking provider can\\n    ///         have authorized. Used to protect against DoSing slashing queue.\\n    ///         Can only be called by the Governance.\\n    function setAuthorizationCeiling(uint256 ceiling) external;\\n\\n    //\\n    //\\n    // Stake top-up\\n    //\\n    //\\n\\n    /// @notice Increases the amount of the stake for the given staking provider.\\n    /// @dev The sender of this transaction needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function topUp(address stakingProvider, uint96 amount) external;\\n\\n    /// @notice Propagates information about stake top-up from the legacy KEEP\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpKeep(address stakingProvider) external;\\n\\n    /// @notice Propagates information about stake top-up from the legacy NU\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpNu(address stakingProvider) external;\\n\\n    //\\n    //\\n    // Undelegating a stake (unstaking)\\n    //\\n    //\\n\\n    /// @notice Reduces the liquid T stake amount by the provided amount and\\n    ///         withdraws T to the owner. Reverts if there is at least one\\n    ///         authorization higher than the sum of the legacy stake and\\n    ///         remaining liquid T stake or if the unstake amount is higher than\\n    ///         the liquid T stake amount. Can be called only by the delegation\\n    ///         owner or the staking provider.\\n    function unstakeT(address stakingProvider, uint96 amount) external;\\n\\n    /// @notice Sets the legacy KEEP staking contract active stake amount cached\\n    ///         in T staking contract to 0. Reverts if the amount of liquid T\\n    ///         staked in T staking contract is lower than the highest\\n    ///         application authorization. This function allows to unstake from\\n    ///         KEEP staking contract and still being able to operate in T\\n    ///         network and earning rewards based on the liquid T staked. Can be\\n    ///         called only by the delegation owner or the staking provider.\\n    function unstakeKeep(address stakingProvider) external;\\n\\n    /// @notice Reduces cached legacy NU stake amount by the provided amount.\\n    ///         Reverts if there is at least one authorization higher than the\\n    ///         sum of remaining legacy NU stake and liquid T stake for that\\n    ///         staking provider or if the untaked amount is higher than the\\n    ///         cached legacy stake amount. If succeeded, the legacy NU stake\\n    ///         can be partially or fully undelegated on the legacy staking\\n    ///         contract. This function allows to unstake from NU staking\\n    ///         contract and still being able to operate in T network and\\n    ///         earning rewards based on the liquid T staked. Can be called only\\n    ///         by the delegation owner or the staking provider.\\n    function unstakeNu(address stakingProvider, uint96 amount) external;\\n\\n    /// @notice Sets cached legacy stake amount to 0, sets the liquid T stake\\n    ///         amount to 0 and withdraws all liquid T from the stake to the\\n    ///         owner. Reverts if there is at least one non-zero authorization.\\n    ///         Can be called only by the delegation owner or the staking\\n    ///         provider.\\n    function unstakeAll(address stakingProvider) external;\\n\\n    //\\n    //\\n    // Keeping information in sync\\n    //\\n    //\\n\\n    /// @notice Notifies about the discrepancy between legacy KEEP active stake\\n    ///         and the amount cached in T staking contract. Slashes the staking\\n    ///         provider in case the amount cached is higher than the actual\\n    ///         active stake amount in KEEP staking contract. Needs to update\\n    ///         authorizations of all affected applications and execute an\\n    ///         involuntary allocation decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    function notifyKeepStakeDiscrepancy(address stakingProvider) external;\\n\\n    /// @notice Notifies about the discrepancy between legacy NU active stake\\n    ///         and the amount cached in T staking contract. Slashes the\\n    ///         staking provider in case the amount cached is higher than the\\n    ///         actual active stake amount in NU staking contract. Needs to\\n    ///         update authorizations of all affected applications and execute\\n    ///         an involuntary allocation decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    function notifyNuStakeDiscrepancy(address stakingProvider) external;\\n\\n    /// @notice Sets the penalty amount for stake discrepancy and reward\\n    ///         multiplier for reporting it. The penalty is seized from the\\n    ///         delegated stake, and 5% of the penalty, scaled by the\\n    ///         multiplier, is given to the notifier. The rest of the tokens are\\n    ///         burned. Can only be called by the Governance. See `seize` function.\\n    function setStakeDiscrepancyPenalty(\\n        uint96 penalty,\\n        uint256 rewardMultiplier\\n    ) external;\\n\\n    /// @notice Sets reward in T tokens for notification of misbehaviour\\n    ///         of one staking provider. Can only be called by the governance.\\n    function setNotificationReward(uint96 reward) external;\\n\\n    /// @notice Transfer some amount of T tokens as reward for notifications\\n    ///         of misbehaviour\\n    function pushNotificationReward(uint96 reward) external;\\n\\n    /// @notice Withdraw some amount of T tokens from notifiers treasury.\\n    ///         Can only be called by the governance.\\n    function withdrawNotificationReward(address recipient, uint96 amount)\\n        external;\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount that should be slashed from each one of them. Can only be\\n    ///         called by application authorized for all staking providers in\\n    ///         the array.\\n    function slash(uint96 amount, address[] memory stakingProviders) external;\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount. The notifier will receive reward per each staking\\n    ///         provider from notifiers treasury. Can only be called by\\n    ///         application authorized for all staking providers in the array.\\n    function seize(\\n        uint96 amount,\\n        uint256 rewardMultipier,\\n        address notifier,\\n        address[] memory stakingProviders\\n    ) external;\\n\\n    /// @notice Takes the given number of queued slashing operations and\\n    ///         processes them. Receives 5% of the slashed amount.\\n    ///         Executes `involuntaryAllocationDecrease` function on each\\n    ///         affected application.\\n    function processSlashing(uint256 count) external;\\n\\n    //\\n    //\\n    // Auxiliary functions\\n    //\\n    //\\n\\n    /// @notice Returns the authorized stake amount of the staking provider for\\n    ///         the application.\\n    function authorizedStake(address stakingProvider, address application)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /// @notice Returns staked amount of T, Keep and Nu for the specified\\n    ///         staking provider.\\n    /// @dev    All values are in T denomination\\n    function stakes(address stakingProvider)\\n        external\\n        view\\n        returns (\\n            uint96 tStake,\\n            uint96 keepInTStake,\\n            uint96 nuInTStake\\n        );\\n\\n    /// @notice Returns start staking timestamp.\\n    /// @dev    This value is set at most once.\\n    function getStartStakingTimestamp(address stakingProvider)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns staked amount of NU for the specified staking provider.\\n    function stakedNu(address stakingProvider) external view returns (uint256);\\n\\n    /// @notice Gets the stake owner, the beneficiary and the authorizer\\n    ///         for the specified staking provider address.\\n    /// @return owner Stake owner address.\\n    /// @return beneficiary Beneficiary address.\\n    /// @return authorizer Authorizer address.\\n    function rolesOf(address stakingProvider)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            address payable beneficiary,\\n            address authorizer\\n        );\\n\\n    /// @notice Returns length of application array\\n    function getApplicationsLength() external view returns (uint256);\\n\\n    /// @notice Returns length of slashing queue\\n    function getSlashingQueueLength() external view returns (uint256);\\n\\n    /// @notice Returns minimum possible stake for T, KEEP or NU in T\\n    ///         denomination.\\n    /// @dev For example, suppose the given staking provider has 10 T, 20 T\\n    ///      worth of KEEP, and 30 T worth of NU all staked, and the maximum\\n    ///      application authorization is 40 T, then `getMinStaked` for\\n    ///      that staking provider returns:\\n    ///          * 0 T if KEEP stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\\n    ///          * 10 T if NU stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\\n    ///          * 0 T if T stake type specified i.e.\\n    ///            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\\n    ///      In other words, the minimum stake amount for the specified\\n    ///      stake type is the minimum amount of stake of the given type\\n    ///      needed to satisfy the maximum application authorization given the\\n    ///      staked amounts of the other stake types for that staking provider.\\n    function getMinStaked(address stakingProvider, StakeType stakeTypes)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /// @notice Returns available amount to authorize for the specified application\\n    function getAvailableToAuthorize(\\n        address stakingProvider,\\n        address application\\n    ) external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x5fde659b8fe5fffb695e55d84df1b1efe89978470d2d7a42f287d92a7fcc8b79\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/KeepStake.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ILegacyTokenStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title KEEP ManagedGrant contract interface\\ninterface IManagedGrant {\\n    function grantee() external view returns (address);\\n}\\n\\n/// @title KEEP stake owner resolver\\n/// @notice T network staking contract supports existing KEEP stakes by allowing\\n///         KEEP stakers to use their stakes in T network and weights them based\\n///         on KEEP<>T token ratio. KEEP stake owner is cached in T staking\\n///         contract and used to restrict access to all functions only owner or\\n///         operator should call. To cache KEEP stake owner in T staking\\n///         contract, T staking contract first needs to resolve the owner.\\n///\\n///         Resolving liquid KEEP stake owner is easy. Resolving token grant\\n///         stake owner is complicated and not possible to do on-chain from\\n///         a contract external to KEEP TokenStaking contract. Keep TokenStaking\\n///         knows the grant ID but does not expose it externally.\\n///\\n///         KeepStake contract addresses this problem by exposing\\n///         operator-owner mappings snapshotted off-chain based on events and\\n///         information publicly available from KEEP TokenStaking contract and\\n///         KEEP TokenGrant contract. Additionally, it gives the Governance\\n///         ability to add new mappings in case they are ever needed; in\\n///         practice, this will be needed only if someone decides to stake their\\n///         KEEP token grant in KEEP network after 2021-11-11 when the snapshot\\n///         was taken.\\n///\\n///         Operator-owner pairs were snapshotted 2021-11-11 in the following\\n///         way:\\n///         1. Fetch all TokenStaking events from KEEP staking contract.\\n///         2. Filter out undelegated operators.\\n///         3. Filter out canceled delegations.\\n///         4. Fetch grant stake information from KEEP TokenGrant for that\\n///            operator to determine if we are dealing with grant delegation.\\n///         5. Fetch grantee address from KEEP TokenGrant contract.\\n///         6. Check if we are dealing with ManagedGrant by looking for all\\n///            created ManagedGrants and comparing their address against grantee\\n///            address fetched from TokenGrant contract.\\ncontract KeepStake is Ownable {\\n    IKeepTokenStaking public immutable keepTokenStaking;\\n\\n    mapping(address => address) public operatorToManagedGrant;\\n    mapping(address => address) public operatorToGrantee;\\n\\n    constructor(IKeepTokenStaking _keepTokenStaking) {\\n        keepTokenStaking = _keepTokenStaking;\\n    }\\n\\n    /// @notice Allows the Governance to set new operator-managed grant pair.\\n    ///         This function should only be called for managed grants if\\n    ///         the snapshot does include this pair.\\n    function setManagedGrant(address operator, address managedGrant)\\n        external\\n        onlyOwner\\n    {\\n        operatorToManagedGrant[operator] = managedGrant;\\n    }\\n\\n    /// @notice Allows the Governance to set new operator-grantee pair.\\n    ///         This function should only be called for non-managed grants if\\n    ///         the snapshot does include this pair.\\n    function setGrantee(address operator, address grantee) external onlyOwner {\\n        operatorToGrantee[operator] = grantee;\\n    }\\n\\n    /// @notice Resolves KEEP stake owner for the provided operator address.\\n    ///         Reverts if could not resolve the owner.\\n    function resolveOwner(address operator) external view returns (address) {\\n        address owner = operatorToManagedGrant[operator];\\n        if (owner != address(0)) {\\n            return IManagedGrant(owner).grantee();\\n        }\\n\\n        owner = operatorToGrantee[operator];\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n\\n        owner = resolveSnapshottedManagedGrantees(operator);\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n\\n        owner = resolveSnapshottedGrantees(operator);\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n\\n        owner = keepTokenStaking.ownerOf(operator);\\n        require(owner != address(0), \\\"Could not resolve the owner\\\");\\n\\n        return owner;\\n    }\\n\\n    function resolveSnapshottedManagedGrantees(address operator)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        if (operator == 0x855A951162B1B93D70724484d5bdc9D00B56236B) {\\n            return\\n                IManagedGrant(0xFADbF758307A054C57B365Db1De90acA71feaFE5)\\n                    .grantee();\\n        }\\n        if (operator == 0xF1De9490Bf7298b5F350cE74332Ad7cf8d5cB181) {\\n            return\\n                IManagedGrant(0xAEd493Aaf3E76E83b29E151848b71eF4544f92f1)\\n                    .grantee();\\n        }\\n        if (operator == 0x39d2aCBCD80d80080541C6eed7e9feBb8127B2Ab) {\\n            return\\n                IManagedGrant(0xA2fa09D6f8C251422F5fde29a0BAd1C53dEfAe66)\\n                    .grantee();\\n        }\\n        if (operator == 0xd66cAE89FfBc6E50e6b019e45c1aEc93Dec54781) {\\n            return\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\n                    .grantee();\\n        }\\n        if (operator == 0x2eBE08379f4fD866E871A9b9E1d5C695154C6A9F) {\\n            return\\n                IManagedGrant(0xd00c0d43b747C33726B3f0ff4BDA4b72dc53c6E9)\\n                    .grantee();\\n        }\\n        if (operator == 0xA97c34278162b556A527CFc01B53eb4DDeDFD223) {\\n            return\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\n                    .grantee();\\n        }\\n        if (operator == 0x6C76d49322C9f8761A1623CEd89A31490cdB649d) {\\n            return\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\n                    .grantee();\\n        }\\n        if (operator == 0x4a41c7a884d119eaaefE471D0B3a638226408382) {\\n            return\\n                IManagedGrant(0xcdf3d216d82a463Ce82971F2F5DA3d8f9C5f093A)\\n                    .grantee();\\n        }\\n        if (operator == 0x9c06Feb7Ebc8065ee11Cd5E8EEdaAFb2909A7087) {\\n            return\\n                IManagedGrant(0x45119cd98d145283762BA9eBCAea75F72D188733)\\n                    .grantee();\\n        }\\n        if (operator == 0x9bD818Ab6ACC974f2Cf2BD2EBA7a250126Accb9F) {\\n            return\\n                IManagedGrant(0x6E535043377067621954ee84065b0bd7357e7aBa)\\n                    .grantee();\\n        }\\n        if (operator == 0x1d803c89760F8B4057DB15BCb3B8929E0498D310) {\\n            return\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\n                    .grantee();\\n        }\\n        if (operator == 0x3101927DEeC27A2bfA6c4a6316e3A221f631dB91) {\\n            return\\n                IManagedGrant(0x178Bf1946feD0e2362fdF8bcD3f91F0701a012C6)\\n                    .grantee();\\n        }\\n        if (operator == 0x9d9b187E478bC62694A7bED216Fc365de87F280C) {\\n            return\\n                IManagedGrant(0xFBad17CFad6cb00D726c65501D69FdC13Ca5477c)\\n                    .grantee();\\n        }\\n        if (operator == 0xd977144724Bc77FaeFAe219F958AE3947205d0b5) {\\n            return\\n                IManagedGrant(0x087B442BFd4E42675cf2df5fa566F87d7A96Fb12)\\n                    .grantee();\\n        }\\n        if (operator == 0x045E511f53DeBF55c9C0B4522f14F602f7C7cA81) {\\n            return\\n                IManagedGrant(0xFcfe8C036C414a15cF871071c483687095caF7D6)\\n                    .grantee();\\n        }\\n        if (operator == 0x3Dd301b3c96A282d8092E1e6f6846f24172D45C1) {\\n            return\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\n                    .grantee();\\n        }\\n        if (operator == 0x5d84DEB482E770479154028788Df79aA7C563aA4) {\\n            return\\n                IManagedGrant(0x9D1a179c469a8BdD0b683A9f9250246cc47e8fBE)\\n                    .grantee();\\n        }\\n        if (operator == 0x1dF927B69A97E8140315536163C029d188e8573b) {\\n            return\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\n                    .grantee();\\n        }\\n        if (operator == 0x617daCE069Fbd41993491de211b4DfccdAcbd348) {\\n            return\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\n                    .grantee();\\n        }\\n        if (operator == 0x650A9eD18Df873cad98C88dcaC8170531cAD2399) {\\n            return\\n                IManagedGrant(0x1Df7324A3aD20526DFa02Cc803eD2D97Cac81F3b)\\n                    .grantee();\\n        }\\n        if (operator == 0x07C9a8f8264221906b7b8958951Ce4753D39628B) {\\n            return\\n                IManagedGrant(0x305D12b4d70529Cd618dA7399F5520701E510041)\\n                    .grantee();\\n        }\\n        if (operator == 0x63eB4c3DD0751F9BE7070A01156513C227fa1eF6) {\\n            return\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\n                    .grantee();\\n        }\\n        if (operator == 0xc6349eEC31048787676b6297ba71721376A8DdcF) {\\n            return\\n                IManagedGrant(0xac1a985E75C6a0b475b9c807Ad0705a988Be2D99)\\n                    .grantee();\\n        }\\n        if (operator == 0x3B945f9C0C8737e44f8e887d4F04B5B3A491Ac4d) {\\n            return\\n                IManagedGrant(0x82e17477726E8D9D2C237745cA9989631582eE98)\\n                    .grantee();\\n        }\\n        if (operator == 0xF35343299a4f80Dd5D917bbe5ddd54eBB820eBd4) {\\n            return\\n                IManagedGrant(0xCC88c15506251B62ccCeebA193e100d6bBC9a30D)\\n                    .grantee();\\n        }\\n        if (operator == 0x3B9e5ae72d068448bB96786989c0d86FBC0551D1) {\\n            return\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\n                    .grantee();\\n        }\\n        if (operator == 0xB2D53Be158Cb8451dFc818bD969877038c1BdeA1) {\\n            return\\n                IManagedGrant(0xaE55e3800f0A3feaFdcE535A8C0fab0fFdB90DEe)\\n                    .grantee();\\n        }\\n        if (operator == 0xF6dbF7AFe05b8Bb6f198eC7e69333c98D3C4608C) {\\n            return\\n                IManagedGrant(0xbb8D24a20c20625f86739824014C3cBAAAb26700)\\n                    .grantee();\\n        }\\n        if (operator == 0xB62Fc1ADfFb2ab832041528C8178358338d85f76) {\\n            return\\n                IManagedGrant(0x9ED98fD1C29018B9342CB8F57A3073B9695f0c02)\\n                    .grantee();\\n        }\\n        if (operator == 0x9bC8d30d971C9e74298112803036C05db07D73e3) {\\n            return\\n                IManagedGrant(0x66beda757939f8e505b5Eb883cd02C8d4a11Bca2)\\n                    .grantee();\\n        }\\n\\n        return address(0);\\n    }\\n\\n    function resolveSnapshottedGrantees(address operator)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        if (operator == 0x1147ccFB4AEFc6e587a23b78724Ef20Ec6e474D4) {\\n            return 0x3FB49dA4375Ef9019f17990D04c6d5daD482D80a;\\n        }\\n        if (operator == 0x4c21541f95a00C03C75F38C71DC220bd27cbbEd9) {\\n            return 0xC897cfeE43a8d827F76D4226994D5CE5EBBe2571;\\n        }\\n        if (operator == 0x7E6332d18719a5463d3867a1a892359509589a3d) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0x8Bd660A764Ca14155F3411a4526a028b6316CB3E) {\\n            return 0xf6f372DfAeCC1431186598c304e91B79Ce115766;\\n        }\\n        if (operator == 0x4F4f0D0dfd93513B3f4Cb116Fe9d0A005466F725) {\\n            return 0x8b055ac1c4dd287E2a46D4a52d61FE76FB551bD0;\\n        }\\n        if (operator == 0x1DF0250027fEC876d8876d1ac7A392c9098F1a1e) {\\n            return 0xE408fFa969707Ce5d7aA3e5F8d44674Fa4b26219;\\n        }\\n        if (operator == 0x860EF3f83B6adFEF757F98345c3B8DdcFCA9d152) {\\n            return 0x08a3633AAb8f3E436DEA204288Ee26Fe094406b0;\\n        }\\n        if (operator == 0xe3a2d16dA142E6B190A5d9F7e0C07cc460B58A5F) {\\n            return 0x875f8fFCDDeD63B5d8Cf54be4E4b82FE6c6E249C;\\n        }\\n        if (operator == 0xBDE07f1cA107Ef319b0Bb26eBF1d0a5b4c97ffc1) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0xE86181D6b672d78D33e83029fF3D0ef4A601B4C4) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0xb7c561e2069aCaE2c4480111B1606790BB4E13fE) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0x526c013f8382B050d32d86e7090Ac84De22EdA4D) {\\n            return 0x61C6E5DDacded540CD08066C08cbc096d22D91f4;\\n        }\\n\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xc75f6be595ec0e0c885d689786808a53b70c0a170a53dd344228359dc6aaf178\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/TokenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IApplication.sol\\\";\\nimport \\\"./ILegacyTokenStaking.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"./KeepStake.sol\\\";\\nimport \\\"../governance/Checkpoints.sol\\\";\\nimport \\\"../token/T.sol\\\";\\nimport \\\"../utils/PercentUtils.sol\\\";\\nimport \\\"../utils/SafeTUpgradeable.sol\\\";\\nimport \\\"../vending/VendingMachine.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/// @notice TokenStaking is the main staking contract of the Threshold Network.\\n///         Apart from the basic usage of enabling T stakes, it also acts as a\\n///         sort of \\\"meta-staking\\\" contract, accepting existing legacy NU/KEEP\\n///         stakes. Additionally, it serves as application manager for the apps\\n///         that run on the Threshold Network. Note that legacy NU/KEEP staking\\n///         contracts see TokenStaking as an application (e.g., slashing is\\n///         requested by TokenStaking and performed by the legacy contracts).\\n/// @dev TokenStaking is upgradeable, using OpenZeppelin's Upgradeability\\n///      framework. As such, it is required to satisfy OZ's guidelines, like\\n///      restrictions on constructors, immutable variables, base contracts and\\n///      libraries. See https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\ncontract TokenStaking is Initializable, IStaking, Checkpoints {\\n    using SafeTUpgradeable for T;\\n    using PercentUtils for uint256;\\n    using SafeCastUpgradeable for uint256;\\n\\n    enum ApplicationStatus {\\n        NOT_APPROVED,\\n        APPROVED,\\n        PAUSED,\\n        DISABLED\\n    }\\n\\n    struct StakingProviderInfo {\\n        uint96 nuInTStake;\\n        address owner;\\n        uint96 keepInTStake;\\n        address payable beneficiary;\\n        uint96 tStake;\\n        address authorizer;\\n        mapping(address => AppAuthorization) authorizations;\\n        address[] authorizedApplications;\\n        uint256 startStakingTimestamp;\\n    }\\n\\n    struct AppAuthorization {\\n        uint96 authorized;\\n        uint96 deauthorizing;\\n    }\\n\\n    struct ApplicationInfo {\\n        ApplicationStatus status;\\n        address panicButton;\\n    }\\n\\n    struct SlashingEvent {\\n        address stakingProvider;\\n        uint96 amount;\\n    }\\n\\n    uint256 internal constant SLASHING_REWARD_PERCENT = 5;\\n    uint256 internal constant MIN_STAKE_TIME = 24 hours;\\n    uint256 internal constant GAS_LIMIT_AUTHORIZATION_DECREASE = 250000;\\n    uint256 internal constant CONVERSION_DIVISOR = 10**(18 - 3);\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    T internal immutable token;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IKeepTokenStaking internal immutable keepStakingContract;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    KeepStake internal immutable keepStake;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    INuCypherStakingEscrow internal immutable nucypherStakingContract;\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    uint256 internal immutable keepRatio;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    uint256 internal immutable nucypherRatio;\\n\\n    address public governance;\\n    uint96 public minTStakeAmount;\\n    uint256 public authorizationCeiling;\\n    uint96 public stakeDiscrepancyPenalty;\\n    uint256 public stakeDiscrepancyRewardMultiplier;\\n\\n    uint256 public notifiersTreasury;\\n    uint256 public notificationReward;\\n\\n    mapping(address => StakingProviderInfo) internal stakingProviders;\\n    mapping(address => ApplicationInfo) public applicationInfo;\\n    address[] public applications;\\n\\n    SlashingEvent[] public slashingQueue;\\n    uint256 public slashingQueueIndex;\\n\\n    event Staked(\\n        StakeType indexed stakeType,\\n        address indexed owner,\\n        address indexed stakingProvider,\\n        address beneficiary,\\n        address authorizer,\\n        uint96 amount\\n    );\\n    event MinimumStakeAmountSet(uint96 amount);\\n    event ApplicationStatusChanged(\\n        address indexed application,\\n        ApplicationStatus indexed newStatus\\n    );\\n    event AuthorizationIncreased(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    );\\n    event AuthorizationDecreaseRequested(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    );\\n    event AuthorizationDecreaseApproved(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    );\\n    event AuthorizationInvoluntaryDecreased(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount,\\n        bool indexed successfulCall\\n    );\\n    event PanicButtonSet(\\n        address indexed application,\\n        address indexed panicButton\\n    );\\n    event AuthorizationCeilingSet(uint256 ceiling);\\n    event ToppedUp(address indexed stakingProvider, uint96 amount);\\n    event Unstaked(address indexed stakingProvider, uint96 amount);\\n    event TokensSeized(\\n        address indexed stakingProvider,\\n        uint96 amount,\\n        bool indexed discrepancy\\n    );\\n    event StakeDiscrepancyPenaltySet(uint96 penalty, uint256 rewardMultiplier);\\n    event NotificationRewardSet(uint96 reward);\\n    event NotificationRewardPushed(uint96 reward);\\n    event NotificationRewardWithdrawn(address recipient, uint96 amount);\\n    event NotifierRewarded(address indexed notifier, uint256 amount);\\n    event SlashingProcessed(\\n        address indexed caller,\\n        uint256 count,\\n        uint256 tAmount\\n    );\\n    event OwnerRefreshed(\\n        address indexed stakingProvider,\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n    event GovernanceTransferred(address oldGovernance, address newGovernance);\\n\\n    modifier onlyGovernance() {\\n        require(governance == msg.sender, \\\"Caller is not the governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyPanicButtonOf(address application) {\\n        require(\\n            applicationInfo[application].panicButton == msg.sender,\\n            \\\"Caller is not the panic button\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorizerOf(address stakingProvider) {\\n        //slither-disable-next-line incorrect-equality\\n        require(\\n            stakingProviders[stakingProvider].authorizer == msg.sender,\\n            \\\"Not authorizer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrStakingProvider(address stakingProvider) {\\n        //slither-disable-next-line incorrect-equality\\n        require(\\n            stakingProviders[stakingProvider].owner != address(0) &&\\n                (stakingProvider == msg.sender ||\\n                    stakingProviders[stakingProvider].owner == msg.sender),\\n            \\\"Not owner or provider\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _token Address of T token contract\\n    /// @param _keepStakingContract Address of Keep staking contract\\n    /// @param _nucypherStakingContract Address of NuCypher staking contract\\n    /// @param _keepVendingMachine Address of Keep vending machine\\n    /// @param _nucypherVendingMachine Address of NuCypher vending machine\\n    /// @param _keepStake Address of Keep contract with grant owners\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        T _token,\\n        IKeepTokenStaking _keepStakingContract,\\n        INuCypherStakingEscrow _nucypherStakingContract,\\n        VendingMachine _keepVendingMachine,\\n        VendingMachine _nucypherVendingMachine,\\n        KeepStake _keepStake\\n    ) {\\n        // calls to check contracts are working\\n        require(\\n            _token.totalSupply() > 0 &&\\n                _keepStakingContract.ownerOf(address(0)) == address(0) &&\\n                _nucypherStakingContract.getAllTokens(address(0)) == 0 &&\\n                AddressUpgradeable.isContract(address(_keepStake)),\\n            \\\"Wrong input parameters\\\"\\n        );\\n        token = _token;\\n        keepStakingContract = _keepStakingContract;\\n        keepStake = _keepStake;\\n        nucypherStakingContract = _nucypherStakingContract;\\n\\n        keepRatio = _keepVendingMachine.ratio();\\n        nucypherRatio = _nucypherVendingMachine.ratio();\\n    }\\n\\n    function initialize() external initializer {\\n        _transferGovernance(msg.sender);\\n    }\\n\\n    //\\n    //\\n    // Delegating a stake\\n    //\\n    //\\n\\n    /// @notice Creates a delegation with `msg.sender` owner with the given\\n    ///         staking provider, beneficiary, and authorizer. Transfers the\\n    ///         given amount of T to the staking contract.\\n    /// @dev The owner of the delegation needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function stake(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer,\\n        uint96 amount\\n    ) external override {\\n        require(\\n            stakingProvider != address(0) &&\\n                beneficiary != address(0) &&\\n                authorizer != address(0),\\n            \\\"Parameters must be specified\\\"\\n        );\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        (, uint256 createdAt, ) = keepStakingContract.getDelegationInfo(\\n            stakingProvider\\n        );\\n        require(\\n            createdAt == 0 && stakingProviderStruct.owner == address(0),\\n            \\\"Provider is already in use\\\"\\n        );\\n        require(\\n            amount > 0 && amount >= minTStakeAmount,\\n            \\\"Amount is less than minimum\\\"\\n        );\\n        stakingProviderStruct.owner = msg.sender;\\n        stakingProviderStruct.authorizer = authorizer;\\n        stakingProviderStruct.beneficiary = beneficiary;\\n\\n        stakingProviderStruct.tStake = amount;\\n        /* solhint-disable-next-line not-rely-on-time */\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\n\\n        increaseStakeCheckpoint(stakingProvider, amount);\\n\\n        emit Staked(\\n            StakeType.T,\\n            msg.sender,\\n            stakingProvider,\\n            beneficiary,\\n            authorizer,\\n            amount\\n        );\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /// @notice Copies delegation from the legacy KEEP staking contract to T\\n    ///         staking contract. No tokens are transferred. Caches the active\\n    ///         stake amount from KEEP staking contract. Can be called by\\n    ///         anyone.\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\n    ///      staking contract operator.\\n    function stakeKeep(address stakingProvider) external override {\\n        require(stakingProvider != address(0), \\\"Parameters must be specified\\\");\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n\\n        require(\\n            stakingProviderStruct.owner == address(0),\\n            \\\"Provider is already in use\\\"\\n        );\\n\\n        uint96 tAmount = getKeepAmountInT(stakingProvider);\\n        require(tAmount != 0, \\\"Nothing to sync\\\");\\n\\n        stakingProviderStruct.keepInTStake = tAmount;\\n        stakingProviderStruct.owner = keepStake.resolveOwner(stakingProvider);\\n        stakingProviderStruct.authorizer = keepStakingContract.authorizerOf(\\n            stakingProvider\\n        );\\n        stakingProviderStruct.beneficiary = keepStakingContract.beneficiaryOf(\\n            stakingProvider\\n        );\\n\\n        /* solhint-disable-next-line not-rely-on-time */\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\n\\n        increaseStakeCheckpoint(stakingProvider, tAmount);\\n\\n        emit Staked(\\n            StakeType.KEEP,\\n            stakingProviderStruct.owner,\\n            stakingProvider,\\n            stakingProviderStruct.beneficiary,\\n            stakingProviderStruct.authorizer,\\n            tAmount\\n        );\\n    }\\n\\n    /// @notice Copies delegation from the legacy NU staking contract to T\\n    ///         staking contract, additionally appointing beneficiary and\\n    ///         authorizer roles. Caches the amount staked in NU staking\\n    ///         contract. Can be called only by the original delegation owner.\\n    function stakeNu(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer\\n    ) external override {\\n        require(\\n            stakingProvider != address(0) &&\\n                beneficiary != address(0) &&\\n                authorizer != address(0),\\n            \\\"Parameters must be specified\\\"\\n        );\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        (, uint256 createdAt, ) = keepStakingContract.getDelegationInfo(\\n            stakingProvider\\n        );\\n        require(\\n            createdAt == 0 && stakingProviderStruct.owner == address(0),\\n            \\\"Provider is already in use\\\"\\n        );\\n\\n        uint96 tAmount = getNuAmountInT(msg.sender, stakingProvider);\\n        require(tAmount > 0, \\\"Nothing to sync\\\");\\n\\n        stakingProviderStruct.nuInTStake = tAmount;\\n        stakingProviderStruct.owner = msg.sender;\\n        stakingProviderStruct.authorizer = authorizer;\\n        stakingProviderStruct.beneficiary = beneficiary;\\n        /* solhint-disable-next-line not-rely-on-time */\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\n\\n        increaseStakeCheckpoint(stakingProvider, tAmount);\\n\\n        emit Staked(\\n            StakeType.NU,\\n            msg.sender,\\n            stakingProvider,\\n            beneficiary,\\n            authorizer,\\n            tAmount\\n        );\\n    }\\n\\n    /// @notice Refresh Keep stake owner. Can be called only by the old owner\\n    ///         or their staking provider.\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\n    ///      staking contract operator.\\n    function refreshKeepStakeOwner(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        address newOwner = keepStake.resolveOwner(stakingProvider);\\n\\n        emit OwnerRefreshed(\\n            stakingProvider,\\n            stakingProviderStruct.owner,\\n            newOwner\\n        );\\n        stakingProviderStruct.owner = newOwner;\\n    }\\n\\n    /// @notice Allows the Governance to set the minimum required stake amount.\\n    ///         This amount is required to protect against griefing the staking\\n    ///         contract and individual applications are allowed to require\\n    ///         higher minimum stakes if necessary.\\n    /// @dev Staking providers are not required to maintain a minimum T stake\\n    ///      all the time. 24 hours after the delegation, T stake can be reduced\\n    ///      below the minimum stake. The minimum stake in the staking contract\\n    ///      is just to protect against griefing stake operation. Please note\\n    ///      that each application may have its own minimum authorization though\\n    ///      and the authorization can not be higher than the stake.\\n    function setMinimumStakeAmount(uint96 amount)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        minTStakeAmount = amount;\\n        emit MinimumStakeAmountSet(amount);\\n    }\\n\\n    //\\n    //\\n    // Authorizing an application\\n    //\\n    //\\n\\n    /// @notice Allows the Governance to approve the particular application\\n    ///         before individual stake authorizers are able to authorize it.\\n    function approveApplication(address application)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(application != address(0), \\\"Parameters must be specified\\\");\\n        ApplicationInfo storage info = applicationInfo[application];\\n        require(\\n            info.status == ApplicationStatus.NOT_APPROVED ||\\n                info.status == ApplicationStatus.PAUSED,\\n            \\\"Can't approve application\\\"\\n        );\\n\\n        if (info.status == ApplicationStatus.NOT_APPROVED) {\\n            applications.push(application);\\n        }\\n        info.status = ApplicationStatus.APPROVED;\\n        emit ApplicationStatusChanged(application, ApplicationStatus.APPROVED);\\n    }\\n\\n    /// @notice Increases the authorization of the given staking provider for\\n    ///         the given application by the given amount. Can only be called by\\n    ///         the given staking provider\\u2019s authorizer.\\n    /// @dev Calls `authorizationIncreased` callback on the given application to\\n    ///      notify the application about authorization change.\\n    ///      See `IApplication`.\\n    function increaseAuthorization(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) external override onlyAuthorizerOf(stakingProvider) {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        AppAuthorization storage authorization = stakingProviderStruct\\n            .authorizations[application];\\n        uint96 fromAmount = authorization.authorized;\\n        if (fromAmount == 0) {\\n            require(\\n                authorizationCeiling == 0 ||\\n                    stakingProviderStruct.authorizedApplications.length <\\n                    authorizationCeiling,\\n                \\\"Too many applications\\\"\\n            );\\n            stakingProviderStruct.authorizedApplications.push(application);\\n        }\\n\\n        uint96 availableTValue = getAvailableToAuthorize(\\n            stakingProvider,\\n            application\\n        );\\n        require(availableTValue >= amount, \\\"Not enough stake to authorize\\\");\\n        authorization.authorized += amount;\\n        emit AuthorizationIncreased(\\n            stakingProvider,\\n            application,\\n            fromAmount,\\n            authorization.authorized\\n        );\\n        IApplication(application).authorizationIncreased(\\n            stakingProvider,\\n            fromAmount,\\n            authorization.authorized\\n        );\\n    }\\n\\n    /// @notice Requests decrease of all authorizations for the given staking\\n    ///         provider on all applications by all authorized amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application.\\n    /// @dev Calls `authorizationDecreaseRequested` callback\\n    ///      for each authorized application. See `IApplication`.\\n    function requestAuthorizationDecrease(address stakingProvider) external {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 deauthorizing = 0;\\n        for (\\n            uint256 i = 0;\\n            i < stakingProviderStruct.authorizedApplications.length;\\n            i++\\n        ) {\\n            address application = stakingProviderStruct.authorizedApplications[\\n                i\\n            ];\\n            uint96 authorized = stakingProviderStruct\\n                .authorizations[application]\\n                .authorized;\\n            if (authorized > 0) {\\n                requestAuthorizationDecrease(\\n                    stakingProvider,\\n                    application,\\n                    authorized\\n                );\\n                deauthorizing += authorized;\\n            }\\n        }\\n\\n        require(deauthorizing > 0, \\\"Nothing was authorized\\\");\\n    }\\n\\n    /// @notice Called by the application at its discretion to approve the\\n    ///         previously requested authorization decrease request. Can only be\\n    ///         called by the application that was previously requested to\\n    ///         decrease the authorization for that staking provider.\\n    ///         Returns resulting authorized amount for the application.\\n    function approveAuthorizationDecrease(address stakingProvider)\\n        external\\n        override\\n        returns (uint96)\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[msg.sender];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        AppAuthorization storage authorization = stakingProviderStruct\\n            .authorizations[msg.sender];\\n        require(authorization.deauthorizing > 0, \\\"No deauthorizing in process\\\");\\n\\n        uint96 fromAmount = authorization.authorized;\\n        authorization.authorized -= authorization.deauthorizing;\\n        authorization.deauthorizing = 0;\\n        emit AuthorizationDecreaseApproved(\\n            stakingProvider,\\n            msg.sender,\\n            fromAmount,\\n            authorization.authorized\\n        );\\n\\n        // remove application from an array\\n        if (authorization.authorized == 0) {\\n            cleanAuthorizedApplications(stakingProviderStruct, 1);\\n        }\\n\\n        return authorization.authorized;\\n    }\\n\\n    /// @notice Decreases the authorization for the given `stakingProvider` on\\n    ///         the given disabled `application`, for all authorized amount.\\n    ///         Can be called by anyone.\\n    function forceDecreaseAuthorization(\\n        address stakingProvider,\\n        address application\\n    ) external override {\\n        require(\\n            applicationInfo[application].status == ApplicationStatus.DISABLED,\\n            \\\"Application is not disabled\\\"\\n        );\\n\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        AppAuthorization storage authorization = stakingProviderStruct\\n            .authorizations[application];\\n        uint96 fromAmount = authorization.authorized;\\n        require(fromAmount > 0, \\\"Application is not authorized\\\");\\n        authorization.authorized = 0;\\n        authorization.deauthorizing = 0;\\n\\n        emit AuthorizationDecreaseApproved(\\n            stakingProvider,\\n            application,\\n            fromAmount,\\n            0\\n        );\\n        cleanAuthorizedApplications(stakingProviderStruct, 1);\\n    }\\n\\n    /// @notice Pauses the given application\\u2019s eligibility to slash stakes.\\n    ///         Besides that stakers can't change authorization to the application.\\n    ///         Can be called only by the Panic Button of the particular\\n    ///         application. The paused application can not slash stakes until\\n    ///         it is approved again by the Governance using `approveApplication`\\n    ///         function. Should be used only in case of an emergency.\\n    function pauseApplication(address application)\\n        external\\n        override\\n        onlyPanicButtonOf(application)\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Can't pause application\\\"\\n        );\\n        applicationStruct.status = ApplicationStatus.PAUSED;\\n        emit ApplicationStatusChanged(application, ApplicationStatus.PAUSED);\\n    }\\n\\n    /// @notice Disables the given application. The disabled application can't\\n    ///         slash stakers. Also stakers can't increase authorization to that\\n    ///         application but can decrease without waiting by calling\\n    ///         `forceDecreaseAuthorization` at any moment. Can be called only\\n    ///         by the governance. The disabled application can't be approved\\n    ///         again. Should be used only in case of an emergency.\\n    function disableApplication(address application)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED ||\\n                applicationStruct.status == ApplicationStatus.PAUSED,\\n            \\\"Can't disable application\\\"\\n        );\\n        applicationStruct.status = ApplicationStatus.DISABLED;\\n        emit ApplicationStatusChanged(application, ApplicationStatus.DISABLED);\\n    }\\n\\n    /// @notice Sets the Panic Button role for the given application to the\\n    ///         provided address. Can only be called by the Governance. If the\\n    ///         Panic Button for the given application should be disabled, the\\n    ///         role address should be set to 0x0 address.\\n    function setPanicButton(address application, address panicButton)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n        applicationStruct.panicButton = panicButton;\\n        emit PanicButtonSet(application, panicButton);\\n    }\\n\\n    /// @notice Sets the maximum number of applications one staking provider can\\n    ///         have authorized. Used to protect against DoSing slashing queue.\\n    ///         Can only be called by the Governance.\\n    function setAuthorizationCeiling(uint256 ceiling)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        authorizationCeiling = ceiling;\\n        emit AuthorizationCeilingSet(ceiling);\\n    }\\n\\n    //\\n    //\\n    // Stake top-up\\n    //\\n    //\\n\\n    /// @notice Increases the amount of the stake for the given staking provider.\\n    /// @dev The sender of this transaction needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function topUp(address stakingProvider, uint96 amount) external override {\\n        require(\\n            stakingProviders[stakingProvider].owner != address(0),\\n            \\\"Nothing to top-up\\\"\\n        );\\n        require(amount > 0, \\\"Parameters must be specified\\\");\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        stakingProviderStruct.tStake += amount;\\n        emit ToppedUp(stakingProvider, amount);\\n        increaseStakeCheckpoint(stakingProvider, amount);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /// @notice Propagates information about stake top-up from the legacy KEEP\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpKeep(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 tAmount = getKeepAmountInT(stakingProvider);\\n        require(\\n            tAmount > stakingProviderStruct.keepInTStake,\\n            \\\"Nothing to top-up\\\"\\n        );\\n\\n        uint96 toppedUp = tAmount - stakingProviderStruct.keepInTStake;\\n        emit ToppedUp(stakingProvider, toppedUp);\\n        stakingProviderStruct.keepInTStake = tAmount;\\n        increaseStakeCheckpoint(stakingProvider, toppedUp);\\n    }\\n\\n    /// @notice Propagates information about stake top-up from the legacy NU\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpNu(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 tAmount = getNuAmountInT(\\n            stakingProviderStruct.owner,\\n            stakingProvider\\n        );\\n        require(\\n            tAmount > stakingProviderStruct.nuInTStake,\\n            \\\"Nothing to top-up\\\"\\n        );\\n\\n        uint96 toppedUp = tAmount - stakingProviderStruct.nuInTStake;\\n        emit ToppedUp(stakingProvider, toppedUp);\\n        stakingProviderStruct.nuInTStake = tAmount;\\n        increaseStakeCheckpoint(stakingProvider, toppedUp);\\n    }\\n\\n    //\\n    //\\n    // Undelegating a stake (unstaking)\\n    //\\n    //\\n\\n    /// @notice Reduces the liquid T stake amount by the provided amount and\\n    ///         withdraws T to the owner. Reverts if there is at least one\\n    ///         authorization higher than the sum of the legacy stake and\\n    ///         remaining liquid T stake or if the unstake amount is higher than\\n    ///         the liquid T stake amount. Can be called only by the owner or\\n    ///         the staking provider. Can only be called when 24h passed since\\n    ///         the stake has been delegated.\\n    function unstakeT(address stakingProvider, uint96 amount)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(\\n            amount > 0 &&\\n                amount + getMinStaked(stakingProvider, StakeType.T) <=\\n                stakingProviderStruct.tStake,\\n            \\\"Too much to unstake\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        stakingProviderStruct.tStake -= amount;\\n        decreaseStakeCheckpoint(stakingProvider, amount);\\n        emit Unstaked(stakingProvider, amount);\\n        token.safeTransfer(stakingProviderStruct.owner, amount);\\n    }\\n\\n    /// @notice Sets the legacy KEEP staking contract active stake amount cached\\n    ///         in T staking contract to 0. Reverts if the amount of liquid T\\n    ///         staked in T staking contract is lower than the highest\\n    ///         application authorization. This function allows to unstake from\\n    ///         KEEP staking contract and still being able to operate in T\\n    ///         network and earning rewards based on the liquid T staked. Can be\\n    ///         called only by the delegation owner or the staking provider.\\n    ///         Can only be called when 24h passed since the stake has been\\n    ///         delegated.\\n    /// @dev    This function (or `unstakeAll`) must be called before\\n    ///         `undelegate`/`undelegateAt` in Keep staking contract. Otherwise\\n    ///         provider can be slashed by `notifyKeepStakeDiscrepancy` method.\\n    function unstakeKeep(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 keepInTStake = stakingProviderStruct.keepInTStake;\\n        require(keepInTStake != 0, \\\"Nothing to unstake\\\");\\n        require(\\n            getMinStaked(stakingProvider, StakeType.KEEP) == 0,\\n            \\\"Keep stake still authorized\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        emit Unstaked(stakingProvider, keepInTStake);\\n        stakingProviderStruct.keepInTStake = 0;\\n        decreaseStakeCheckpoint(stakingProvider, keepInTStake);\\n    }\\n\\n    /// @notice Reduces cached legacy NU stake amount by the provided amount.\\n    ///         Reverts if there is at least one authorization higher than the\\n    ///         sum of remaining legacy NU stake and liquid T stake for that\\n    ///         staking provider or if the untaked amount is higher than the\\n    ///         cached legacy stake amount. If succeeded, the legacy NU stake\\n    ///         can be partially or fully undelegated on the legacy staking\\n    ///         contract. This function allows to unstake from NU staking\\n    ///         contract and still being able to operate in T network and\\n    ///         earning rewards based on the liquid T staked. Can be called only\\n    ///         by the delegation owner or the staking provider. Can only be\\n    ///         called when 24h passed since the stake has been delegated.\\n    /// @dev    This function (or `unstakeAll`) must be called before `withdraw`\\n    ///         in NuCypher staking contract. Otherwise NU tokens can't be\\n    ///         unlocked.\\n    /// @param stakingProvider Staking provider address\\n    /// @param amount Amount of NU to unstake in T denomination\\n    function unstakeNu(address stakingProvider, uint96 amount)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        // rounding amount to guarantee exact T<>NU conversion in both ways,\\n        // so there's no remainder after unstaking\\n        (, uint96 tRemainder) = convertFromT(amount, nucypherRatio);\\n        amount -= tRemainder;\\n        require(\\n            amount > 0 &&\\n                amount + getMinStaked(stakingProvider, StakeType.NU) <=\\n                stakingProviderStruct.nuInTStake,\\n            \\\"Too much to unstake\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        stakingProviderStruct.nuInTStake -= amount;\\n        decreaseStakeCheckpoint(stakingProvider, amount);\\n        emit Unstaked(stakingProvider, amount);\\n    }\\n\\n    /// @notice Sets cached legacy stake amount to 0, sets the liquid T stake\\n    ///         amount to 0 and withdraws all liquid T from the stake to the\\n    ///         owner. Reverts if there is at least one non-zero authorization.\\n    ///         Can be called only by the delegation owner or the staking\\n    ///         provider. Can only be called when 24h passed since the stake\\n    ///         has been delegated.\\n    function unstakeAll(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(\\n            stakingProviderStruct.authorizedApplications.length == 0,\\n            \\\"Stake still authorized\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        uint96 unstaked = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        emit Unstaked(stakingProvider, unstaked);\\n        uint96 amount = stakingProviderStruct.tStake;\\n        stakingProviderStruct.tStake = 0;\\n        stakingProviderStruct.keepInTStake = 0;\\n        stakingProviderStruct.nuInTStake = 0;\\n        decreaseStakeCheckpoint(stakingProvider, unstaked);\\n\\n        if (amount > 0) {\\n            token.safeTransfer(stakingProviderStruct.owner, amount);\\n        }\\n    }\\n\\n    //\\n    //\\n    // Keeping information in sync\\n    //\\n    //\\n\\n    /// @notice Notifies about the discrepancy between legacy KEEP active stake\\n    ///         and the amount cached in T staking contract. Slashes the staking\\n    ///         provider in case the amount cached is higher than the actual\\n    ///         active stake amount in KEEP staking contract. Needs to update\\n    ///         authorizations of all affected applications and execute an\\n    ///         involuntary authorization decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    function notifyKeepStakeDiscrepancy(address stakingProvider)\\n        external\\n        override\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(stakingProviderStruct.keepInTStake > 0, \\\"Nothing to slash\\\");\\n\\n        (uint256 keepStakeAmount, , uint256 undelegatedAt) = keepStakingContract\\n            .getDelegationInfo(stakingProvider);\\n\\n        (uint96 realKeepInTStake, ) = convertToT(keepStakeAmount, keepRatio);\\n        uint96 oldKeepInTStake = stakingProviderStruct.keepInTStake;\\n\\n        require(\\n            oldKeepInTStake > realKeepInTStake || undelegatedAt != 0,\\n            \\\"There is no discrepancy\\\"\\n        );\\n        stakingProviderStruct.keepInTStake = realKeepInTStake;\\n        seizeKeep(\\n            stakingProviderStruct,\\n            stakingProvider,\\n            stakeDiscrepancyPenalty,\\n            stakeDiscrepancyRewardMultiplier\\n        );\\n\\n        uint96 slashedAmount = realKeepInTStake -\\n            stakingProviderStruct.keepInTStake;\\n        emit TokensSeized(stakingProvider, slashedAmount, true);\\n        if (undelegatedAt != 0) {\\n            stakingProviderStruct.keepInTStake = 0;\\n        }\\n\\n        decreaseStakeCheckpoint(\\n            stakingProvider,\\n            oldKeepInTStake - stakingProviderStruct.keepInTStake\\n        );\\n\\n        authorizationDecrease(\\n            stakingProvider,\\n            stakingProviderStruct,\\n            slashedAmount\\n        );\\n    }\\n\\n    /// @notice Notifies about the discrepancy between legacy NU active stake\\n    ///         and the amount cached in T staking contract. Slashes the\\n    ///         staking provider in case the amount cached is higher than the\\n    ///         actual active stake amount in NU staking contract. Needs to\\n    ///         update authorizations of all affected applications and execute an\\n    ///         involuntary authorization decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    /// @dev    Real discrepancy between T and Nu is impossible.\\n    ///         This method is a safeguard in case of bugs in NuCypher staking\\n    ///         contract\\n    function notifyNuStakeDiscrepancy(address stakingProvider)\\n        external\\n        override\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(stakingProviderStruct.nuInTStake > 0, \\\"Nothing to slash\\\");\\n\\n        uint256 nuStakeAmount = nucypherStakingContract.getAllTokens(\\n            stakingProviderStruct.owner\\n        );\\n        (uint96 realNuInTStake, ) = convertToT(nuStakeAmount, nucypherRatio);\\n        uint96 oldNuInTStake = stakingProviderStruct.nuInTStake;\\n        require(oldNuInTStake > realNuInTStake, \\\"There is no discrepancy\\\");\\n\\n        stakingProviderStruct.nuInTStake = realNuInTStake;\\n        seizeNu(\\n            stakingProviderStruct,\\n            stakeDiscrepancyPenalty,\\n            stakeDiscrepancyRewardMultiplier\\n        );\\n\\n        uint96 slashedAmount = realNuInTStake -\\n            stakingProviderStruct.nuInTStake;\\n        emit TokensSeized(stakingProvider, slashedAmount, true);\\n        authorizationDecrease(\\n            stakingProvider,\\n            stakingProviderStruct,\\n            slashedAmount\\n        );\\n        decreaseStakeCheckpoint(\\n            stakingProvider,\\n            oldNuInTStake - stakingProviderStruct.nuInTStake\\n        );\\n    }\\n\\n    /// @notice Sets the penalty amount for stake discrepancy and reward\\n    ///         multiplier for reporting it. The penalty is seized from the\\n    ///         delegated stake, and 5% of the penalty, scaled by the\\n    ///         multiplier, is given to the notifier. The rest of the tokens are\\n    ///         burned. Can only be called by the Governance. See `seize` function.\\n    function setStakeDiscrepancyPenalty(\\n        uint96 penalty,\\n        uint256 rewardMultiplier\\n    ) external override onlyGovernance {\\n        stakeDiscrepancyPenalty = penalty;\\n        stakeDiscrepancyRewardMultiplier = rewardMultiplier;\\n        emit StakeDiscrepancyPenaltySet(penalty, rewardMultiplier);\\n    }\\n\\n    /// @notice Sets reward in T tokens for notification of misbehaviour\\n    ///         of one staking provider. Can only be called by the governance.\\n    function setNotificationReward(uint96 reward)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        notificationReward = reward;\\n        emit NotificationRewardSet(reward);\\n    }\\n\\n    /// @notice Transfer some amount of T tokens as reward for notifications\\n    ///         of misbehaviour\\n    function pushNotificationReward(uint96 reward) external override {\\n        require(reward > 0, \\\"Parameters must be specified\\\");\\n        notifiersTreasury += reward;\\n        emit NotificationRewardPushed(reward);\\n        token.safeTransferFrom(msg.sender, address(this), reward);\\n    }\\n\\n    /// @notice Withdraw some amount of T tokens from notifiers treasury.\\n    ///         Can only be called by the governance.\\n    function withdrawNotificationReward(address recipient, uint96 amount)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(amount <= notifiersTreasury, \\\"Not enough tokens\\\");\\n        notifiersTreasury -= amount;\\n        emit NotificationRewardWithdrawn(recipient, amount);\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount that should be slashed from each one of them. Can only be\\n    ///         called by application authorized for all staking providers in\\n    ///         the array.\\n    /// @dev    This method doesn't emit events for providers that are added to\\n    ///         the queue. If necessary  events can be added to the application\\n    ///         level.\\n    function slash(uint96 amount, address[] memory _stakingProviders)\\n        external\\n        override\\n    {\\n        notify(amount, 0, address(0), _stakingProviders);\\n    }\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount. The notifier will receive reward per each provider from\\n    ///         notifiers treasury. Can only be called by application\\n    ///         authorized for all staking providers in the array.\\n    /// @dev    This method doesn't emit events for staking providers that are\\n    ///         added to the queue. If necessary  events can be added to the\\n    ///         application level.\\n    function seize(\\n        uint96 amount,\\n        uint256 rewardMultiplier,\\n        address notifier,\\n        address[] memory _stakingProviders\\n    ) external override {\\n        notify(amount, rewardMultiplier, notifier, _stakingProviders);\\n    }\\n\\n    /// @notice Takes the given number of queued slashing operations and\\n    ///         processes them. Receives 5% of the slashed amount.\\n    ///         Executes `involuntaryAuthorizationDecrease` function on each\\n    ///         affected application.\\n    function processSlashing(uint256 count) external virtual override {\\n        require(\\n            slashingQueueIndex < slashingQueue.length && count > 0,\\n            \\\"Nothing to process\\\"\\n        );\\n\\n        uint256 maxIndex = slashingQueueIndex + count;\\n        maxIndex = MathUpgradeable.min(maxIndex, slashingQueue.length);\\n        count = maxIndex - slashingQueueIndex;\\n        uint96 tAmountToBurn = 0;\\n\\n        uint256 index = slashingQueueIndex;\\n        for (; index < maxIndex; index++) {\\n            SlashingEvent storage slashing = slashingQueue[index];\\n            tAmountToBurn += processSlashing(slashing);\\n        }\\n        slashingQueueIndex = index;\\n\\n        uint256 tProcessorReward = uint256(tAmountToBurn).percent(\\n            SLASHING_REWARD_PERCENT\\n        );\\n        notifiersTreasury += tAmountToBurn - tProcessorReward.toUint96();\\n        emit SlashingProcessed(msg.sender, count, tProcessorReward);\\n        if (tProcessorReward > 0) {\\n            token.safeTransfer(msg.sender, tProcessorReward);\\n        }\\n    }\\n\\n    /// @notice Delegate voting power from the stake associated to the\\n    ///         `stakingProvider` to a `delegatee` address. Caller must be the\\n    ///         owner of this stake.\\n    function delegateVoting(address stakingProvider, address delegatee)\\n        external\\n    {\\n        delegate(stakingProvider, delegatee);\\n    }\\n\\n    /// @notice Transfers ownership of the contract to `newGuvnor`.\\n    function transferGovernance(address newGuvnor)\\n        external\\n        virtual\\n        onlyGovernance\\n    {\\n        _transferGovernance(newGuvnor);\\n    }\\n\\n    //\\n    //\\n    // Auxiliary functions\\n    //\\n    //\\n\\n    /// @notice Returns the authorized stake amount of the staking provider for\\n    ///         the application.\\n    function authorizedStake(address stakingProvider, address application)\\n        external\\n        view\\n        override\\n        returns (uint96)\\n    {\\n        return\\n            stakingProviders[stakingProvider]\\n                .authorizations[application]\\n                .authorized;\\n    }\\n\\n    /// @notice Returns staked amount of T, Keep and Nu for the specified\\n    ///         staking provider.\\n    /// @dev    All values are in T denomination\\n    function stakes(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (\\n            uint96 tStake,\\n            uint96 keepInTStake,\\n            uint96 nuInTStake\\n        )\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        tStake = stakingProviderStruct.tStake;\\n        keepInTStake = stakingProviderStruct.keepInTStake;\\n        nuInTStake = stakingProviderStruct.nuInTStake;\\n    }\\n\\n    /// @notice Returns start staking timestamp.\\n    /// @dev    This value is set at most once.\\n    function getStartStakingTimestamp(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return stakingProviders[stakingProvider].startStakingTimestamp;\\n    }\\n\\n    /// @notice Returns staked amount of NU for the specified staking provider.\\n    function stakedNu(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (uint256 nuAmount)\\n    {\\n        (nuAmount, ) = convertFromT(\\n            stakingProviders[stakingProvider].nuInTStake,\\n            nucypherRatio\\n        );\\n    }\\n\\n    /// @notice Gets the stake owner, the beneficiary and the authorizer\\n    ///         for the specified staking provider address.\\n    /// @return owner Stake owner address.\\n    /// @return beneficiary Beneficiary address.\\n    /// @return authorizer Authorizer address.\\n    function rolesOf(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (\\n            address owner,\\n            address payable beneficiary,\\n            address authorizer\\n        )\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        owner = stakingProviderStruct.owner;\\n        beneficiary = stakingProviderStruct.beneficiary;\\n        authorizer = stakingProviderStruct.authorizer;\\n    }\\n\\n    /// @notice Returns length of application array\\n    function getApplicationsLength() external view override returns (uint256) {\\n        return applications.length;\\n    }\\n\\n    /// @notice Returns length of slashing queue\\n    function getSlashingQueueLength() external view override returns (uint256) {\\n        return slashingQueue.length;\\n    }\\n\\n    /// @notice Requests decrease of the authorization for the given staking\\n    ///         provider on the given application by the provided amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application if the application agrees for that. If the\\n    ///         application does not agree for overwriting, the function\\n    ///         reverts.\\n    /// @dev Calls `authorizationDecreaseRequested` callback on the given\\n    ///      application. See `IApplication`.\\n    function requestAuthorizationDecrease(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) public override onlyAuthorizerOf(stakingProvider) {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        require(amount > 0, \\\"Parameters must be specified\\\");\\n\\n        AppAuthorization storage authorization = stakingProviders[\\n            stakingProvider\\n        ].authorizations[application];\\n        require(\\n            authorization.authorized >= amount,\\n            \\\"Amount exceeds authorized\\\"\\n        );\\n\\n        authorization.deauthorizing = amount;\\n        uint96 deauthorizingTo = authorization.authorized - amount;\\n        emit AuthorizationDecreaseRequested(\\n            stakingProvider,\\n            application,\\n            authorization.authorized,\\n            deauthorizingTo\\n        );\\n        IApplication(application).authorizationDecreaseRequested(\\n            stakingProvider,\\n            authorization.authorized,\\n            deauthorizingTo\\n        );\\n    }\\n\\n    /// @notice Returns minimum possible stake for T, KEEP or NU in T denomination\\n    /// @dev For example, suppose the given staking provider has 10 T, 20 T worth\\n    ///      of KEEP, and 30 T worth of NU all staked, and the maximum\\n    ///      application authorization is 40 T, then `getMinStaked` for\\n    ///      that staking provider returns:\\n    ///          * 0 T if KEEP stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\\n    ///          * 10 T if NU stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\\n    ///          * 0 T if T stake type specified i.e.\\n    ///            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\\n    ///      In other words, the minimum stake amount for the specified\\n    ///      stake type is the minimum amount of stake of the given type\\n    ///      needed to satisfy the maximum application authorization given\\n    ///      the staked amounts of the other stake types for that staking\\n    ///      provider.\\n    function getMinStaked(address stakingProvider, StakeType stakeTypes)\\n        public\\n        view\\n        override\\n        returns (uint96)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint256 maxAuthorization = 0;\\n        for (\\n            uint256 i = 0;\\n            i < stakingProviderStruct.authorizedApplications.length;\\n            i++\\n        ) {\\n            address application = stakingProviderStruct.authorizedApplications[\\n                i\\n            ];\\n            maxAuthorization = MathUpgradeable.max(\\n                maxAuthorization,\\n                stakingProviderStruct.authorizations[application].authorized\\n            );\\n        }\\n\\n        if (maxAuthorization == 0) {\\n            return 0;\\n        }\\n        if (stakeTypes != StakeType.T) {\\n            maxAuthorization -= MathUpgradeable.min(\\n                maxAuthorization,\\n                stakingProviderStruct.tStake\\n            );\\n        }\\n        if (stakeTypes != StakeType.NU) {\\n            maxAuthorization -= MathUpgradeable.min(\\n                maxAuthorization,\\n                stakingProviderStruct.nuInTStake\\n            );\\n        }\\n        if (stakeTypes != StakeType.KEEP) {\\n            maxAuthorization -= MathUpgradeable.min(\\n                maxAuthorization,\\n                stakingProviderStruct.keepInTStake\\n            );\\n        }\\n        return maxAuthorization.toUint96();\\n    }\\n\\n    /// @notice Returns available amount to authorize for the specified\\n    ///         application.\\n    function getAvailableToAuthorize(\\n        address stakingProvider,\\n        address application\\n    ) public view override returns (uint96 availableTValue) {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        availableTValue =\\n            stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        availableTValue -= stakingProviderStruct\\n            .authorizations[application]\\n            .authorized;\\n    }\\n\\n    /// @notice Delegate voting power from the stake associated to the\\n    ///         `stakingProvider` to a `delegatee` address. Caller must be the owner\\n    ///         of this stake.\\n    /// @dev Original abstract function defined in Checkpoints contract had two\\n    ///      parameters, `delegator` and `delegatee`. Here we override it and\\n    ///      comply with the same signature but the semantics of the first\\n    ///      parameter changes to the `stakingProvider` address.\\n    function delegate(address stakingProvider, address delegatee)\\n        internal\\n        virtual\\n        override\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(\\n            stakingProviderStruct.owner == msg.sender,\\n            \\\"Caller is not owner\\\"\\n        );\\n        uint96 stakingProviderBalance = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        address oldDelegatee = delegates(stakingProvider);\\n        _delegates[stakingProvider] = delegatee;\\n        emit DelegateChanged(stakingProvider, oldDelegatee, delegatee);\\n        moveVotingPower(oldDelegatee, delegatee, stakingProviderBalance);\\n    }\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount. The notifier will receive reward per each staking\\n    ///         provider from notifiers treasury. Can only be called by\\n    ///         application authorized for all staking providers in the array.\\n    function notify(\\n        uint96 amount,\\n        uint256 rewardMultiplier,\\n        address notifier,\\n        address[] memory _stakingProviders\\n    ) internal {\\n        require(\\n            amount > 0 && _stakingProviders.length > 0,\\n            \\\"Parameters must be specified\\\"\\n        );\\n\\n        ApplicationInfo storage applicationStruct = applicationInfo[msg.sender];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        uint256 queueLength = slashingQueue.length;\\n        for (uint256 i = 0; i < _stakingProviders.length; i++) {\\n            address stakingProvider = _stakingProviders[i];\\n            uint256 amountToSlash = MathUpgradeable.min(\\n                stakingProviders[stakingProvider]\\n                    .authorizations[msg.sender]\\n                    .authorized,\\n                amount\\n            );\\n            if (\\n                //slither-disable-next-line incorrect-equality\\n                amountToSlash == 0\\n            ) {\\n                continue;\\n            }\\n            slashingQueue.push(\\n                SlashingEvent(stakingProvider, amountToSlash.toUint96())\\n            );\\n        }\\n\\n        if (notifier != address(0)) {\\n            uint256 reward = ((slashingQueue.length - queueLength) *\\n                notificationReward).percent(rewardMultiplier);\\n            reward = MathUpgradeable.min(reward, notifiersTreasury);\\n            emit NotifierRewarded(notifier, reward);\\n            if (reward != 0) {\\n                notifiersTreasury -= reward;\\n                token.safeTransfer(notifier, reward);\\n            }\\n        }\\n    }\\n\\n    /// @notice Processes one specified slashing event.\\n    ///         Executes `involuntaryAuthorizationDecrease` function on each\\n    ///         affected application.\\n    //slither-disable-next-line dead-code\\n    function processSlashing(SlashingEvent storage slashing)\\n        internal\\n        returns (uint96 tAmountToBurn)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            slashing.stakingProvider\\n        ];\\n        uint96 tAmountToSlash = slashing.amount;\\n        uint96 oldStake = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        // slash T\\n        if (stakingProviderStruct.tStake > 0) {\\n            if (tAmountToSlash <= stakingProviderStruct.tStake) {\\n                tAmountToBurn = tAmountToSlash;\\n            } else {\\n                tAmountToBurn = stakingProviderStruct.tStake;\\n            }\\n            stakingProviderStruct.tStake -= tAmountToBurn;\\n            tAmountToSlash -= tAmountToBurn;\\n        }\\n\\n        // slash KEEP\\n        if (tAmountToSlash > 0 && stakingProviderStruct.keepInTStake > 0) {\\n            (uint256 keepStakeAmount, , ) = keepStakingContract\\n                .getDelegationInfo(slashing.stakingProvider);\\n            (uint96 tAmount, ) = convertToT(keepStakeAmount, keepRatio);\\n            stakingProviderStruct.keepInTStake = tAmount;\\n\\n            tAmountToSlash = seizeKeep(\\n                stakingProviderStruct,\\n                slashing.stakingProvider,\\n                tAmountToSlash,\\n                100\\n            );\\n        }\\n\\n        // slash NU\\n        if (tAmountToSlash > 0 && stakingProviderStruct.nuInTStake > 0) {\\n            // synchronization skipped due to impossibility of real discrepancy\\n            tAmountToSlash = seizeNu(\\n                stakingProviderStruct,\\n                tAmountToSlash,\\n                100\\n            );\\n        }\\n\\n        uint96 slashedAmount = slashing.amount - tAmountToSlash;\\n        emit TokensSeized(slashing.stakingProvider, slashedAmount, false);\\n        authorizationDecrease(\\n            slashing.stakingProvider,\\n            stakingProviderStruct,\\n            slashedAmount\\n        );\\n        uint96 newStake = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        decreaseStakeCheckpoint(slashing.stakingProvider, oldStake - newStake);\\n    }\\n\\n    /// @notice Synchronize authorizations (if needed) after slashing stake\\n    function authorizationDecrease(\\n        address stakingProvider,\\n        StakingProviderInfo storage stakingProviderStruct,\\n        uint96 slashedAmount\\n    ) internal {\\n        uint96 totalStake = stakingProviderStruct.tStake +\\n            stakingProviderStruct.nuInTStake +\\n            stakingProviderStruct.keepInTStake;\\n        uint256 applicationsToDelete = 0;\\n        for (\\n            uint256 i = 0;\\n            i < stakingProviderStruct.authorizedApplications.length;\\n            i++\\n        ) {\\n            address authorizedApplication = stakingProviderStruct\\n                .authorizedApplications[i];\\n            AppAuthorization storage authorization = stakingProviderStruct\\n                .authorizations[authorizedApplication];\\n            uint96 fromAmount = authorization.authorized;\\n\\n            authorization.authorized -= MathUpgradeable\\n                .min(fromAmount, slashedAmount)\\n                .toUint96();\\n\\n            if (authorization.authorized > totalStake) {\\n                authorization.authorized = totalStake;\\n            }\\n\\n            bool successful = true;\\n            //slither-disable-next-line calls-loop\\n            try\\n                IApplication(authorizedApplication)\\n                    .involuntaryAuthorizationDecrease{\\n                    gas: GAS_LIMIT_AUTHORIZATION_DECREASE\\n                }(stakingProvider, fromAmount, authorization.authorized)\\n            {} catch {\\n                successful = false;\\n            }\\n            if (authorization.deauthorizing > authorization.authorized) {\\n                authorization.deauthorizing = authorization.authorized;\\n            }\\n            emit AuthorizationInvoluntaryDecreased(\\n                stakingProvider,\\n                authorizedApplication,\\n                fromAmount,\\n                authorization.authorized,\\n                successful\\n            );\\n            if (authorization.authorized == 0) {\\n                applicationsToDelete++;\\n            }\\n        }\\n        if (applicationsToDelete > 0) {\\n            cleanAuthorizedApplications(\\n                stakingProviderStruct,\\n                applicationsToDelete\\n            );\\n        }\\n    }\\n\\n    /// @notice Convert amount from T to Keep and call `seize` in Keep staking contract.\\n    ///         Returns remainder of slashing amount in T\\n    /// @dev Note this internal function doesn't update stake checkpoints\\n    function seizeKeep(\\n        StakingProviderInfo storage stakingProviderStruct,\\n        address stakingProvider,\\n        uint96 tAmountToSlash,\\n        uint256 rewardMultiplier\\n    ) internal returns (uint96) {\\n        if (stakingProviderStruct.keepInTStake == 0) {\\n            return tAmountToSlash;\\n        }\\n\\n        uint96 tPenalty;\\n        if (tAmountToSlash <= stakingProviderStruct.keepInTStake) {\\n            tPenalty = tAmountToSlash;\\n        } else {\\n            tPenalty = stakingProviderStruct.keepInTStake;\\n        }\\n\\n        (uint256 keepPenalty, uint96 tRemainder) = convertFromT(\\n            tPenalty,\\n            keepRatio\\n        );\\n        if (keepPenalty == 0) {\\n            return tAmountToSlash;\\n        }\\n        tPenalty -= tRemainder;\\n        stakingProviderStruct.keepInTStake -= tPenalty;\\n        tAmountToSlash -= tPenalty;\\n\\n        address[] memory stakingProviderWrapper = new address[](1);\\n        stakingProviderWrapper[0] = stakingProvider;\\n        keepStakingContract.seize(\\n            keepPenalty,\\n            rewardMultiplier,\\n            msg.sender,\\n            stakingProviderWrapper\\n        );\\n        return tAmountToSlash;\\n    }\\n\\n    /// @notice Convert amount from T to NU and call `slashStaker` in NuCypher staking contract.\\n    ///         Returns remainder of slashing amount in T\\n    /// @dev Note this internal function doesn't update the stake checkpoints\\n    function seizeNu(\\n        StakingProviderInfo storage stakingProviderStruct,\\n        uint96 tAmountToSlash,\\n        uint256 rewardMultiplier\\n    ) internal returns (uint96) {\\n        if (stakingProviderStruct.nuInTStake == 0) {\\n            return tAmountToSlash;\\n        }\\n\\n        uint96 tPenalty;\\n        if (tAmountToSlash <= stakingProviderStruct.nuInTStake) {\\n            tPenalty = tAmountToSlash;\\n        } else {\\n            tPenalty = stakingProviderStruct.nuInTStake;\\n        }\\n\\n        (uint256 nuPenalty, uint96 tRemainder) = convertFromT(\\n            tPenalty,\\n            nucypherRatio\\n        );\\n        if (nuPenalty == 0) {\\n            return tAmountToSlash;\\n        }\\n        tPenalty -= tRemainder;\\n        stakingProviderStruct.nuInTStake -= tPenalty;\\n        tAmountToSlash -= tPenalty;\\n\\n        uint256 nuReward = nuPenalty.percent(SLASHING_REWARD_PERCENT).percent(\\n            rewardMultiplier\\n        );\\n        nucypherStakingContract.slashStaker(\\n            stakingProviderStruct.owner,\\n            nuPenalty,\\n            msg.sender,\\n            nuReward\\n        );\\n        return tAmountToSlash;\\n    }\\n\\n    /// @notice Removes application with zero authorization from authorized\\n    ///         applications array\\n    function cleanAuthorizedApplications(\\n        StakingProviderInfo storage stakingProviderStruct,\\n        uint256 numberToDelete\\n    ) internal {\\n        uint256 length = stakingProviderStruct.authorizedApplications.length;\\n        if (numberToDelete == length) {\\n            delete stakingProviderStruct.authorizedApplications;\\n            return;\\n        }\\n\\n        uint256 deleted = 0;\\n        uint256 index = 0;\\n        uint256 newLength = length - numberToDelete;\\n        while (index < newLength && deleted < numberToDelete) {\\n            address application = stakingProviderStruct.authorizedApplications[\\n                index\\n            ];\\n            if (\\n                stakingProviderStruct.authorizations[application].authorized ==\\n                0\\n            ) {\\n                stakingProviderStruct.authorizedApplications[\\n                        index\\n                    ] = stakingProviderStruct.authorizedApplications[\\n                    length - deleted - 1\\n                ];\\n                deleted++;\\n            } else {\\n                index++;\\n            }\\n        }\\n\\n        for (index = newLength; index < length; index++) {\\n            stakingProviderStruct.authorizedApplications.pop();\\n        }\\n    }\\n\\n    /// @notice Creates new checkpoints due to a change of stake amount\\n    /// @param _delegator Address of the staking provider acting as delegator\\n    /// @param _amount Amount of T to increment\\n    /// @param increase True if the change is an increase, false if a decrease\\n    function newStakeCheckpoint(\\n        address _delegator,\\n        uint96 _amount,\\n        bool increase\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n        writeCheckpoint(\\n            _totalSupplyCheckpoints,\\n            increase ? add : subtract,\\n            _amount\\n        );\\n        address delegatee = delegates(_delegator);\\n        if (delegatee != address(0)) {\\n            (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                _checkpoints[delegatee],\\n                increase ? add : subtract,\\n                _amount\\n            );\\n            emit DelegateVotesChanged(delegatee, oldWeight, newWeight);\\n        }\\n    }\\n\\n    /// @notice Creates new checkpoints due to an increment of a stakers' stake\\n    /// @param _delegator Address of the staking provider acting as delegator\\n    /// @param _amount Amount of T to increment\\n    function increaseStakeCheckpoint(address _delegator, uint96 _amount)\\n        internal\\n    {\\n        newStakeCheckpoint(_delegator, _amount, true);\\n    }\\n\\n    /// @notice Creates new checkpoints due to a decrease of a stakers' stake\\n    /// @param _delegator Address of the stake owner acting as delegator\\n    /// @param _amount Amount of T to decrease\\n    function decreaseStakeCheckpoint(address _delegator, uint96 _amount)\\n        internal\\n    {\\n        newStakeCheckpoint(_delegator, _amount, false);\\n    }\\n\\n    /// @notice Returns amount of Nu stake in the NuCypher staking contract for\\n    ///         the specified staking provider.\\n    ///         Resulting value in T denomination\\n    function getNuAmountInT(address owner, address stakingProvider)\\n        internal\\n        returns (uint96)\\n    {\\n        uint256 nuStakeAmount = nucypherStakingContract.requestMerge(\\n            owner,\\n            stakingProvider\\n        );\\n        (uint96 tAmount, ) = convertToT(nuStakeAmount, nucypherRatio);\\n        return tAmount;\\n    }\\n\\n    function _transferGovernance(address newGuvnor) internal virtual {\\n        address oldGuvnor = governance;\\n        governance = newGuvnor;\\n        emit GovernanceTransferred(oldGuvnor, newGuvnor);\\n    }\\n\\n    /// @notice Returns amount of Keep stake in the Keep staking contract for\\n    ///         the specified staking provider.\\n    ///         Resulting value in T denomination\\n    function getKeepAmountInT(address stakingProvider)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        uint256 keepStakeAmount = keepStakingContract.eligibleStake(\\n            stakingProvider,\\n            address(this)\\n        );\\n        (uint96 tAmount, ) = convertToT(keepStakeAmount, keepRatio);\\n        return tAmount;\\n    }\\n\\n    /// @notice Returns the T token amount that's obtained from `amount` legacy\\n    ///         tokens for the given `ratio`, and the remainder that can't be\\n    ///         converted.\\n    function convertToT(uint256 amount, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint96 tAmount, uint256 remainder)\\n    {\\n        remainder = amount % CONVERSION_DIVISOR;\\n        uint256 convertibleAmount = amount - remainder;\\n        tAmount = ((convertibleAmount * ratio) / CONVERSION_DIVISOR).toUint96();\\n    }\\n\\n    /// @notice Returns the amount of legacy tokens that's obtained from\\n    ///         `tAmount` T tokens for the given `ratio`, and the T remainder\\n    ///         that can't be converted.\\n    function convertFromT(uint96 tAmount, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256 amount, uint96 tRemainder)\\n    {\\n        //slither-disable-next-line weak-prng\\n        tRemainder = (tAmount % ratio).toUint96();\\n        uint256 convertibleAmount = tAmount - tRemainder;\\n        amount = (convertibleAmount * CONVERSION_DIVISOR) / ratio;\\n    }\\n}\\n\",\"keccak256\":\"0x4b311da20db9e2aac39ff93caa7235d738f9127b7260ced418fa4aa9cb456999\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/T.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../governance/Checkpoints.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\\\";\\nimport \\\"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\\\";\\n\\n/// @title T token\\n/// @notice Threshold Network T token\\n/// @dev By default, token balance does not account for voting power.\\n///      This makes transfers cheaper. The downside is that it requires users\\n///      to delegate to themselves to activate checkpoints and have their\\n///      voting power tracked.\\ncontract T is ERC20WithPermit, MisfundRecovery, Checkpoints {\\n    /// @notice The EIP-712 typehash for the delegation struct used by\\n    ///         `delegateBySig`.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\n            \\\"Delegation(address delegatee,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    constructor() ERC20WithPermit(\\\"Threshold Network Token\\\", \\\"T\\\") {}\\n\\n    /// @notice Delegates votes from signatory to `delegatee`\\n    /// @param delegatee The address to delegate votes to\\n    /// @param deadline The time at which to expire the signature\\n    /// @param v The recovery byte of the signature\\n    /// @param r Half of the ECDSA signature pair\\n    /// @param s Half of the ECDSA signature pair\\n    function delegateBySig(\\n        address signatory,\\n        address delegatee,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Delegation expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        DELEGATION_TYPEHASH,\\n                        delegatee,\\n                        nonce[signatory]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == signatory,\\n            \\\"Invalid signature\\\"\\n        );\\n\\n        return delegate(signatory, delegatee);\\n    }\\n\\n    /// @notice Delegate votes from `msg.sender` to `delegatee`.\\n    /// @param delegatee The address to delegate votes to\\n    function delegate(address delegatee) public virtual {\\n        return delegate(msg.sender, delegatee);\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        uint96 safeAmount = SafeCast.toUint96(amount);\\n\\n        // When minting:\\n        if (from == address(0)) {\\n            // Does not allow to mint more than uint96 can fit. Otherwise, the\\n            // Checkpoint might not fit the balance.\\n            require(\\n                totalSupply + amount <= maxSupply(),\\n                \\\"Maximum total supply exceeded\\\"\\n            );\\n            writeCheckpoint(_totalSupplyCheckpoints, add, safeAmount);\\n        }\\n\\n        // When burning:\\n        if (to == address(0)) {\\n            writeCheckpoint(_totalSupplyCheckpoints, subtract, safeAmount);\\n        }\\n\\n        moveVotingPower(delegates(from), delegates(to), safeAmount);\\n    }\\n\\n    function delegate(address delegator, address delegatee)\\n        internal\\n        virtual\\n        override\\n    {\\n        address currentDelegate = delegates(delegator);\\n        uint96 delegatorBalance = SafeCast.toUint96(balanceOf[delegator]);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x6265416225fd15b1108fce13d570b53a862a5d256ba2e6329bccf658eccac430\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/PercentUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nlibrary PercentUtils {\\n    // Return `b`% of `a`\\n    // 200.percent(40) == 80\\n    // Commutative, works both ways\\n    function percent(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / 100;\\n    }\\n\\n    // Return `a` as percentage of `b`:\\n    // 80.asPercentOf(200) == 40\\n    //slither-disable-next-line dead-code\\n    function asPercentOf(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * 100) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xf5feadeff9d504b33058dfd6c2b99d31ecebc152b356272646a7afe6ed638d40\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SafeTUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../token/T.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @notice A wrapper around OpenZeppelin's `SafeERC20Upgradeable` but specific\\n///         to the T token. Use this library in upgradeable contracts. If your\\n///         contract is non-upgradeable, then the traditional `SafeERC20` works.\\n///         The motivation is to prevent upgradeable contracts that use T from\\n///         depending on the `Address` library, which can be problematic since\\n///         it uses `delegatecall`, which is discouraged by OpenZeppelin for use\\n///         in upgradeable contracts.\\n/// @dev This implementation force-casts T to `IERC20Upgradeable` to make it\\n///      work with `SafeERC20Upgradeable`.\\nlibrary SafeTUpgradeable {\\n    function safeTransfer(\\n        T token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        SafeERC20Upgradeable.safeTransfer(\\n            IERC20Upgradeable(address(token)),\\n            to,\\n            value\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        T token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            IERC20Upgradeable(address(token)),\\n            from,\\n            to,\\n            value\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf53907099650f9f973ff51c403730e7ae7170a5728fbde49f0f00b0a17775ce7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vending/VendingMachine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\\\";\\nimport \\\"../token/T.sol\\\";\\n\\n/// @title T token vending machine\\n/// @notice Contract implements a special update protocol to enable KEEP/NU\\n///         token holders to wrap their tokens and obtain T tokens according\\n///         to a fixed ratio. This will go on indefinitely and enable NU and\\n///         KEEP token holders to join T network without needing to buy or\\n///         sell any assets. Logistically, anyone holding NU or KEEP can wrap\\n///         those assets in order to upgrade to T. They can also unwrap T in\\n///         order to downgrade back to the underlying asset. There is a separate\\n///         instance of this contract deployed for KEEP holders and a separate\\n///         instance of this contract deployed for NU holders.\\ncontract VendingMachine is IReceiveApproval {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for T;\\n\\n    /// @notice Number of decimal places of precision in conversion to/from\\n    ///         wrapped tokens (assuming typical ERC20 token with 18 decimals).\\n    ///         This implies that amounts of wrapped tokens below this precision\\n    ///         won't take part in the conversion. E.g., for a value of 3, then\\n    ///         for a conversion of 1.123456789 wrapped tokens, only 1.123 is\\n    ///         convertible (i.e., 3 decimal places), and 0.000456789 is left.\\n    uint256 public constant WRAPPED_TOKEN_CONVERSION_PRECISION = 3;\\n\\n    /// @notice Divisor for precision purposes, used to represent fractions.\\n    uint256 public constant FLOATING_POINT_DIVISOR =\\n        10**(18 - WRAPPED_TOKEN_CONVERSION_PRECISION);\\n\\n    /// @notice The token being wrapped to T (KEEP/NU).\\n    IERC20 public immutable wrappedToken;\\n\\n    /// @notice T token contract.\\n    T public immutable tToken;\\n\\n    /// @notice The ratio with which T token is converted based on the provided\\n    ///         token being wrapped (KEEP/NU), expressed in 1e18 precision.\\n    ///\\n    ///         When wrapping:\\n    ///           x [T] = amount [KEEP/NU] * ratio / FLOATING_POINT_DIVISOR\\n    ///\\n    ///         When unwrapping:\\n    ///           x [KEEP/NU] = amount [T] * FLOATING_POINT_DIVISOR / ratio\\n    uint256 public immutable ratio;\\n\\n    /// @notice The total balance of wrapped tokens for the given holder\\n    ///         account. Only holders that have previously wrapped KEEP/NU to T\\n    ///         can unwrap, up to the amount previously wrapped.\\n    mapping(address => uint256) public wrappedBalance;\\n\\n    event Wrapped(\\n        address indexed recipient,\\n        uint256 wrappedTokenAmount,\\n        uint256 tTokenAmount\\n    );\\n    event Unwrapped(\\n        address indexed recipient,\\n        uint256 tTokenAmount,\\n        uint256 wrappedTokenAmount\\n    );\\n\\n    /// @notice Sets the reference to `wrappedToken` and `tToken`. Initializes\\n    ///         conversion `ratio` between wrapped token and T based on the\\n    ///         provided `_tTokenAllocation` and `_wrappedTokenAllocation`.\\n    /// @param _wrappedToken Address to ERC20 token that will be wrapped to T\\n    /// @param _tToken Address of T token\\n    /// @param _wrappedTokenAllocation The total supply of the token that will be\\n    ///       wrapped to T\\n    /// @param _tTokenAllocation The allocation of T this instance of Vending\\n    ///        Machine will receive\\n    /// @dev Multiplications in this contract can't overflow uint256 as we\\n    ///     restrict `_wrappedTokenAllocation` and `_tTokenAllocation` to\\n    ///     96 bits and FLOATING_POINT_DIVISOR fits in less than 60 bits.\\n    constructor(\\n        IERC20 _wrappedToken,\\n        T _tToken,\\n        uint96 _wrappedTokenAllocation,\\n        uint96 _tTokenAllocation\\n    ) {\\n        wrappedToken = _wrappedToken;\\n        tToken = _tToken;\\n        ratio =\\n            (FLOATING_POINT_DIVISOR * _tTokenAllocation) /\\n            _wrappedTokenAllocation;\\n    }\\n\\n    /// @notice Wraps up to the the given `amount` of the token (KEEP/NU) and\\n    ///         releases T token proportionally to the amount being wrapped with\\n    ///         respect to the wrap ratio. The token holder needs to have at\\n    ///         least the given amount of the wrapped token (KEEP/NU) approved\\n    ///         to transfer to the Vending Machine before calling this function.\\n    /// @param amount The amount of KEEP/NU to be wrapped\\n    function wrap(uint256 amount) external {\\n        _wrap(msg.sender, amount);\\n    }\\n\\n    /// @notice Wraps up to the given amount of the token (KEEP/NU) and releases\\n    ///         T token proportionally to the amount being wrapped with respect\\n    ///         to the wrap ratio. This is a shortcut to `wrap` function that\\n    ///         avoids a separate approval transaction. Only KEEP/NU token\\n    ///         is allowed as a caller, so please call this function via\\n    ///         token's `approveAndCall`.\\n    /// @param from Caller's address, must be the same as `wrappedToken` field\\n    /// @param amount The amount of KEEP/NU to be wrapped\\n    /// @param token Token's address, must be the same as `wrappedToken` field\\n    function receiveApproval(\\n        address from,\\n        uint256 amount,\\n        address token,\\n        bytes calldata\\n    ) external override {\\n        require(\\n            token == address(wrappedToken),\\n            \\\"Token is not the wrapped token\\\"\\n        );\\n        require(\\n            msg.sender == address(wrappedToken),\\n            \\\"Only wrapped token caller allowed\\\"\\n        );\\n        _wrap(from, amount);\\n    }\\n\\n    /// @notice Unwraps up to the given `amount` of T back to the legacy token\\n    ///         (KEEP/NU) according to the wrap ratio. It can only be called by\\n    ///         a token holder who previously wrapped their tokens in this\\n    ///         vending machine contract. The token holder can't unwrap more\\n    ///         tokens than they originally wrapped. The token holder needs to\\n    ///         have at least the given amount of T tokens approved to transfer\\n    ///         to the Vending Machine before calling this function.\\n    /// @param amount The amount of T to unwrap back to the collateral (KEEP/NU)\\n    function unwrap(uint256 amount) external {\\n        _unwrap(msg.sender, amount);\\n    }\\n\\n    /// @notice Returns the T token amount that's obtained from `amount` wrapped\\n    ///         tokens (KEEP/NU), and the remainder that can't be upgraded.\\n    function conversionToT(uint256 amount)\\n        public\\n        view\\n        returns (uint256 tAmount, uint256 wrappedRemainder)\\n    {\\n        wrappedRemainder = amount % FLOATING_POINT_DIVISOR;\\n        uint256 convertibleAmount = amount - wrappedRemainder;\\n        tAmount = (convertibleAmount * ratio) / FLOATING_POINT_DIVISOR;\\n    }\\n\\n    /// @notice The amount of wrapped tokens (KEEP/NU) that's obtained from\\n    ///         `amount` T tokens, and the remainder that can't be downgraded.\\n    function conversionFromT(uint256 amount)\\n        public\\n        view\\n        returns (uint256 wrappedAmount, uint256 tRemainder)\\n    {\\n        tRemainder = amount % ratio;\\n        uint256 convertibleAmount = amount - tRemainder;\\n        wrappedAmount = (convertibleAmount * FLOATING_POINT_DIVISOR) / ratio;\\n    }\\n\\n    function _wrap(address tokenHolder, uint256 wrappedTokenAmount) internal {\\n        (uint256 tTokenAmount, uint256 remainder) = conversionToT(\\n            wrappedTokenAmount\\n        );\\n        wrappedTokenAmount -= remainder;\\n        require(wrappedTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\n        emit Wrapped(tokenHolder, wrappedTokenAmount, tTokenAmount);\\n\\n        wrappedBalance[tokenHolder] += wrappedTokenAmount;\\n        wrappedToken.safeTransferFrom(\\n            tokenHolder,\\n            address(this),\\n            wrappedTokenAmount\\n        );\\n        tToken.safeTransfer(tokenHolder, tTokenAmount);\\n    }\\n\\n    function _unwrap(address tokenHolder, uint256 tTokenAmount) internal {\\n        (uint256 wrappedTokenAmount, uint256 remainder) = conversionFromT(\\n            tTokenAmount\\n        );\\n        tTokenAmount -= remainder;\\n        require(tTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\n        require(\\n            wrappedBalance[tokenHolder] >= wrappedTokenAmount,\\n            \\\"Can not unwrap more than previously wrapped\\\"\\n        );\\n\\n        emit Unwrapped(tokenHolder, tTokenAmount, wrappedTokenAmount);\\n        wrappedBalance[tokenHolder] -= wrappedTokenAmount;\\n        tToken.safeTransferFrom(tokenHolder, address(this), tTokenAmount);\\n        wrappedToken.safeTransfer(tokenHolder, wrappedTokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa4e7de5a9063db09b32ca97fa0fb5d8d1cc7b539387d1b44d74d15d3c2ed4134\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10141,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_delegates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10146,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint128)dyn_storage)"
      },
      {
        "astId": 10149,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint128)dyn_storage"
      },
      {
        "astId": 10153,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 12878,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "governance",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 12880,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "minTStakeAmount",
        "offset": 20,
        "slot": "51",
        "type": "t_uint96"
      },
      {
        "astId": 12882,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "authorizationCeiling",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 12884,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakeDiscrepancyPenalty",
        "offset": 0,
        "slot": "53",
        "type": "t_uint96"
      },
      {
        "astId": 12886,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakeDiscrepancyRewardMultiplier",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 12888,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "notifiersTreasury",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 12890,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "notificationReward",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 12895,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakingProviders",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_struct(StakingProviderInfo)12821_storage)"
      },
      {
        "astId": 12900,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "applicationInfo",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_struct(ApplicationInfo)12832_storage)"
      },
      {
        "astId": 12903,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "applications",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12907,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "slashingQueue",
        "offset": 0,
        "slot": "60",
        "type": "t_array(t_struct(SlashingEvent)12837_storage)dyn_storage"
      },
      {
        "astId": 12909,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "slashingQueueIndex",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SlashingEvent)12837_storage)dyn_storage": {
        "base": "t_struct(SlashingEvent)12837_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenStaking.SlashingEvent[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint128)dyn_storage": {
        "base": "t_uint128",
        "encoding": "dynamic_array",
        "label": "uint128[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ApplicationStatus)12798": {
        "encoding": "inplace",
        "label": "enum TokenStaking.ApplicationStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint128)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint128)dyn_storage"
      },
      "t_mapping(t_address,t_struct(AppAuthorization)12826_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenStaking.AppAuthorization)",
        "numberOfBytes": "32",
        "value": "t_struct(AppAuthorization)12826_storage"
      },
      "t_mapping(t_address,t_struct(ApplicationInfo)12832_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenStaking.ApplicationInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplicationInfo)12832_storage"
      },
      "t_mapping(t_address,t_struct(StakingProviderInfo)12821_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenStaking.StakingProviderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingProviderInfo)12821_storage"
      },
      "t_struct(AppAuthorization)12826_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.AppAuthorization",
        "members": [
          {
            "astId": 12823,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 12825,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "deauthorizing",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ApplicationInfo)12832_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.ApplicationInfo",
        "members": [
          {
            "astId": 12829,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ApplicationStatus)12798"
          },
          {
            "astId": 12831,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "panicButton",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SlashingEvent)12837_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.SlashingEvent",
        "members": [
          {
            "astId": 12834,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "stakingProvider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12836,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakingProviderInfo)12821_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.StakingProviderInfo",
        "members": [
          {
            "astId": 12800,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "nuInTStake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 12802,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "owner",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12804,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "keepInTStake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 12806,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "beneficiary",
            "offset": 12,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 12808,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "tStake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 12810,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorizer",
            "offset": 12,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12815,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorizations",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(AppAuthorization)12826_storage)"
          },
          {
            "astId": 12818,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorizedApplications",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12820,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "startStakingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  },
  "userdoc": {
    "events": {
      "DelegateChanged(address,address,address)": {
        "notice": "Emitted when an account changes their delegate."
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "Emitted when a balance or delegate change results in changes         to an account's voting power."
      }
    },
    "kind": "user",
    "methods": {
      "approveApplication(address)": {
        "notice": "Allows the Governance to approve the particular application         before individual stake authorizers are able to authorize it."
      },
      "approveAuthorizationDecrease(address)": {
        "notice": "Called by the application at its discretion to approve the         previously requested authorization decrease request. Can only be         called by the application that was previously requested to         decrease the authorization for that staking provider.         Returns resulting authorized amount for the application."
      },
      "authorizedStake(address,address)": {
        "notice": "Returns the authorized stake amount of the staking provider for         the application."
      },
      "delegateVoting(address,address)": {
        "notice": "Delegate voting power from the stake associated to the         `stakingProvider` to a `delegatee` address. Caller must be the         owner of this stake."
      },
      "delegates(address)": {
        "notice": "Get the address `account` is currently delegating to."
      },
      "disableApplication(address)": {
        "notice": "Disables the given application. The disabled application can't         slash stakers. Also stakers can't increase authorization to that         application but can decrease without waiting by calling         `forceDecreaseAuthorization` at any moment. Can be called only         by the governance. The disabled application can't be approved         again. Should be used only in case of an emergency."
      },
      "forceDecreaseAuthorization(address,address)": {
        "notice": "Decreases the authorization for the given `stakingProvider` on         the given disabled `application`, for all authorized amount.         Can be called by anyone."
      },
      "getApplicationsLength()": {
        "notice": "Returns length of application array"
      },
      "getAvailableToAuthorize(address,address)": {
        "notice": "Returns available amount to authorize for the specified         application."
      },
      "getMinStaked(address,uint8)": {
        "notice": "Returns minimum possible stake for T, KEEP or NU in T denomination"
      },
      "getPastTotalSupply(uint256)": {
        "notice": "Retrieve the `totalSupply` at the end of `blockNumber`.         Note, this value is the sum of all balances, but it is NOT the         sum of all the delegated votes!"
      },
      "getPastVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of         a block number."
      },
      "getSlashingQueueLength()": {
        "notice": "Returns length of slashing queue"
      },
      "getStartStakingTimestamp(address)": {
        "notice": "Returns start staking timestamp."
      },
      "getVotes(address)": {
        "notice": "Gets the current votes balance for `account`."
      },
      "increaseAuthorization(address,address,uint96)": {
        "notice": "Increases the authorization of the given staking provider for         the given application by the given amount. Can only be called by         the given staking provider’s authorizer."
      },
      "notifyKeepStakeDiscrepancy(address)": {
        "notice": "Notifies about the discrepancy between legacy KEEP active stake         and the amount cached in T staking contract. Slashes the staking         provider in case the amount cached is higher than the actual         active stake amount in KEEP staking contract. Needs to update         authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward."
      },
      "notifyNuStakeDiscrepancy(address)": {
        "notice": "Notifies about the discrepancy between legacy NU active stake         and the amount cached in T staking contract. Slashes the         staking provider in case the amount cached is higher than the         actual active stake amount in NU staking contract. Needs to         update authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward."
      },
      "numCheckpoints(address)": {
        "notice": "Get number of checkpoints for `account`."
      },
      "pauseApplication(address)": {
        "notice": "Pauses the given application’s eligibility to slash stakes.         Besides that stakers can't change authorization to the application.         Can be called only by the Panic Button of the particular         application. The paused application can not slash stakes until         it is approved again by the Governance using `approveApplication`         function. Should be used only in case of an emergency."
      },
      "processSlashing(uint256)": {
        "notice": "Takes the given number of queued slashing operations and         processes them. Receives 5% of the slashed amount.         Executes `involuntaryAuthorizationDecrease` function on each         affected application."
      },
      "pushNotificationReward(uint96)": {
        "notice": "Transfer some amount of T tokens as reward for notifications         of misbehaviour"
      },
      "refreshKeepStakeOwner(address)": {
        "notice": "Refresh Keep stake owner. Can be called only by the old owner         or their staking provider."
      },
      "requestAuthorizationDecrease(address)": {
        "notice": "Requests decrease of all authorizations for the given staking         provider on all applications by all authorized amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider’s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application."
      },
      "requestAuthorizationDecrease(address,address,uint96)": {
        "notice": "Requests decrease of the authorization for the given staking         provider on the given application by the provided amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider’s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application if the application agrees for that. If the         application does not agree for overwriting, the function         reverts."
      },
      "rolesOf(address)": {
        "notice": "Gets the stake owner, the beneficiary and the authorizer         for the specified staking provider address."
      },
      "seize(uint96,uint256,address,address[])": {
        "notice": "Adds staking providers to the slashing queue along with the         amount. The notifier will receive reward per each provider from         notifiers treasury. Can only be called by application         authorized for all staking providers in the array."
      },
      "setAuthorizationCeiling(uint256)": {
        "notice": "Sets the maximum number of applications one staking provider can         have authorized. Used to protect against DoSing slashing queue.         Can only be called by the Governance."
      },
      "setMinimumStakeAmount(uint96)": {
        "notice": "Allows the Governance to set the minimum required stake amount.         This amount is required to protect against griefing the staking         contract and individual applications are allowed to require         higher minimum stakes if necessary."
      },
      "setNotificationReward(uint96)": {
        "notice": "Sets reward in T tokens for notification of misbehaviour         of one staking provider. Can only be called by the governance."
      },
      "setPanicButton(address,address)": {
        "notice": "Sets the Panic Button role for the given application to the         provided address. Can only be called by the Governance. If the         Panic Button for the given application should be disabled, the         role address should be set to 0x0 address."
      },
      "setStakeDiscrepancyPenalty(uint96,uint256)": {
        "notice": "Sets the penalty amount for stake discrepancy and reward         multiplier for reporting it. The penalty is seized from the         delegated stake, and 5% of the penalty, scaled by the         multiplier, is given to the notifier. The rest of the tokens are         burned. Can only be called by the Governance. See `seize` function."
      },
      "slash(uint96,address[])": {
        "notice": "Adds staking providers to the slashing queue along with the         amount that should be slashed from each one of them. Can only be         called by application authorized for all staking providers in         the array."
      },
      "stake(address,address,address,uint96)": {
        "notice": "Creates a delegation with `msg.sender` owner with the given         staking provider, beneficiary, and authorizer. Transfers the         given amount of T to the staking contract."
      },
      "stakeKeep(address)": {
        "notice": "Copies delegation from the legacy KEEP staking contract to T         staking contract. No tokens are transferred. Caches the active         stake amount from KEEP staking contract. Can be called by         anyone."
      },
      "stakeNu(address,address,address)": {
        "notice": "Copies delegation from the legacy NU staking contract to T         staking contract, additionally appointing beneficiary and         authorizer roles. Caches the amount staked in NU staking         contract. Can be called only by the original delegation owner."
      },
      "stakedNu(address)": {
        "notice": "Returns staked amount of NU for the specified staking provider."
      },
      "stakes(address)": {
        "notice": "Returns staked amount of T, Keep and Nu for the specified         staking provider."
      },
      "topUp(address,uint96)": {
        "notice": "Increases the amount of the stake for the given staking provider."
      },
      "topUpKeep(address)": {
        "notice": "Propagates information about stake top-up from the legacy KEEP         staking contract to T staking contract. Can be called only by         the owner or the staking provider."
      },
      "topUpNu(address)": {
        "notice": "Propagates information about stake top-up from the legacy NU         staking contract to T staking contract. Can be called only by         the owner or the staking provider."
      },
      "transferGovernance(address)": {
        "notice": "Transfers ownership of the contract to `newGuvnor`."
      },
      "unstakeAll(address)": {
        "notice": "Sets cached legacy stake amount to 0, sets the liquid T stake         amount to 0 and withdraws all liquid T from the stake to the         owner. Reverts if there is at least one non-zero authorization.         Can be called only by the delegation owner or the staking         provider. Can only be called when 24h passed since the stake         has been delegated."
      },
      "unstakeKeep(address)": {
        "notice": "Sets the legacy KEEP staking contract active stake amount cached         in T staking contract to 0. Reverts if the amount of liquid T         staked in T staking contract is lower than the highest         application authorization. This function allows to unstake from         KEEP staking contract and still being able to operate in T         network and earning rewards based on the liquid T staked. Can be         called only by the delegation owner or the staking provider.         Can only be called when 24h passed since the stake has been         delegated."
      },
      "unstakeNu(address,uint96)": {
        "notice": "Reduces cached legacy NU stake amount by the provided amount.         Reverts if there is at least one authorization higher than the         sum of remaining legacy NU stake and liquid T stake for that         staking provider or if the untaked amount is higher than the         cached legacy stake amount. If succeeded, the legacy NU stake         can be partially or fully undelegated on the legacy staking         contract. This function allows to unstake from NU staking         contract and still being able to operate in T network and         earning rewards based on the liquid T staked. Can be called only         by the delegation owner or the staking provider. Can only be         called when 24h passed since the stake has been delegated."
      },
      "unstakeT(address,uint96)": {
        "notice": "Reduces the liquid T stake amount by the provided amount and         withdraws T to the owner. Reverts if there is at least one         authorization higher than the sum of the legacy stake and         remaining liquid T stake or if the unstake amount is higher than         the liquid T stake amount. Can be called only by the owner or         the staking provider. Can only be called when 24h passed since         the stake has been delegated."
      },
      "withdrawNotificationReward(address,uint96)": {
        "notice": "Withdraw some amount of T tokens from notifiers treasury.         Can only be called by the governance."
      }
    },
    "notice": "TokenStaking is the main staking contract of the Threshold Network.         Apart from the basic usage of enabling T stakes, it also acts as a         sort of \"meta-staking\" contract, accepting existing legacy NU/KEEP         stakes. Additionally, it serves as application manager for the apps         that run on the Threshold Network. Note that legacy NU/KEEP staking         contracts see TokenStaking as an application (e.g., slashing is         requested by TokenStaking and performed by the legacy contracts).",
    "version": 1
  }
}