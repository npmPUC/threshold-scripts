{
  "contractName": "VendingMachine",
  "sourceName": "contracts/vending/VendingMachine.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wrappedToken",
          "type": "address"
        },
        {
          "internalType": "contract T",
          "name": "_tToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_wrappedTokenAllocation",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_tTokenAllocation",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wrappedTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Unwrapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wrappedTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Wrapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLOATING_POINT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WRAPPED_TOKEN_CONVERSION_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "conversionFromT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wrappedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tRemainder",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "conversionToT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wrappedRemainder",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "receiveApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tToken",
      "outputs": [
        {
          "internalType": "contract T",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wrappedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200108f3803806200108f8339810160408190526200003491620000cc565b6001600160a01b03808516608052831660a0526001600160601b03808316908216620000636003601262000144565b6200007090600a6200025d565b6200007c919062000272565b62000088919062000294565b60c05250620002b792505050565b6001600160a01b0381168114620000ac57600080fd5b50565b80516001600160601b0381168114620000c757600080fd5b919050565b60008060008060808587031215620000e357600080fd5b8451620000f08162000096565b6020860151909450620001038162000096565b92506200011360408601620000af565b91506200012360608601620000af565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b6000828210156200015957620001596200012e565b500390565b600181815b808511156200019f5781600019048211156200018357620001836200012e565b808516156200019157918102915b93841c939080029062000163565b509250929050565b600082620001b85750600162000257565b81620001c75750600062000257565b8160018114620001e05760028114620001eb576200020b565b600191505062000257565b60ff841115620001ff57620001ff6200012e565b50506001821b62000257565b5060208310610133831016604e8410600b841016171562000230575081810a62000257565b6200023c83836200015e565b80600019048211156200025357620002536200012e565b0290505b92915050565b60006200026b8383620001a7565b9392505050565b60008160001904831182151516156200028f576200028f6200012e565b500290565b600082620002b257634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c051610d6a620003256000396000818160e601528181610234015281816103a601526103dd0152600081816101810152818161052101526106860152600081816101420152818161028701528181610316015281816104ec01526106bb0152610d6a6000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c80631c060cbe1461009e57806351b83ebc146100cb57806371ca337d146100e15780637a93f256146101085780638f4ffcb114610128578063996c6cc31461013d578063c35d64ea1461017c578063cff0eac5146101a3578063de0e9a3e146101b6578063ea598cb0146101c9578063f4fc2f47146101dc575b600080fd5b6100b16100ac3660046109d7565b6101e4565b604080519283526020830191909152015b60405180910390f35b6100d361026b565b6040519081526020016100c2565b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b6100d3610116366004610a0c565b60006020819052908152604090205481565b61013b610136366004610a27565b610285565b005b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c2565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6100b16101b13660046109d7565b61039e565b61013b6101c43660046109d7565b61041d565b61013b6101d73660046109d7565b61042a565b6100d3600381565b6000806101f360036012610ad7565b6101fe90600a610bd4565b6102089084610bf6565b905060006102168285610ad7565b905061022460036012610ad7565b61022f90600a610bd4565b6102597f000000000000000000000000000000000000000000000000000000000000000083610c0a565b6102639190610c29565b925050915091565b61027760036012610ad7565b61028290600a610bd4565b81565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461030b5760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e206973206e6f7420746865207772617070656420746f6b656e000060448201526064015b60405180910390fd5b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038d5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79207772617070656420746f6b656e2063616c6c657220616c6c6f77656044820152601960fa1b6064820152608401610302565b6103978585610430565b5050505050565b6000806103cb7f000000000000000000000000000000000000000000000000000000000000000084610bf6565b905060006103d98285610ad7565b90507f000000000000000000000000000000000000000000000000000000000000000061040860036012610ad7565b61041390600a610bd4565b6102599083610c0a565b610427338261054e565b50565b61042733825b60008061043c836101e4565b909250905061044b8184610ad7565b92506000831161046d5760405162461bcd60e51b815260040161030290610c3d565b60408051848152602081018490526001600160a01b038616917f727200b48f3c812bfb404b578574e1c03694edb122d80fa6dcb352a9e4f8a938910160405180910390a26001600160a01b038416600090815260208190526040812080548592906104d9908490610c7f565b9091555061051490506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168530866106e2565b6105486001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858461074d565b50505050565b60008061055a8361039e565b90925090506105698184610ad7565b92506000831161058b5760405162461bcd60e51b815260040161030290610c3d565b6001600160a01b0384166000908152602081905260409020548211156106075760405162461bcd60e51b815260206004820152602b60248201527f43616e206e6f7420756e77726170206d6f7265207468616e2070726576696f7560448201526a1cdb1e481ddc985c1c195960aa1b6064820152608401610302565b60408051848152602081018490526001600160a01b038616917ff64ae1cc3e0e07da9c895b3225439175cab5838aca24c4e74852704858c96a7b910160405180910390a26001600160a01b03841660009081526020819052604081208054849290610673908490610ad7565b909155506106ae90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168530866106e2565b6105486001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858461074d565b6040516001600160a01b03808516602483015283166044820152606481018290526105489085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610782565b6040516001600160a01b03831660248201526044810182905261077d90849063a9059cbb60e01b90606401610716565b505050565b60006107d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108549092919063ffffffff16565b80519091501561077d57808060200190518101906107f59190610c97565b61077d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610302565b6060610863848460008561086d565b90505b9392505050565b6060824710156108ce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610302565b6001600160a01b0385163b6109255760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610302565b600080866001600160a01b031685876040516109419190610ce5565b60006040518083038185875af1925050503d806000811461097e576040519150601f19603f3d011682016040523d82523d6000602084013e610983565b606091505b509150915061099382828661099e565b979650505050505050565b606083156109ad575081610866565b8251156109bd5782518084602001fd5b8160405162461bcd60e51b81526004016103029190610d01565b6000602082840312156109e957600080fd5b5035919050565b80356001600160a01b0381168114610a0757600080fd5b919050565b600060208284031215610a1e57600080fd5b610866826109f0565b600080600080600060808688031215610a3f57600080fd5b610a48866109f0565b945060208601359350610a5d604087016109f0565b925060608601356001600160401b0380821115610a7957600080fd5b818801915088601f830112610a8d57600080fd5b813581811115610a9c57600080fd5b896020828501011115610aae57600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610ae957610ae9610ac1565b500390565b600181815b80851115610b29578160001904821115610b0f57610b0f610ac1565b80851615610b1c57918102915b93841c9390800290610af3565b509250929050565b600082610b4057506001610bce565b81610b4d57506000610bce565b8160018114610b635760028114610b6d57610b89565b6001915050610bce565b60ff841115610b7e57610b7e610ac1565b50506001821b610bce565b5060208310610133831016604e8410600b8410161715610bac575081810a610bce565b610bb68383610aee565b8060001904821115610bca57610bca610ac1565b0290505b92915050565b60006108668383610b31565b634e487b7160e01b600052601260045260246000fd5b600082610c0557610c05610be0565b500690565b6000816000190483118215151615610c2457610c24610ac1565b500290565b600082610c3857610c38610be0565b500490565b60208082526022908201527f446973616c6c6f7720636f6e76657273696f6e73206f66207a65726f2076616c604082015261756560f01b606082015260800190565b60008219821115610c9257610c92610ac1565b500190565b600060208284031215610ca957600080fd5b8151801515811461086657600080fd5b60005b83811015610cd4578181015183820152602001610cbc565b838111156105485750506000910152565b60008251610cf7818460208701610cb9565b9190910192915050565b6020815260008251806020840152610d20816040850160208701610cb9565b601f01601f1916919091016040019291505056fea2646970667358221220bb936fa870b05584f089c820f52c7f9fc6a018385c068e4f388d00bc8bb67c2564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100995760003560e01c80631c060cbe1461009e57806351b83ebc146100cb57806371ca337d146100e15780637a93f256146101085780638f4ffcb114610128578063996c6cc31461013d578063c35d64ea1461017c578063cff0eac5146101a3578063de0e9a3e146101b6578063ea598cb0146101c9578063f4fc2f47146101dc575b600080fd5b6100b16100ac3660046109d7565b6101e4565b604080519283526020830191909152015b60405180910390f35b6100d361026b565b6040519081526020016100c2565b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b6100d3610116366004610a0c565b60006020819052908152604090205481565b61013b610136366004610a27565b610285565b005b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c2565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6100b16101b13660046109d7565b61039e565b61013b6101c43660046109d7565b61041d565b61013b6101d73660046109d7565b61042a565b6100d3600381565b6000806101f360036012610ad7565b6101fe90600a610bd4565b6102089084610bf6565b905060006102168285610ad7565b905061022460036012610ad7565b61022f90600a610bd4565b6102597f000000000000000000000000000000000000000000000000000000000000000083610c0a565b6102639190610c29565b925050915091565b61027760036012610ad7565b61028290600a610bd4565b81565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461030b5760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e206973206e6f7420746865207772617070656420746f6b656e000060448201526064015b60405180910390fd5b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038d5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79207772617070656420746f6b656e2063616c6c657220616c6c6f77656044820152601960fa1b6064820152608401610302565b6103978585610430565b5050505050565b6000806103cb7f000000000000000000000000000000000000000000000000000000000000000084610bf6565b905060006103d98285610ad7565b90507f000000000000000000000000000000000000000000000000000000000000000061040860036012610ad7565b61041390600a610bd4565b6102599083610c0a565b610427338261054e565b50565b61042733825b60008061043c836101e4565b909250905061044b8184610ad7565b92506000831161046d5760405162461bcd60e51b815260040161030290610c3d565b60408051848152602081018490526001600160a01b038616917f727200b48f3c812bfb404b578574e1c03694edb122d80fa6dcb352a9e4f8a938910160405180910390a26001600160a01b038416600090815260208190526040812080548592906104d9908490610c7f565b9091555061051490506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168530866106e2565b6105486001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858461074d565b50505050565b60008061055a8361039e565b90925090506105698184610ad7565b92506000831161058b5760405162461bcd60e51b815260040161030290610c3d565b6001600160a01b0384166000908152602081905260409020548211156106075760405162461bcd60e51b815260206004820152602b60248201527f43616e206e6f7420756e77726170206d6f7265207468616e2070726576696f7560448201526a1cdb1e481ddc985c1c195960aa1b6064820152608401610302565b60408051848152602081018490526001600160a01b038616917ff64ae1cc3e0e07da9c895b3225439175cab5838aca24c4e74852704858c96a7b910160405180910390a26001600160a01b03841660009081526020819052604081208054849290610673908490610ad7565b909155506106ae90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168530866106e2565b6105486001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858461074d565b6040516001600160a01b03808516602483015283166044820152606481018290526105489085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610782565b6040516001600160a01b03831660248201526044810182905261077d90849063a9059cbb60e01b90606401610716565b505050565b60006107d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108549092919063ffffffff16565b80519091501561077d57808060200190518101906107f59190610c97565b61077d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610302565b6060610863848460008561086d565b90505b9392505050565b6060824710156108ce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610302565b6001600160a01b0385163b6109255760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610302565b600080866001600160a01b031685876040516109419190610ce5565b60006040518083038185875af1925050503d806000811461097e576040519150601f19603f3d011682016040523d82523d6000602084013e610983565b606091505b509150915061099382828661099e565b979650505050505050565b606083156109ad575081610866565b8251156109bd5782518084602001fd5b8160405162461bcd60e51b81526004016103029190610d01565b6000602082840312156109e957600080fd5b5035919050565b80356001600160a01b0381168114610a0757600080fd5b919050565b600060208284031215610a1e57600080fd5b610866826109f0565b600080600080600060808688031215610a3f57600080fd5b610a48866109f0565b945060208601359350610a5d604087016109f0565b925060608601356001600160401b0380821115610a7957600080fd5b818801915088601f830112610a8d57600080fd5b813581811115610a9c57600080fd5b896020828501011115610aae57600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610ae957610ae9610ac1565b500390565b600181815b80851115610b29578160001904821115610b0f57610b0f610ac1565b80851615610b1c57918102915b93841c9390800290610af3565b509250929050565b600082610b4057506001610bce565b81610b4d57506000610bce565b8160018114610b635760028114610b6d57610b89565b6001915050610bce565b60ff841115610b7e57610b7e610ac1565b50506001821b610bce565b5060208310610133831016604e8410600b8410161715610bac575081810a610bce565b610bb68383610aee565b8060001904821115610bca57610bca610ac1565b0290505b92915050565b60006108668383610b31565b634e487b7160e01b600052601260045260246000fd5b600082610c0557610c05610be0565b500690565b6000816000190483118215151615610c2457610c24610ac1565b500290565b600082610c3857610c38610be0565b500490565b60208082526022908201527f446973616c6c6f7720636f6e76657273696f6e73206f66207a65726f2076616c604082015261756560f01b606082015260800190565b60008219821115610c9257610c92610ac1565b500190565b600060208284031215610ca957600080fd5b8151801515811461086657600080fd5b60005b83811015610cd4578181015183820152602001610cbc565b838111156105485750506000910152565b60008251610cf7818460208701610cb9565b9190910192915050565b6020815260008251806020840152610d20816040850160208701610cb9565b601f01601f1916919091016040019291505056fea2646970667358221220bb936fa870b05584f089c820f52c7f9fc6a018385c068e4f388d00bc8bb67c2564736f6c63430008090033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Multiplications in this contract can't overflow uint256 as we     restrict `_wrappedTokenAllocation` and `_tTokenAllocation` to     96 bits and FLOATING_POINT_DIVISOR fits in less than 60 bits.",
        "params": {
          "_tToken": "Address of T token",
          "_tTokenAllocation": "The allocation of T this instance of Vending        Machine will receive",
          "_wrappedToken": "Address to ERC20 token that will be wrapped to T",
          "_wrappedTokenAllocation": "The total supply of the token that will be       wrapped to T"
        }
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "params": {
          "amount": "The amount of KEEP/NU to be wrapped",
          "from": "Caller's address, must be the same as `wrappedToken` field",
          "token": "Token's address, must be the same as `wrappedToken` field"
        }
      },
      "unwrap(uint256)": {
        "params": {
          "amount": "The amount of T to unwrap back to the collateral (KEEP/NU)"
        }
      },
      "wrap(uint256)": {
        "params": {
          "amount": "The amount of KEEP/NU to be wrapped"
        }
      }
    },
    "title": "T token vending machine",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_18642": {
          "entryPoint": null,
          "id": 18642,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "abi_decode_tuple_t_contract$_IERC20_$5807t_contract$_T_$18453t_uint96t_uint96_fromMemory": {
          "entryPoint": 204,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_uint96_fromMemory": {
          "entryPoint": 175,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_div_t_uint256": {
          "entryPoint": 660,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_exp_helper": {
          "entryPoint": 350,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "checked_exp_t_uint256_t_uint256": {
          "entryPoint": 605,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_exp_unsigned": {
          "entryPoint": 423,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 626,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 324,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 302,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_contract_IERC20": {
          "entryPoint": 150,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:2965:80",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:80",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "67:86:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "131:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "140:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "143:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "133:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "133:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "133:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "90:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "101:5:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "116:3:80",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "121:1:80",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "112:3:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "112:11:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "125:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "108:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "108:19:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "97:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "97:31:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "87:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "87:42:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "80:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "80:50:80"
                      },
                      "nodeType": "YulIf",
                      "src": "77:70:80"
                    }
                  ]
                },
                "name": "validator_revert_contract_IERC20",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "56:5:80",
                    "type": ""
                  }
                ],
                "src": "14:139:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "217:116:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "227:22:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "242:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "236:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "236:13:80"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "227:5:80"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "311:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "320:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "323:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "313:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "313:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "313:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "271:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "282:5:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "297:2:80",
                                            "type": "",
                                            "value": "96"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "301:1:80",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "293:3:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "293:10:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "305:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "289:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "289:18:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "278:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "278:30:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "268:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "268:41:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "261:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "261:49:80"
                      },
                      "nodeType": "YulIf",
                      "src": "258:69:80"
                    }
                  ]
                },
                "name": "abi_decode_uint96_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "196:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "207:5:80",
                    "type": ""
                  }
                ],
                "src": "158:175:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "494:438:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "541:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "550:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "553:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "543:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "543:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "543:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "515:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "524:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "511:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "511:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "536:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "507:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "507:33:80"
                      },
                      "nodeType": "YulIf",
                      "src": "504:53:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "566:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "585:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "579:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "579:16:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "570:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "637:5:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_IERC20",
                          "nodeType": "YulIdentifier",
                          "src": "604:32:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "604:39:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "604:39:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "652:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "662:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "652:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "676:40:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "701:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "712:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "697:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "697:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "691:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "691:25:80"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "680:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "758:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_contract_IERC20",
                          "nodeType": "YulIdentifier",
                          "src": "725:32:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "725:41:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "725:41:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "775:17:80",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "785:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "775:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "801:58:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "844:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "855:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "840:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "840:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "811:28:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "811:48:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "801:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "868:58:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "911:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "922:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "907:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "907:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_uint96_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "878:28:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "878:48:80"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "868:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_contract$_IERC20_$5807t_contract$_T_$18453t_uint96t_uint96_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "436:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "447:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "459:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "467:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "475:6:80",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "483:6:80",
                    "type": ""
                  }
                ],
                "src": "338:594:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "969:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "986:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "993:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "998:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "989:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "989:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "979:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "979:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "979:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1026:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1029:4:80",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1019:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1019:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1019:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1050:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1053:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "1043:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1043:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1043:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "937:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1118:76:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1140:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1142:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1142:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1142:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1134:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1137:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "1131:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1131:8:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1128:34:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1171:17:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1183:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1186:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1179:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1179:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "1171:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1100:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1103:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "1109:4:80",
                    "type": ""
                  }
                ],
                "src": "1069:125:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1263:358:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1273:16:80",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1288:1:80",
                        "type": "",
                        "value": "1"
                      },
                      "variables": [
                        {
                          "name": "power_1",
                          "nodeType": "YulTypedName",
                          "src": "1277:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1298:16:80",
                      "value": {
                        "name": "power_1",
                        "nodeType": "YulIdentifier",
                        "src": "1307:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "1298:5:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1323:13:80",
                      "value": {
                        "name": "_base",
                        "nodeType": "YulIdentifier",
                        "src": "1331:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "base",
                          "nodeType": "YulIdentifier",
                          "src": "1323:4:80"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1387:228:80",
                        "statements": [
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "1432:22:80",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nodeType": "YulIdentifier",
                                      "src": "1434:16:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1434:18:80"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "1434:18:80"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "1407:4:80"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1421:1:80",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "1417:3:80"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1417:6:80"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "1425:4:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "div",
                                    "nodeType": "YulIdentifier",
                                    "src": "1413:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1413:17:80"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "1404:2:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1404:27:80"
                            },
                            "nodeType": "YulIf",
                            "src": "1401:53:80"
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "1493:29:80",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "1495:25:80",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "1508:5:80"
                                      },
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "1515:4:80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "1504:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1504:16:80"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "power",
                                      "nodeType": "YulIdentifier",
                                      "src": "1495:5:80"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "1474:8:80"
                                },
                                {
                                  "name": "power_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1484:7:80"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "1470:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1470:22:80"
                            },
                            "nodeType": "YulIf",
                            "src": "1467:55:80"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "1535:23:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "1547:4:80"
                                },
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "1553:4:80"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nodeType": "YulIdentifier",
                                "src": "1543:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1543:15:80"
                            },
                            "variableNames": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "1535:4:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "1571:34:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "power_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1587:7:80"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "1596:8:80"
                                }
                              ],
                              "functionName": {
                                "name": "shr",
                                "nodeType": "YulIdentifier",
                                "src": "1583:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1583:22:80"
                            },
                            "variableNames": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "1571:8:80"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "1356:8:80"
                          },
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "1366:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1353:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1353:21:80"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "1375:3:80",
                        "statements": []
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "1349:3:80",
                        "statements": []
                      },
                      "src": "1345:270:80"
                    }
                  ]
                },
                "name": "checked_exp_helper",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "_base",
                    "nodeType": "YulTypedName",
                    "src": "1227:5:80",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "1234:8:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "1247:5:80",
                    "type": ""
                  },
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "1254:4:80",
                    "type": ""
                  }
                ],
                "src": "1199:422:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1685:747:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1723:52:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "1737:10:80",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1746:1:80",
                              "type": "",
                              "value": "1"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "1737:5:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "1760:5:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "1705:8:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1698:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1698:16:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1695:80:80"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1808:52:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "1822:10:80",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1831:1:80",
                              "type": "",
                              "value": "0"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "1822:5:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "1845:5:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "1794:4:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1787:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1787:12:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1784:76:80"
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1896:52:80",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1910:10:80",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1919:1:80",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "1910:5:80"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "1933:5:80"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "1889:59:80",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1894:1:80",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1964:123:80",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1999:22:80",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "2001:16:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2001:18:80"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2001:18:80"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "1984:8:80"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1994:3:80",
                                      "type": "",
                                      "value": "255"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1981:2:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1981:17:80"
                                },
                                "nodeType": "YulIf",
                                "src": "1978:43:80"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2034:25:80",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "2047:8:80"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2057:1:80",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "2043:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2043:16:80"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "2034:5:80"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "2072:5:80"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "1957:130:80",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1962:1:80",
                            "type": "",
                            "value": "2"
                          }
                        }
                      ],
                      "expression": {
                        "name": "base",
                        "nodeType": "YulIdentifier",
                        "src": "1876:4:80"
                      },
                      "nodeType": "YulSwitch",
                      "src": "1869:218:80"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2185:70:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2199:28:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2212:4:80"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "2218:8:80"
                                }
                              ],
                              "functionName": {
                                "name": "exp",
                                "nodeType": "YulIdentifier",
                                "src": "2208:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2208:19:80"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "2199:5:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "2240:5:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "2109:4:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2115:2:80",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2106:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2106:12:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "2123:8:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2133:2:80",
                                    "type": "",
                                    "value": "78"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2120:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2120:16:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2102:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2102:35:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "2146:4:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2152:3:80",
                                    "type": "",
                                    "value": "307"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2143:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2143:13:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "2161:8:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2171:2:80",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2158:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2158:16:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2139:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2139:36:80"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "2099:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2099:77:80"
                      },
                      "nodeType": "YulIf",
                      "src": "2096:159:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2264:57:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "2306:4:80"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "2312:8:80"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_helper",
                          "nodeType": "YulIdentifier",
                          "src": "2287:18:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2287:34:80"
                      },
                      "variables": [
                        {
                          "name": "power_1",
                          "nodeType": "YulTypedName",
                          "src": "2268:7:80",
                          "type": ""
                        },
                        {
                          "name": "base_1",
                          "nodeType": "YulTypedName",
                          "src": "2277:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2366:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "2368:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2368:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2368:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "2336:7:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2353:1:80",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "2349:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2349:6:80"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "2357:6:80"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "2345:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2345:19:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2333:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2333:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "2330:58:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2397:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "2410:7:80"
                          },
                          {
                            "name": "base_1",
                            "nodeType": "YulIdentifier",
                            "src": "2419:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "2406:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2406:20:80"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2397:5:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_unsigned",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "1656:4:80",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "1662:8:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "1675:5:80",
                    "type": ""
                  }
                ],
                "src": "1626:806:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2507:61:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2517:45:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "2547:4:80"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "2553:8:80"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_unsigned",
                          "nodeType": "YulIdentifier",
                          "src": "2526:20:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2526:36:80"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2517:5:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_t_uint256_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2478:4:80",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2484:8:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2497:5:80",
                    "type": ""
                  }
                ],
                "src": "2437:131:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2625:116:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2684:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "2686:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2686:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2686:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2656:1:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2649:6:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2649:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2642:6:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2642:17:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2664:1:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2675:1:80",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2671:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2671:6:80"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2679:1:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "2667:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2667:14:80"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2661:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2661:21:80"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "2638:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2638:45:80"
                      },
                      "nodeType": "YulIf",
                      "src": "2635:71:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2715:20:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2730:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2733:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "2726:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2726:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "2715:7:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "2604:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "2607:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "2613:7:80",
                    "type": ""
                  }
                ],
                "src": "2573:168:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2792:171:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2823:111:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2844:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2851:3:80",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2856:10:80",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "2847:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2847:20:80"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2837:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2837:31:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2837:31:80"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2888:1:80",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2891:4:80",
                                  "type": "",
                                  "value": "0x12"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2881:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2881:15:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2881:15:80"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2916:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2919:4:80",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2909:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2909:15:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2909:15:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2812:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2805:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2805:9:80"
                      },
                      "nodeType": "YulIf",
                      "src": "2802:132:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2943:14:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2952:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2955:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "2948:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2948:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "2943:1:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "2777:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "2780:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "2786:1:80",
                    "type": ""
                  }
                ],
                "src": "2746:217:80"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_uint96_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(96, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$5807t_contract$_T_$18453t_uint96t_uint96_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n        value2 := abi_decode_uint96_fromMemory(add(headStart, 64))\n        value3 := abi_decode_uint96_fromMemory(add(headStart, 96))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n}",
          "id": 80,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x108F CODESIZE SUB DUP1 PUSH3 0x108F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0xCC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x80 MSTORE DUP4 AND PUSH1 0xA0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP4 AND SWAP1 DUP3 AND PUSH3 0x63 PUSH1 0x3 PUSH1 0x12 PUSH3 0x144 JUMP JUMPDEST PUSH3 0x70 SWAP1 PUSH1 0xA PUSH3 0x25D JUMP JUMPDEST PUSH3 0x7C SWAP2 SWAP1 PUSH3 0x272 JUMP JUMPDEST PUSH3 0x88 SWAP2 SWAP1 PUSH3 0x294 JUMP JUMPDEST PUSH1 0xC0 MSTORE POP PUSH3 0x2B7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH3 0xF0 DUP2 PUSH3 0x96 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x103 DUP2 PUSH3 0x96 JUMP JUMPDEST SWAP3 POP PUSH3 0x113 PUSH1 0x40 DUP7 ADD PUSH3 0xAF JUMP JUMPDEST SWAP2 POP PUSH3 0x123 PUSH1 0x60 DUP7 ADD PUSH3 0xAF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x159 JUMPI PUSH3 0x159 PUSH3 0x12E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x19F JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x183 JUMPI PUSH3 0x183 PUSH3 0x12E JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x191 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x163 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x1B8 JUMPI POP PUSH1 0x1 PUSH3 0x257 JUMP JUMPDEST DUP2 PUSH3 0x1C7 JUMPI POP PUSH1 0x0 PUSH3 0x257 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x1E0 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x1EB JUMPI PUSH3 0x20B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x257 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x1FF JUMPI PUSH3 0x1FF PUSH3 0x12E JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x257 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x230 JUMPI POP DUP2 DUP2 EXP PUSH3 0x257 JUMP JUMPDEST PUSH3 0x23C DUP4 DUP4 PUSH3 0x15E JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x253 JUMPI PUSH3 0x253 PUSH3 0x12E JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x26B DUP4 DUP4 PUSH3 0x1A7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x28F JUMPI PUSH3 0x28F PUSH3 0x12E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x2B2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0xD6A PUSH3 0x325 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xE6 ADD MSTORE DUP2 DUP2 PUSH2 0x234 ADD MSTORE DUP2 DUP2 PUSH2 0x3A6 ADD MSTORE PUSH2 0x3DD ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x181 ADD MSTORE DUP2 DUP2 PUSH2 0x521 ADD MSTORE PUSH2 0x686 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x142 ADD MSTORE DUP2 DUP2 PUSH2 0x287 ADD MSTORE DUP2 DUP2 PUSH2 0x316 ADD MSTORE DUP2 DUP2 PUSH2 0x4EC ADD MSTORE PUSH2 0x6BB ADD MSTORE PUSH2 0xD6A PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x99 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1C060CBE EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x51B83EBC EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x71CA337D EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x7A93F256 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x8F4FFCB1 EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x996C6CC3 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xC35D64EA EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xCFF0EAC5 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0xDE0E9A3E EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xEA598CB0 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0xF4FC2F47 EQ PUSH2 0x1DC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1 PUSH2 0xAC CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x1E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH2 0x26B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0xD3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0xA0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x13B PUSH2 0x136 CALLDATASIZE PUSH1 0x4 PUSH2 0xA27 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x164 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0x164 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xB1 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x39E JUMP JUMPDEST PUSH2 0x13B PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x41D JUMP JUMPDEST PUSH2 0x13B PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x42A JUMP JUMPDEST PUSH2 0xD3 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F3 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x1FE SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x208 SWAP1 DUP5 PUSH2 0xBF6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x216 DUP3 DUP6 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP PUSH2 0x224 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x22F SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x259 PUSH32 0x0 DUP4 PUSH2 0xC0A JUMP JUMPDEST PUSH2 0x263 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x277 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x282 SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x30B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E206973206E6F7420746865207772617070656420746F6B656E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x38D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79207772617070656420746F6B656E2063616C6C657220616C6C6F7765 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH2 0x397 DUP6 DUP6 PUSH2 0x430 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3CB PUSH32 0x0 DUP5 PUSH2 0xBF6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D9 DUP3 DUP6 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH2 0x408 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x413 SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x259 SWAP1 DUP4 PUSH2 0xC0A JUMP JUMPDEST PUSH2 0x427 CALLER DUP3 PUSH2 0x54E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x427 CALLER DUP3 JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x43C DUP4 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x44B DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 GT PUSH2 0x46D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x727200B48F3C812BFB404B578574E1C03694EDB122D80FA6DCB352A9E4F8A938 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x4D9 SWAP1 DUP5 SWAP1 PUSH2 0xC7F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x514 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 ADDRESS DUP7 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x548 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 DUP5 PUSH2 0x74D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x55A DUP4 PUSH2 0x39E JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x569 DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 GT PUSH2 0x58B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206E6F7420756E77726170206D6F7265207468616E2070726576696F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1CDB1E481DDC985C1C1959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0xF64AE1CC3E0E07DA9C895B3225439175CAB5838ACA24C4E74852704858C96A7B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x673 SWAP1 DUP5 SWAP1 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x6AE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 ADDRESS DUP7 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x548 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 DUP5 PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x548 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x77D SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x716 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D7 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x854 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x77D JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7F5 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x863 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x8CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x941 SWAP2 SWAP1 PUSH2 0xCE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x983 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x993 DUP3 DUP3 DUP7 PUSH2 0x99E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x9AD JUMPI POP DUP2 PUSH2 0x866 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x9BD JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302 SWAP2 SWAP1 PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x866 DUP3 PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA48 DUP7 PUSH2 0x9F0 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0xA5D PUSH1 0x40 DUP8 ADD PUSH2 0x9F0 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xAAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xAE9 JUMPI PUSH2 0xAE9 PUSH2 0xAC1 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xB29 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xB0F JUMPI PUSH2 0xB0F PUSH2 0xAC1 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xB1C JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xAF3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB40 JUMPI POP PUSH1 0x1 PUSH2 0xBCE JUMP JUMPDEST DUP2 PUSH2 0xB4D JUMPI POP PUSH1 0x0 PUSH2 0xBCE JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xB63 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xB6D JUMPI PUSH2 0xB89 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xBCE JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xB7E JUMPI PUSH2 0xB7E PUSH2 0xAC1 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xBCE JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBAC JUMPI POP DUP2 DUP2 EXP PUSH2 0xBCE JUMP JUMPDEST PUSH2 0xBB6 DUP4 DUP4 PUSH2 0xAEE JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xBCA JUMPI PUSH2 0xBCA PUSH2 0xAC1 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 DUP4 DUP4 PUSH2 0xB31 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC05 JUMPI PUSH2 0xC05 PUSH2 0xBE0 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC24 JUMPI PUSH2 0xC24 PUSH2 0xAC1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC38 JUMPI PUSH2 0xC38 PUSH2 0xBE0 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x446973616C6C6F7720636F6E76657273696F6E73206F66207A65726F2076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xC92 JUMPI PUSH2 0xC92 PUSH2 0xAC1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCD4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCBC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x548 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xCF7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xCB9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xD20 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xCB9 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB SWAP4 PUSH16 0xA870B05584F089C820F52C7F9FC6A018 CODESIZE 0x5C MOD DUP15 0x4F CODESIZE DUP14 STOP 0xBC DUP12 0xB6 PUSH29 0x2564736F6C634300080900330000000000000000000000000000000000 ",
      "sourceMap": "1941:7730:79:-:0;;;4696:324;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4847:28:79;;;;;4885:16;;;;-1:-1:-1;;;;;4931:82:79;;;;4932:42;;2733:39;2586:1;2733:2;:39;:::i;:::-;2728:45;;:2;:45;:::i;:::-;4932:42;;;;:::i;:::-;4931:82;;;;:::i;:::-;4911:102;;-1:-1:-1;1941:7730:79;;-1:-1:-1;;;1941:7730:79;14:139:80;-1:-1:-1;;;;;97:31:80;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:175::-;236:13;;-1:-1:-1;;;;;278:30:80;;268:41;;258:69;;323:1;320;313:12;258:69;158:175;;;:::o;338:594::-;459:6;467;475;483;536:3;524:9;515:7;511:23;507:33;504:53;;;553:1;550;543:12;504:53;585:9;579:16;604:39;637:5;604:39;:::i;:::-;712:2;697:18;;691:25;662:5;;-1:-1:-1;725:41:80;691:25;725:41;:::i;:::-;785:7;-1:-1:-1;811:48:80;855:2;840:18;;811:48;:::i;:::-;801:58;;878:48;922:2;911:9;907:18;878:48;:::i;:::-;868:58;;338:594;;;;;;;:::o;937:127::-;998:10;993:3;989:20;986:1;979:31;1029:4;1026:1;1019:15;1053:4;1050:1;1043:15;1069:125;1109:4;1137:1;1134;1131:8;1128:34;;;1142:18;;:::i;:::-;-1:-1:-1;1179:9:80;;1069:125::o;1199:422::-;1288:1;1331:5;1288:1;1345:270;1366:7;1356:8;1353:21;1345:270;;;1425:4;1421:1;1417:6;1413:17;1407:4;1404:27;1401:53;;;1434:18;;:::i;:::-;1484:7;1474:8;1470:22;1467:55;;;1504:16;;;;1467:55;1583:22;;;;1543:15;;;;1345:270;;;1349:3;1199:422;;;;;:::o;1626:806::-;1675:5;1705:8;1695:80;;-1:-1:-1;1746:1:80;1760:5;;1695:80;1794:4;1784:76;;-1:-1:-1;1831:1:80;1845:5;;1784:76;1876:4;1894:1;1889:59;;;;1962:1;1957:130;;;;1869:218;;1889:59;1919:1;1910:10;;1933:5;;;1957:130;1994:3;1984:8;1981:17;1978:43;;;2001:18;;:::i;:::-;-1:-1:-1;;2057:1:80;2043:16;;2072:5;;1869:218;;2171:2;2161:8;2158:16;2152:3;2146:4;2143:13;2139:36;2133:2;2123:8;2120:16;2115:2;2109:4;2106:12;2102:35;2099:77;2096:159;;;-1:-1:-1;2208:19:80;;;2240:5;;2096:159;2287:34;2312:8;2306:4;2287:34;:::i;:::-;2357:6;2353:1;2349:6;2345:19;2336:7;2333:32;2330:58;;;2368:18;;:::i;:::-;2406:20;;-1:-1:-1;1626:806:80;;;;;:::o;2437:131::-;2497:5;2526:36;2553:8;2547:4;2526:36;:::i;:::-;2517:45;2437:131;-1:-1:-1;;;2437:131:80:o;2573:168::-;2613:7;2679:1;2675;2671:6;2667:14;2664:1;2661:21;2656:1;2649:9;2642:17;2638:45;2635:71;;;2686:18;;:::i;:::-;-1:-1:-1;2726:9:80;;2573:168::o;2746:217::-;2786:1;2812;2802:132;;2856:10;2851:3;2847:20;2844:1;2837:31;2891:4;2888:1;2881:15;2919:4;2916:1;2909:15;2802:132;-1:-1:-1;2948:9:80;;2746:217::o;:::-;1941:7730:79;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@FLOATING_POINT_DIVISOR_18578": {
          "entryPoint": 619,
          "id": 18578,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@WRAPPED_TOKEN_CONVERSION_PRECISION_18569": {
          "entryPoint": null,
          "id": 18569,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_callOptionalReturn_6897": {
          "entryPoint": 1922,
          "id": 6897,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_unwrap_18895": {
          "entryPoint": 1358,
          "id": 18895,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_wrap_18829": {
          "entryPoint": 1072,
          "id": 18829,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@conversionFromT_18772": {
          "entryPoint": 926,
          "id": 18772,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "@conversionToT_18740": {
          "entryPoint": 484,
          "id": 18740,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "@functionCallWithValue_7173": {
          "entryPoint": 2157,
          "id": 7173,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@functionCall_7103": {
          "entryPoint": 2132,
          "id": 7103,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@isContract_7032": {
          "entryPoint": null,
          "id": 7032,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@ratio_18589": {
          "entryPoint": null,
          "id": 18589,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@receiveApproval_18695": {
          "entryPoint": 645,
          "id": 18695,
          "parameterSlots": 5,
          "returnSlots": 0
        },
        "@safeTransferFrom_6731": {
          "entryPoint": 1762,
          "id": 6731,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@safeTransfer_6705": {
          "entryPoint": 1869,
          "id": 6705,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@tToken_18586": {
          "entryPoint": null,
          "id": 18586,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@unwrap_18708": {
          "entryPoint": 1053,
          "id": 18708,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@verifyCallResult_7308": {
          "entryPoint": 2462,
          "id": 7308,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@wrap_18655": {
          "entryPoint": 1066,
          "id": 18655,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@wrappedBalance_18594": {
          "entryPoint": null,
          "id": 18594,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@wrappedToken_18582": {
          "entryPoint": null,
          "id": 18582,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "abi_decode_address": {
          "entryPoint": 2544,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 2572,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_uint256t_addresst_bytes_calldata_ptr": {
          "entryPoint": 2599,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 3223,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 2519,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 3301,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_IERC20_$5807__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_T_$18453__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 3329,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_003b743907bf744938cf347613798250817435351adcaacbb79a7bf145cf4c27__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_02917beb749fa588a43a386985ef91c5545d5d69ba9f02a1296de643d818e245__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 3133,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1cb136618e570bf45abf1d809df2982abc55749c2bce3d64eed9f8a6868c5b59__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_626258fc5d38fb1c6a72172ec9c61768c201646df0b287d4bc60b2f1e9cd1d4c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 3199,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_div_t_uint256": {
          "entryPoint": 3113,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_exp_helper": {
          "entryPoint": 2798,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "checked_exp_t_uint256_t_uint256": {
          "entryPoint": 3028,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_exp_unsigned": {
          "entryPoint": 2865,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 3082,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 2775,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "copy_memory_to_memory": {
          "entryPoint": 3257,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "mod_t_uint256": {
          "entryPoint": 3062,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 2753,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x12": {
          "entryPoint": 3040,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:9194:80",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:80",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "84:110:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "130:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "139:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "142:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "132:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "132:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "132:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "105:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "114:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "101:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "101:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "126:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "97:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "97:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "94:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "155:33:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "178:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "165:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "165:23:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "155:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "50:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "61:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "73:6:80",
                    "type": ""
                  }
                ],
                "src": "14:180:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "328:119:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "338:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "350:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "361:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "346:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "346:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "338:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "380:9:80"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "391:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "373:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "373:25:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "373:25:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "418:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "429:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "414:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "414:18:80"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "434:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "407:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "407:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "407:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "289:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "300:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "308:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "319:4:80",
                    "type": ""
                  }
                ],
                "src": "199:248:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "553:76:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "563:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "575:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "586:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "571:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "571:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "563:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "605:9:80"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "616:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "598:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "598:25:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "598:25:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "522:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "533:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "544:4:80",
                    "type": ""
                  }
                ],
                "src": "452:177:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "683:124:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "693:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "715:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "702:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "702:20:80"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "693:5:80"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "785:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "794:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "797:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "787:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "787:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "787:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "744:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "755:5:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "770:3:80",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "775:1:80",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "766:3:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "766:11:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "779:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "762:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "762:19:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "751:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "751:31:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "741:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "741:42:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "734:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "734:50:80"
                      },
                      "nodeType": "YulIf",
                      "src": "731:70:80"
                    }
                  ]
                },
                "name": "abi_decode_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "662:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "673:5:80",
                    "type": ""
                  }
                ],
                "src": "634:173:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "882:116:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "928:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "937:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "940:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "930:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "930:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "930:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "903:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "912:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "899:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "899:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "924:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "895:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "895:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "892:52:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "953:39:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "982:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "963:18:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "963:29:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "953:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "848:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "859:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "871:6:80",
                    "type": ""
                  }
                ],
                "src": "812:186:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1143:668:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1190:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1199:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1202:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1192:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1192:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1192:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1164:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1173:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1160:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1160:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1185:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1156:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1156:33:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1153:53:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1215:39:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1244:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1225:18:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1225:29:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1215:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1263:42:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1290:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1301:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1286:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1286:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1273:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1273:32:80"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1263:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1314:48:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1347:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1358:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1343:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1343:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "1324:18:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1324:38:80"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1314:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1371:46:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1402:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1413:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1398:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1398:18:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1385:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1385:32:80"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "1375:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1426:28:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1444:2:80",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1448:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1440:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1440:10:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1452:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1436:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1436:18:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "1430:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1481:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1490:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1493:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1483:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1483:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1483:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1469:6:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1477:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1466:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1466:14:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1463:34:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1506:32:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1520:9:80"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1531:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1516:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1516:22:80"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "1510:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1586:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1595:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1598:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1588:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1588:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1588:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1565:2:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1569:4:80",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1561:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1561:13:80"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1576:7:80"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1557:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1557:27:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1550:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1550:35:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1547:55:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1611:30:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "1638:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1625:12:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1625:16:80"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "1615:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1668:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1677:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1680:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1670:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1670:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1670:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1656:6:80"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1664:2:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1653:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1653:14:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1650:34:80"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1734:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1743:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1746:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1736:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1736:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1736:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1707:2:80"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1711:6:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1703:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1703:15:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1720:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1699:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1699:24:80"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1725:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1696:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1696:37:80"
                      },
                      "nodeType": "YulIf",
                      "src": "1693:57:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1759:21:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "1773:2:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1777:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1769:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1769:11:80"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "1759:6:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1789:16:80",
                      "value": {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "1799:6:80"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "1789:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256t_addresst_bytes_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1077:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1088:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1100:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1108:6:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1116:6:80",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "1124:6:80",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "1132:6:80",
                    "type": ""
                  }
                ],
                "src": "1003:808:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1932:102:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1942:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1954:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1965:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1950:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1950:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1942:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1984:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1999:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2015:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2020:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2011:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2011:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2024:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2007:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2007:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1995:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1995:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1977:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1977:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1977:51:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_IERC20_$5807__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1901:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1912:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1923:4:80",
                    "type": ""
                  }
                ],
                "src": "1816:218:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2151:102:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2161:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2173:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2184:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2169:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2169:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2161:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2203:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2218:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2234:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2239:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2230:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2230:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2243:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2226:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2226:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2214:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2214:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2196:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2196:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2196:51:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_T_$18453__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2120:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2131:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2142:4:80",
                    "type": ""
                  }
                ],
                "src": "2039:214:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2290:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2307:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2314:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2319:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "2310:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2310:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2300:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2300:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2300:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2347:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2350:4:80",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2340:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2340:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2340:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2371:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2374:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "2364:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2364:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2364:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "2258:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2439:76:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2461:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "2463:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2463:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2463:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2455:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2458:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "2452:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2452:8:80"
                      },
                      "nodeType": "YulIf",
                      "src": "2449:34:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2492:17:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2504:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2507:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "2500:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2500:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "2492:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "2421:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "2424:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "2430:4:80",
                    "type": ""
                  }
                ],
                "src": "2390:125:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2584:358:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2594:16:80",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2609:1:80",
                        "type": "",
                        "value": "1"
                      },
                      "variables": [
                        {
                          "name": "power_1",
                          "nodeType": "YulTypedName",
                          "src": "2598:7:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2619:16:80",
                      "value": {
                        "name": "power_1",
                        "nodeType": "YulIdentifier",
                        "src": "2628:7:80"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2619:5:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2644:13:80",
                      "value": {
                        "name": "_base",
                        "nodeType": "YulIdentifier",
                        "src": "2652:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "base",
                          "nodeType": "YulIdentifier",
                          "src": "2644:4:80"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2708:228:80",
                        "statements": [
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2753:22:80",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nodeType": "YulIdentifier",
                                      "src": "2755:16:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2755:18:80"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "2755:18:80"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2728:4:80"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2742:1:80",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "2738:3:80"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2738:6:80"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "2746:4:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "div",
                                    "nodeType": "YulIdentifier",
                                    "src": "2734:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2734:17:80"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "2725:2:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2725:27:80"
                            },
                            "nodeType": "YulIf",
                            "src": "2722:53:80"
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2814:29:80",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2816:25:80",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "2829:5:80"
                                      },
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "2836:4:80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "2825:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2825:16:80"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "power",
                                      "nodeType": "YulIdentifier",
                                      "src": "2816:5:80"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "2795:8:80"
                                },
                                {
                                  "name": "power_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2805:7:80"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "2791:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2791:22:80"
                            },
                            "nodeType": "YulIf",
                            "src": "2788:55:80"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2856:23:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2868:4:80"
                                },
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2874:4:80"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nodeType": "YulIdentifier",
                                "src": "2864:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2864:15:80"
                            },
                            "variableNames": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "2856:4:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2892:34:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "power_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2908:7:80"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "2917:8:80"
                                }
                              ],
                              "functionName": {
                                "name": "shr",
                                "nodeType": "YulIdentifier",
                                "src": "2904:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2904:22:80"
                            },
                            "variableNames": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2892:8:80"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "2677:8:80"
                          },
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "2687:7:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2674:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2674:21:80"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "2696:3:80",
                        "statements": []
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "2670:3:80",
                        "statements": []
                      },
                      "src": "2666:270:80"
                    }
                  ]
                },
                "name": "checked_exp_helper",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "_base",
                    "nodeType": "YulTypedName",
                    "src": "2548:5:80",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2555:8:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2568:5:80",
                    "type": ""
                  },
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2575:4:80",
                    "type": ""
                  }
                ],
                "src": "2520:422:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3006:747:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3044:52:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3058:10:80",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3067:1:80",
                              "type": "",
                              "value": "1"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "3058:5:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "3081:5:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "3026:8:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3019:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3019:16:80"
                      },
                      "nodeType": "YulIf",
                      "src": "3016:80:80"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3129:52:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3143:10:80",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3152:1:80",
                              "type": "",
                              "value": "0"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "3143:5:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "3166:5:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "3115:4:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3108:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3108:12:80"
                      },
                      "nodeType": "YulIf",
                      "src": "3105:76:80"
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3217:52:80",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3231:10:80",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3240:1:80",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3231:5:80"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3254:5:80"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "3210:59:80",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3215:1:80",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3285:123:80",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "3320:22:80",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "3322:16:80"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3322:18:80"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "3322:18:80"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "3305:8:80"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3315:3:80",
                                      "type": "",
                                      "value": "255"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "3302:2:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3302:17:80"
                                },
                                "nodeType": "YulIf",
                                "src": "3299:43:80"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "3355:25:80",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "3368:8:80"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3378:1:80",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "3364:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3364:16:80"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3355:5:80"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3393:5:80"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "3278:130:80",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3283:1:80",
                            "type": "",
                            "value": "2"
                          }
                        }
                      ],
                      "expression": {
                        "name": "base",
                        "nodeType": "YulIdentifier",
                        "src": "3197:4:80"
                      },
                      "nodeType": "YulSwitch",
                      "src": "3190:218:80"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3506:70:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3520:28:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "3533:4:80"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "3539:8:80"
                                }
                              ],
                              "functionName": {
                                "name": "exp",
                                "nodeType": "YulIdentifier",
                                "src": "3529:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3529:19:80"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "3520:5:80"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "3561:5:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3430:4:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3436:2:80",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3427:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3427:12:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3444:8:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3454:2:80",
                                    "type": "",
                                    "value": "78"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3441:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3441:16:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3423:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3423:35:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3467:4:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3473:3:80",
                                    "type": "",
                                    "value": "307"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3464:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3464:13:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3482:8:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3492:2:80",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3479:2:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3479:16:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3460:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3460:36:80"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "3420:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3420:77:80"
                      },
                      "nodeType": "YulIf",
                      "src": "3417:159:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3585:57:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "3627:4:80"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "3633:8:80"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_helper",
                          "nodeType": "YulIdentifier",
                          "src": "3608:18:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3608:34:80"
                      },
                      "variables": [
                        {
                          "name": "power_1",
                          "nodeType": "YulTypedName",
                          "src": "3589:7:80",
                          "type": ""
                        },
                        {
                          "name": "base_1",
                          "nodeType": "YulTypedName",
                          "src": "3598:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3687:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3689:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3689:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3689:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "3657:7:80"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3674:1:80",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "3670:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3670:6:80"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "3678:6:80"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "3666:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3666:19:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3654:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3654:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "3651:58:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3718:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "3731:7:80"
                          },
                          {
                            "name": "base_1",
                            "nodeType": "YulIdentifier",
                            "src": "3740:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "3727:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3727:20:80"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "3718:5:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_unsigned",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2977:4:80",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2983:8:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2996:5:80",
                    "type": ""
                  }
                ],
                "src": "2947:806:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3828:61:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3838:45:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "3868:4:80"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "3874:8:80"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_unsigned",
                          "nodeType": "YulIdentifier",
                          "src": "3847:20:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3847:36:80"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "3838:5:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_t_uint256_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "3799:4:80",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "3805:8:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "3818:5:80",
                    "type": ""
                  }
                ],
                "src": "3758:131:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3926:95:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3943:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3950:3:80",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3955:10:80",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "3946:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3946:20:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3936:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3936:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3936:31:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3983:1:80",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3986:4:80",
                            "type": "",
                            "value": "0x12"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3976:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3976:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3976:15:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4007:1:80",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4010:4:80",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "4000:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4000:15:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4000:15:80"
                    }
                  ]
                },
                "name": "panic_error_0x12",
                "nodeType": "YulFunctionDefinition",
                "src": "3894:127:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4064:74:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4087:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x12",
                                "nodeType": "YulIdentifier",
                                "src": "4089:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4089:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4089:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4084:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4077:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4077:9:80"
                      },
                      "nodeType": "YulIf",
                      "src": "4074:35:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4118:14:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "4127:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4130:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "mod",
                          "nodeType": "YulIdentifier",
                          "src": "4123:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4123:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "4118:1:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "mod_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "4049:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "4052:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "4058:1:80",
                    "type": ""
                  }
                ],
                "src": "4026:112:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4195:116:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4254:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "4256:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4256:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4256:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "4226:1:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4219:6:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4219:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4212:6:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4212:17:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "4234:1:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4245:1:80",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "4241:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4241:6:80"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "4249:1:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "4237:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4237:14:80"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4231:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4231:21:80"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "4208:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4208:45:80"
                      },
                      "nodeType": "YulIf",
                      "src": "4205:71:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4285:20:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "4300:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4303:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "4296:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4296:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "4285:7:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "4174:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "4177:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "4183:7:80",
                    "type": ""
                  }
                ],
                "src": "4143:168:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4362:74:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4385:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x12",
                                "nodeType": "YulIdentifier",
                                "src": "4387:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4387:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4387:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4382:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4375:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4375:9:80"
                      },
                      "nodeType": "YulIf",
                      "src": "4372:35:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4416:14:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "4425:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4428:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "4421:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4421:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "4416:1:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "4347:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "4350:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "4356:1:80",
                    "type": ""
                  }
                ],
                "src": "4316:120:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4615:180:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4632:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4643:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4625:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4625:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4625:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4666:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4677:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4662:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4662:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4682:2:80",
                            "type": "",
                            "value": "30"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4655:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4655:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4655:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4705:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4716:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4701:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4701:18:80"
                          },
                          {
                            "hexValue": "546f6b656e206973206e6f7420746865207772617070656420746f6b656e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4721:32:80",
                            "type": "",
                            "value": "Token is not the wrapped token"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4694:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4694:60:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4694:60:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4763:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4775:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4786:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4771:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4771:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4763:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_626258fc5d38fb1c6a72172ec9c61768c201646df0b287d4bc60b2f1e9cd1d4c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4592:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4606:4:80",
                    "type": ""
                  }
                ],
                "src": "4441:354:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4974:223:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4991:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5002:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4984:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4984:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4984:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5025:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5036:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5021:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5021:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5041:2:80",
                            "type": "",
                            "value": "33"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5014:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5014:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5014:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5064:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5075:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5060:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5060:18:80"
                          },
                          {
                            "hexValue": "4f6e6c79207772617070656420746f6b656e2063616c6c657220616c6c6f7765",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5080:34:80",
                            "type": "",
                            "value": "Only wrapped token caller allowe"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5053:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5053:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5053:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5135:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5146:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5131:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5131:18:80"
                          },
                          {
                            "hexValue": "64",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5151:3:80",
                            "type": "",
                            "value": "d"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5124:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5124:31:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5124:31:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5164:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5176:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5187:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5172:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5172:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5164:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_003b743907bf744938cf347613798250817435351adcaacbb79a7bf145cf4c27__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4951:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4965:4:80",
                    "type": ""
                  }
                ],
                "src": "4800:397:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5376:224:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5393:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5404:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5386:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5386:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5386:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5427:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5438:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5423:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5423:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5443:2:80",
                            "type": "",
                            "value": "34"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5416:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5416:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5416:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5466:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5477:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5462:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5462:18:80"
                          },
                          {
                            "hexValue": "446973616c6c6f7720636f6e76657273696f6e73206f66207a65726f2076616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5482:34:80",
                            "type": "",
                            "value": "Disallow conversions of zero val"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5455:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5455:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5455:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5537:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5548:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5533:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5533:18:80"
                          },
                          {
                            "hexValue": "7565",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5553:4:80",
                            "type": "",
                            "value": "ue"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5526:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5526:32:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5526:32:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5567:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5579:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5590:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5575:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5575:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5567:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_02917beb749fa588a43a386985ef91c5545d5d69ba9f02a1296de643d818e245__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5353:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5367:4:80",
                    "type": ""
                  }
                ],
                "src": "5202:398:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5653:80:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5680:22:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "5682:16:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5682:18:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5682:18:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "5669:1:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5676:1:80"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "5672:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5672:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5666:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5666:13:80"
                      },
                      "nodeType": "YulIf",
                      "src": "5663:39:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5711:16:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "5722:1:80"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "5725:1:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5718:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5718:9:80"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "5711:3:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "5636:1:80",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "5639:1:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "5645:3:80",
                    "type": ""
                  }
                ],
                "src": "5605:128:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5912:233:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5929:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5940:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5922:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5922:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5922:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5963:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5974:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5959:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5959:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5979:2:80",
                            "type": "",
                            "value": "43"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5952:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5952:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5952:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6002:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6013:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5998:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5998:18:80"
                          },
                          {
                            "hexValue": "43616e206e6f7420756e77726170206d6f7265207468616e2070726576696f75",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6018:34:80",
                            "type": "",
                            "value": "Can not unwrap more than previou"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5991:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5991:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5991:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6073:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6084:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6069:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6069:18:80"
                          },
                          {
                            "hexValue": "736c792077726170706564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6089:13:80",
                            "type": "",
                            "value": "sly wrapped"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6062:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6062:41:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6062:41:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6112:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6124:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6135:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6120:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6120:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6112:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1cb136618e570bf45abf1d809df2982abc55749c2bce3d64eed9f8a6868c5b59__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5889:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5903:4:80",
                    "type": ""
                  }
                ],
                "src": "5738:407:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6307:218:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6317:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6329:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6340:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6325:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6325:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6317:4:80"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6352:29:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6370:3:80",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6375:1:80",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "6366:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6366:11:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6379:1:80",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "6362:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6362:19:80"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "6356:2:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6397:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6412:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6420:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6408:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6408:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6390:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6390:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6390:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6444:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6455:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6440:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6440:18:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6464:6:80"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6472:2:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6460:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6460:15:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6433:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6433:43:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6433:43:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6496:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6507:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6492:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6492:18:80"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "6512:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6485:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6485:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6485:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6260:9:80",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "6271:6:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6279:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6287:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6298:4:80",
                    "type": ""
                  }
                ],
                "src": "6150:375:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6659:145:80",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6669:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6681:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6692:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6677:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6677:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6669:4:80"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6711:9:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6726:6:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6742:3:80",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6747:1:80",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6738:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6738:11:80"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6751:1:80",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6734:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6734:19:80"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6722:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6722:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6704:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6704:51:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6704:51:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6775:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6786:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6771:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6771:18:80"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "6791:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6764:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6764:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6764:34:80"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6620:9:80",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6631:6:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6639:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6650:4:80",
                    "type": ""
                  }
                ],
                "src": "6530:274:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6887:199:80",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6933:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6942:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6945:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6935:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6935:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6935:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6908:7:80"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6917:9:80"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6904:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6904:23:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6929:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6900:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6900:32:80"
                      },
                      "nodeType": "YulIf",
                      "src": "6897:52:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6958:29:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6977:9:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "6971:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6971:16:80"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "6962:5:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7040:16:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7049:1:80",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7052:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7042:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7042:12:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7042:12:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7009:5:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "7030:5:80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "7023:6:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7023:13:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "7016:6:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7016:21:80"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "7006:2:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7006:32:80"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6999:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6999:40:80"
                      },
                      "nodeType": "YulIf",
                      "src": "6996:60:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7065:15:80",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "7075:5:80"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7065:6:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6853:9:80",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6864:7:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6876:6:80",
                    "type": ""
                  }
                ],
                "src": "6809:277:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7265:232:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7282:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7293:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7275:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7275:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7275:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7316:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7327:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7312:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7312:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7332:2:80",
                            "type": "",
                            "value": "42"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7305:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7305:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7305:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7355:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7366:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7351:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7351:18:80"
                          },
                          {
                            "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7371:34:80",
                            "type": "",
                            "value": "SafeERC20: ERC20 operation did n"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7344:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7344:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7344:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7426:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7437:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7422:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7422:18:80"
                          },
                          {
                            "hexValue": "6f742073756363656564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7442:12:80",
                            "type": "",
                            "value": "ot succeed"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7415:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7415:40:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7415:40:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7464:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7476:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7487:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7472:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7472:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7464:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7242:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7256:4:80",
                    "type": ""
                  }
                ],
                "src": "7091:406:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7676:228:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7693:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7704:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7686:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7686:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7686:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7727:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7738:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7723:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7723:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7743:2:80",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7716:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7716:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7716:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7766:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7777:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7762:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7762:18:80"
                          },
                          {
                            "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7782:34:80",
                            "type": "",
                            "value": "Address: insufficient balance fo"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7755:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7755:62:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7755:62:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7837:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7848:2:80",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7833:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7833:18:80"
                          },
                          {
                            "hexValue": "722063616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7853:8:80",
                            "type": "",
                            "value": "r call"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7826:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7826:36:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7826:36:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7871:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7883:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7894:3:80",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7879:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7879:19:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7871:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7653:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7667:4:80",
                    "type": ""
                  }
                ],
                "src": "7502:402:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8083:179:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8100:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8111:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8093:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8093:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8093:21:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8134:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8145:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8130:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8130:18:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8150:2:80",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8123:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8123:30:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8123:30:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8173:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8184:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8169:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8169:18:80"
                          },
                          {
                            "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8189:31:80",
                            "type": "",
                            "value": "Address: call to non-contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8162:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8162:59:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8162:59:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8230:26:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8242:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8253:2:80",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8238:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8238:18:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8230:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8060:9:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8074:4:80",
                    "type": ""
                  }
                ],
                "src": "7909:353:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8320:205:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8330:10:80",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8339:1:80",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "8334:1:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8399:63:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "8424:3:80"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "8429:1:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8420:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8420:11:80"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "8443:3:80"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "8448:1:80"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8439:3:80"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8439:11:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "8433:5:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8433:18:80"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8413:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8413:39:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8413:39:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "8360:1:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8363:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "8357:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8357:13:80"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "8371:19:80",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "8373:15:80",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "8382:1:80"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8385:2:80",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "8378:3:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8378:10:80"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "8373:1:80"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "8353:3:80",
                        "statements": []
                      },
                      "src": "8349:113:80"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8488:31:80",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "8501:3:80"
                                    },
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "8506:6:80"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8497:3:80"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8497:16:80"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8515:1:80",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8490:6:80"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8490:27:80"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8490:27:80"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "8477:1:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8480:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "8474:2:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8474:13:80"
                      },
                      "nodeType": "YulIf",
                      "src": "8471:48:80"
                    }
                  ]
                },
                "name": "copy_memory_to_memory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "8298:3:80",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "8303:3:80",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "8308:6:80",
                    "type": ""
                  }
                ],
                "src": "8267:258:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8667:137:80",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8677:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "8697:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "8691:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8691:13:80"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "8681:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8739:6:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8747:4:80",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8735:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8735:17:80"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "8754:3:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8759:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "8713:21:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8713:53:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8713:53:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8775:23:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "8786:3:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8791:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8782:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8782:16:80"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "8775:3:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "8643:3:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8648:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "8659:3:80",
                    "type": ""
                  }
                ],
                "src": "8530:274:80"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8930:262:80",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8947:9:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8958:2:80",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8940:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8940:21:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8940:21:80"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8970:27:80",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "8990:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "8984:5:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8984:13:80"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "8974:6:80",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9017:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9028:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9013:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9013:18:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "9033:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9006:6:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9006:34:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9006:34:80"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9075:6:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9083:2:80",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9071:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9071:15:80"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9092:9:80"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9103:2:80",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9088:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9088:18:80"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "9108:6:80"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory",
                          "nodeType": "YulIdentifier",
                          "src": "9049:21:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9049:66:80"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9049:66:80"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9124:62:80",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9140:9:80"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "9159:6:80"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9167:2:80",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9155:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9155:15:80"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9176:2:80",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "9172:3:80"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9172:7:80"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9151:3:80"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9151:29:80"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9136:3:80"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9136:45:80"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9183:2:80",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9132:3:80"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9132:54:80"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9124:4:80"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8899:9:80",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8910:6:80",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8921:4:80",
                    "type": ""
                  }
                ],
                "src": "8809:383:80"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$5807__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_T_$18453__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_626258fc5d38fb1c6a72172ec9c61768c201646df0b287d4bc60b2f1e9cd1d4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Token is not the wrapped token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_003b743907bf744938cf347613798250817435351adcaacbb79a7bf145cf4c27__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Only wrapped token caller allowe\")\n        mstore(add(headStart, 96), \"d\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_02917beb749fa588a43a386985ef91c5545d5d69ba9f02a1296de643d818e245__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Disallow conversions of zero val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_1cb136618e570bf45abf1d809df2982abc55749c2bce3d64eed9f8a6868c5b59__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Can not unwrap more than previou\")\n        mstore(add(headStart, 96), \"sly wrapped\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
          "id": 80,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "18582": [
          {
            "length": 32,
            "start": 322
          },
          {
            "length": 32,
            "start": 647
          },
          {
            "length": 32,
            "start": 790
          },
          {
            "length": 32,
            "start": 1260
          },
          {
            "length": 32,
            "start": 1723
          }
        ],
        "18586": [
          {
            "length": 32,
            "start": 385
          },
          {
            "length": 32,
            "start": 1313
          },
          {
            "length": 32,
            "start": 1670
          }
        ],
        "18589": [
          {
            "length": 32,
            "start": 230
          },
          {
            "length": 32,
            "start": 564
          },
          {
            "length": 32,
            "start": 934
          },
          {
            "length": 32,
            "start": 989
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x99 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1C060CBE EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x51B83EBC EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x71CA337D EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x7A93F256 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x8F4FFCB1 EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x996C6CC3 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xC35D64EA EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xCFF0EAC5 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0xDE0E9A3E EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xEA598CB0 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0xF4FC2F47 EQ PUSH2 0x1DC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1 PUSH2 0xAC CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x1E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH2 0x26B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0xD3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0xA0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x13B PUSH2 0x136 CALLDATASIZE PUSH1 0x4 PUSH2 0xA27 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x164 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC2 JUMP JUMPDEST PUSH2 0x164 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xB1 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x39E JUMP JUMPDEST PUSH2 0x13B PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x41D JUMP JUMPDEST PUSH2 0x13B PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0x42A JUMP JUMPDEST PUSH2 0xD3 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F3 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x1FE SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x208 SWAP1 DUP5 PUSH2 0xBF6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x216 DUP3 DUP6 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP PUSH2 0x224 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x22F SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x259 PUSH32 0x0 DUP4 PUSH2 0xC0A JUMP JUMPDEST PUSH2 0x263 SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x277 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x282 SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x30B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E206973206E6F7420746865207772617070656420746F6B656E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x38D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79207772617070656420746F6B656E2063616C6C657220616C6C6F7765 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH2 0x397 DUP6 DUP6 PUSH2 0x430 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3CB PUSH32 0x0 DUP5 PUSH2 0xBF6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D9 DUP3 DUP6 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH2 0x408 PUSH1 0x3 PUSH1 0x12 PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x413 SWAP1 PUSH1 0xA PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x259 SWAP1 DUP4 PUSH2 0xC0A JUMP JUMPDEST PUSH2 0x427 CALLER DUP3 PUSH2 0x54E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x427 CALLER DUP3 JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x43C DUP4 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x44B DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 GT PUSH2 0x46D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x727200B48F3C812BFB404B578574E1C03694EDB122D80FA6DCB352A9E4F8A938 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x4D9 SWAP1 DUP5 SWAP1 PUSH2 0xC7F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x514 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 ADDRESS DUP7 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x548 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 DUP5 PUSH2 0x74D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x55A DUP4 PUSH2 0x39E JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x569 DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 DUP4 GT PUSH2 0x58B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302 SWAP1 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206E6F7420756E77726170206D6F7265207468616E2070726576696F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1CDB1E481DDC985C1C1959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0xF64AE1CC3E0E07DA9C895B3225439175CAB5838ACA24C4E74852704858C96A7B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x673 SWAP1 DUP5 SWAP1 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x6AE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 ADDRESS DUP7 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x548 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 DUP5 PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x548 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x77D SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x716 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D7 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x854 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x77D JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7F5 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x77D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x863 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x8CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x925 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x941 SWAP2 SWAP1 PUSH2 0xCE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x983 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x993 DUP3 DUP3 DUP7 PUSH2 0x99E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x9AD JUMPI POP DUP2 PUSH2 0x866 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x9BD JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x302 SWAP2 SWAP1 PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x866 DUP3 PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA48 DUP7 PUSH2 0x9F0 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0xA5D PUSH1 0x40 DUP8 ADD PUSH2 0x9F0 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xAAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xAE9 JUMPI PUSH2 0xAE9 PUSH2 0xAC1 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xB29 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xB0F JUMPI PUSH2 0xB0F PUSH2 0xAC1 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xB1C JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xAF3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB40 JUMPI POP PUSH1 0x1 PUSH2 0xBCE JUMP JUMPDEST DUP2 PUSH2 0xB4D JUMPI POP PUSH1 0x0 PUSH2 0xBCE JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xB63 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xB6D JUMPI PUSH2 0xB89 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xBCE JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xB7E JUMPI PUSH2 0xB7E PUSH2 0xAC1 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xBCE JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBAC JUMPI POP DUP2 DUP2 EXP PUSH2 0xBCE JUMP JUMPDEST PUSH2 0xBB6 DUP4 DUP4 PUSH2 0xAEE JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xBCA JUMPI PUSH2 0xBCA PUSH2 0xAC1 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 DUP4 DUP4 PUSH2 0xB31 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC05 JUMPI PUSH2 0xC05 PUSH2 0xBE0 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC24 JUMPI PUSH2 0xC24 PUSH2 0xAC1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC38 JUMPI PUSH2 0xC38 PUSH2 0xBE0 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x446973616C6C6F7720636F6E76657273696F6E73206F66207A65726F2076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xC92 JUMPI PUSH2 0xC92 PUSH2 0xAC1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCD4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCBC JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x548 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xCF7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xCB9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xD20 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xCB9 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB SWAP4 PUSH16 0xA870B05584F089C820F52C7F9FC6A018 CODESIZE 0x5C MOD DUP15 0x4F CODESIZE DUP14 STOP 0xBC DUP12 0xB6 PUSH29 0x2564736F6C634300080900330000000000000000000000000000000000 ",
      "sourceMap": "1941:7730:79:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7506:333;;;;;;:::i;:::-;;:::i;:::-;;;;373:25:80;;;429:2;414:18;;407:34;;;;346:18;7506:333:79;;;;;;;;2671:102;;;:::i;:::-;;;598:25:80;;;586:2;571:18;2671:102:79;452:177:80;3333:30:79;;;;;3588:49;;;;;;:::i;:::-;;;;;;;;;;;;;;;6212:420;;;;;;:::i;:::-;;:::i;:::-;;2836:36;;;;;;;;-1:-1:-1;;;;;1995:32:80;;;1977:51;;1965:2;1950:18;2836:36:79;1816:218:80;2913:25:79;;;;;8000:312;;;;;;:::i;:::-;;:::i;7258:85::-;;;;;;:::i;:::-;;:::i;5480:81::-;;;;;;:::i;:::-;;:::i;2525:62::-;;2586:1;2525:62;;7506:333;7590:15;;2733:39;2586:1;2733:2;:39;:::i;:::-;2728:45;;:2;:45;:::i;:::-;7666:31;;:6;:31;:::i;:::-;7647:50;-1:-1:-1;7707:25:79;7735;7647:50;7735:6;:25;:::i;:::-;7707:53;-1:-1:-1;2733:39:79;2586:1;2733:2;:39;:::i;:::-;2728:45;;:2;:45;:::i;:::-;7781:25;7801:5;7781:17;:25;:::i;:::-;7780:52;;;;:::i;:::-;7770:62;;7637:202;7506:333;;;:::o;2671:102::-;2733:39;2586:1;2733:2;:39;:::i;:::-;2728:45;;:2;:45;:::i;:::-;2671:102;:::o;6212:420::-;6402:12;-1:-1:-1;;;;;6385:30:79;:5;-1:-1:-1;;;;;6385:30:79;;6364:107;;;;-1:-1:-1;;;6364:107:79;;4643:2:80;6364:107:79;;;4625:21:80;4682:2;4662:18;;;4655:30;4721:32;4701:18;;;4694:60;4771:18;;6364:107:79;;;;;;;;;6502:10;-1:-1:-1;;;;;6524:12:79;6502:35;;6481:115;;;;-1:-1:-1;;;6481:115:79;;5002:2:80;6481:115:79;;;4984:21:80;5041:2;5021:18;;;5014:30;5080:34;5060:18;;;5053:62;-1:-1:-1;;;5131:18:80;;;5124:31;5172:19;;6481:115:79;4800:397:80;6481:115:79;6606:19;6612:4;6618:6;6606:5;:19::i;:::-;6212:420;;;;;:::o;8000:312::-;8086:21;;8156:14;8165:5;8156:6;:14;:::i;:::-;8143:27;-1:-1:-1;8180:25:79;8208:19;8143:27;8208:6;:19;:::i;:::-;8180:47;-1:-1:-1;8300:5:79;2733:39;2586:1;2733:2;:39;:::i;:::-;2728:45;;:2;:45;:::i;:::-;8254:42;;:17;:42;:::i;7258:85::-;7309:27;7317:10;7329:6;7309:7;:27::i;:::-;7258:85;:::o;5480:81::-;5529:25;5535:10;5547:6;8318:627;8402:20;8424:17;8445:55;8472:18;8445:13;:55::i;:::-;8401:99;;-1:-1:-1;8401:99:79;-1:-1:-1;8510:31:79;8401:99;8510:31;;:::i;:::-;;;8580:1;8559:18;:22;8551:69;;;;-1:-1:-1;;;8551:69:79;;;;;;;:::i;:::-;8635:54;;;373:25:80;;;429:2;414:18;;407:34;;;-1:-1:-1;;;;;8635:54:79;;;;;346:18:80;8635:54:79;;;;;;;-1:-1:-1;;;;;8700:27:79;;:14;:27;;;;;;;;;;:49;;8731:18;;8700:14;:49;;8731:18;;8700:49;:::i;:::-;;;;-1:-1:-1;8759:123:79;;-1:-1:-1;;;;;;8759:12:79;:29;8802:11;8835:4;8854:18;8759:29;:123::i;:::-;8892:46;-1:-1:-1;;;;;8892:6:79;:19;8912:11;8925:12;8892:19;:46::i;:::-;8391:554;;8318:627;;:::o;8951:718::-;9031:26;9059:17;9080:51;9109:12;9080:15;:51::i;:::-;9030:101;;-1:-1:-1;9030:101:79;-1:-1:-1;9141:25:79;9030:101;9141:25;;:::i;:::-;;;9199:1;9184:12;:16;9176:63;;;;-1:-1:-1;;;9176:63:79;;;;;;;:::i;:::-;-1:-1:-1;;;;;9270:27:79;;:14;:27;;;;;;;;;;;:49;-1:-1:-1;9270:49:79;9249:139;;;;-1:-1:-1;;;9249:139:79;;5940:2:80;9249:139:79;;;5922:21:80;5979:2;5959:18;;;5952:30;6018:34;5998:18;;;5991:62;-1:-1:-1;;;6069:18:80;;;6062:41;6120:19;;9249:139:79;5738:407:80;9249:139:79;9404:56;;;373:25:80;;;429:2;414:18;;407:34;;;-1:-1:-1;;;;;9404:56:79;;;;;346:18:80;9404:56:79;;;;;;;-1:-1:-1;;;;;9470:27:79;;:14;:27;;;;;;;;;;:49;;9501:18;;9470:14;:49;;9501:18;;9470:49;:::i;:::-;;;;-1:-1:-1;9529:65:79;;-1:-1:-1;;;;;;9529:6:79;:23;9553:11;9574:4;9581:12;9529:23;:65::i;:::-;9604:58;-1:-1:-1;;;;;9604:12:79;:25;9630:11;9643:18;9604:25;:58::i;912:241:31:-;1077:68;;-1:-1:-1;;;;;6408:15:80;;;1077:68:31;;;6390:34:80;6460:15;;6440:18;;;6433:43;6492:18;;;6485:34;;;1050:96:31;;1070:5;;-1:-1:-1;;;1100:27:31;6325:18:80;;1077:68:31;;;;-1:-1:-1;;1077:68:31;;;;;;;;;;;;;;-1:-1:-1;;;;;1077:68:31;-1:-1:-1;;;;;;1077:68:31;;;;;;;;;;1050:19;:96::i;701:205::-;840:58;;-1:-1:-1;;;;;6722:32:80;;840:58:31;;;6704:51:80;6771:18;;;6764:34;;;813:86:31;;833:5;;-1:-1:-1;;;863:23:31;6677:18:80;;840:58:31;6530:274:80;813:86:31;701:205;;;:::o;3207:706::-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:31;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:31;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:31;;7293:2:80;3811:85:31;;;7275:21:80;7332:2;7312:18;;;7305:30;7371:34;7351:18;;;7344:62;-1:-1:-1;;;7422:18:80;;;7415:40;7472:19;;3811:85:31;7091:406:80;3861:223:33;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:33;;7704:2:80;5137:81:33;;;7686:21:80;7743:2;7723:18;;;7716:30;7782:34;7762:18;;;7755:62;-1:-1:-1;;;7833:18:80;;;7826:36;7879:19;;5137:81:33;7502:402:80;5137:81:33;-1:-1:-1;;;;;1465:19:33;;;5228:60;;;;-1:-1:-1;;;5228:60:33;;8111:2:80;5228:60:33;;;8093:21:80;8150:2;8130:18;;;8123:30;8189:31;8169:18;;;8162:59;8238:18;;5228:60:33;7909:353:80;5228:60:33;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:33;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:33:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:33;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:33;;;;;;;;:::i;14:180:80:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:80;;14:180;-1:-1:-1;14:180:80:o;634:173::-;702:20;;-1:-1:-1;;;;;751:31:80;;741:42;;731:70;;797:1;794;787:12;731:70;634:173;;;:::o;812:186::-;871:6;924:2;912:9;903:7;899:23;895:32;892:52;;;940:1;937;930:12;892:52;963:29;982:9;963:29;:::i;1003:808::-;1100:6;1108;1116;1124;1132;1185:3;1173:9;1164:7;1160:23;1156:33;1153:53;;;1202:1;1199;1192:12;1153:53;1225:29;1244:9;1225:29;:::i;:::-;1215:39;;1301:2;1290:9;1286:18;1273:32;1263:42;;1324:38;1358:2;1347:9;1343:18;1324:38;:::i;:::-;1314:48;-1:-1:-1;1413:2:80;1398:18;;1385:32;-1:-1:-1;;;;;1466:14:80;;;1463:34;;;1493:1;1490;1483:12;1463:34;1531:6;1520:9;1516:22;1506:32;;1576:7;1569:4;1565:2;1561:13;1557:27;1547:55;;1598:1;1595;1588:12;1547:55;1638:2;1625:16;1664:2;1656:6;1653:14;1650:34;;;1680:1;1677;1670:12;1650:34;1725:7;1720:2;1711:6;1707:2;1703:15;1699:24;1696:37;1693:57;;;1746:1;1743;1736:12;1693:57;1003:808;;;;-1:-1:-1;1003:808:80;;-1:-1:-1;1777:2:80;1769:11;;1799:6;1003:808;-1:-1:-1;;;1003:808:80:o;2258:127::-;2319:10;2314:3;2310:20;2307:1;2300:31;2350:4;2347:1;2340:15;2374:4;2371:1;2364:15;2390:125;2430:4;2458:1;2455;2452:8;2449:34;;;2463:18;;:::i;:::-;-1:-1:-1;2500:9:80;;2390:125::o;2520:422::-;2609:1;2652:5;2609:1;2666:270;2687:7;2677:8;2674:21;2666:270;;;2746:4;2742:1;2738:6;2734:17;2728:4;2725:27;2722:53;;;2755:18;;:::i;:::-;2805:7;2795:8;2791:22;2788:55;;;2825:16;;;;2788:55;2904:22;;;;2864:15;;;;2666:270;;;2670:3;2520:422;;;;;:::o;2947:806::-;2996:5;3026:8;3016:80;;-1:-1:-1;3067:1:80;3081:5;;3016:80;3115:4;3105:76;;-1:-1:-1;3152:1:80;3166:5;;3105:76;3197:4;3215:1;3210:59;;;;3283:1;3278:130;;;;3190:218;;3210:59;3240:1;3231:10;;3254:5;;;3278:130;3315:3;3305:8;3302:17;3299:43;;;3322:18;;:::i;:::-;-1:-1:-1;;3378:1:80;3364:16;;3393:5;;3190:218;;3492:2;3482:8;3479:16;3473:3;3467:4;3464:13;3460:36;3454:2;3444:8;3441:16;3436:2;3430:4;3427:12;3423:35;3420:77;3417:159;;;-1:-1:-1;3529:19:80;;;3561:5;;3417:159;3608:34;3633:8;3627:4;3608:34;:::i;:::-;3678:6;3674:1;3670:6;3666:19;3657:7;3654:32;3651:58;;;3689:18;;:::i;:::-;3727:20;;-1:-1:-1;2947:806:80;;;;;:::o;3758:131::-;3818:5;3847:36;3874:8;3868:4;3847:36;:::i;3894:127::-;3955:10;3950:3;3946:20;3943:1;3936:31;3986:4;3983:1;3976:15;4010:4;4007:1;4000:15;4026:112;4058:1;4084;4074:35;;4089:18;;:::i;:::-;-1:-1:-1;4123:9:80;;4026:112::o;4143:168::-;4183:7;4249:1;4245;4241:6;4237:14;4234:1;4231:21;4226:1;4219:9;4212:17;4208:45;4205:71;;;4256:18;;:::i;:::-;-1:-1:-1;4296:9:80;;4143:168::o;4316:120::-;4356:1;4382;4372:35;;4387:18;;:::i;:::-;-1:-1:-1;4421:9:80;;4316:120::o;5202:398::-;5404:2;5386:21;;;5443:2;5423:18;;;5416:30;5482:34;5477:2;5462:18;;5455:62;-1:-1:-1;;;5548:2:80;5533:18;;5526:32;5590:3;5575:19;;5202:398::o;5605:128::-;5645:3;5676:1;5672:6;5669:1;5666:13;5663:39;;;5682:18;;:::i;:::-;-1:-1:-1;5718:9:80;;5605:128::o;6809:277::-;6876:6;6929:2;6917:9;6908:7;6904:23;6900:32;6897:52;;;6945:1;6942;6935:12;6897:52;6977:9;6971:16;7030:5;7023:13;7016:21;7009:5;7006:32;6996:60;;7052:1;7049;7042:12;8267:258;8339:1;8349:113;8363:6;8360:1;8357:13;8349:113;;;8439:11;;;8433:18;8420:11;;;8413:39;8385:2;8378:10;8349:113;;;8480:6;8477:1;8474:13;8471:48;;;-1:-1:-1;;8515:1:80;8497:16;;8490:27;8267:258::o;8530:274::-;8659:3;8697:6;8691:13;8713:53;8759:6;8754:3;8747:4;8739:6;8735:17;8713:53;:::i;:::-;8782:16;;;;;8530:274;-1:-1:-1;;8530:274:80:o;8809:383::-;8958:2;8947:9;8940:21;8921:4;8990:6;8984:13;9033:6;9028:2;9017:9;9013:18;9006:34;9049:66;9108:6;9103:2;9092:9;9088:18;9083:2;9075:6;9071:15;9049:66;:::i;:::-;9176:2;9155:15;-1:-1:-1;;9151:29:80;9136:45;;;;9183:2;9132:54;;8809:383;-1:-1:-1;;8809:383:80:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "686800",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "FLOATING_POINT_DIVISOR()": "595",
        "WRAPPED_TOKEN_CONVERSION_PRECISION()": "393",
        "conversionFromT(uint256)": "infinite",
        "conversionToT(uint256)": "infinite",
        "ratio()": "infinite",
        "receiveApproval(address,uint256,address,bytes)": "infinite",
        "tToken()": "infinite",
        "unwrap(uint256)": "infinite",
        "wrap(uint256)": "infinite",
        "wrappedBalance(address)": "2566",
        "wrappedToken()": "infinite"
      },
      "internal": {
        "_unwrap(address,uint256)": "infinite",
        "_wrap(address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "FLOATING_POINT_DIVISOR()": "51b83ebc",
      "WRAPPED_TOKEN_CONVERSION_PRECISION()": "f4fc2f47",
      "conversionFromT(uint256)": "cff0eac5",
      "conversionToT(uint256)": "1c060cbe",
      "ratio()": "71ca337d",
      "receiveApproval(address,uint256,address,bytes)": "8f4ffcb1",
      "tToken()": "c35d64ea",
      "unwrap(uint256)": "de0e9a3e",
      "wrap(uint256)": "ea598cb0",
      "wrappedBalance(address)": "7a93f256",
      "wrappedToken()": "996c6cc3"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"contract T\",\"name\":\"_tToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_wrappedTokenAllocation\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_tTokenAllocation\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Unwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Wrapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLOATING_POINT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_TOKEN_CONVERSION_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"conversionFromT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wrappedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tRemainder\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"conversionToT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedRemainder\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tToken\",\"outputs\":[{\"internalType\":\"contract T\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Multiplications in this contract can't overflow uint256 as we     restrict `_wrappedTokenAllocation` and `_tTokenAllocation` to     96 bits and FLOATING_POINT_DIVISOR fits in less than 60 bits.\",\"params\":{\"_tToken\":\"Address of T token\",\"_tTokenAllocation\":\"The allocation of T this instance of Vending        Machine will receive\",\"_wrappedToken\":\"Address to ERC20 token that will be wrapped to T\",\"_wrappedTokenAllocation\":\"The total supply of the token that will be       wrapped to T\"}},\"receiveApproval(address,uint256,address,bytes)\":{\"params\":{\"amount\":\"The amount of KEEP/NU to be wrapped\",\"from\":\"Caller's address, must be the same as `wrappedToken` field\",\"token\":\"Token's address, must be the same as `wrappedToken` field\"}},\"unwrap(uint256)\":{\"params\":{\"amount\":\"The amount of T to unwrap back to the collateral (KEEP/NU)\"}},\"wrap(uint256)\":{\"params\":{\"amount\":\"The amount of KEEP/NU to be wrapped\"}}},\"title\":\"T token vending machine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FLOATING_POINT_DIVISOR()\":{\"notice\":\"Divisor for precision purposes, used to represent fractions.\"},\"WRAPPED_TOKEN_CONVERSION_PRECISION()\":{\"notice\":\"Number of decimal places of precision in conversion to/from         wrapped tokens (assuming typical ERC20 token with 18 decimals).         This implies that amounts of wrapped tokens below this precision         won't take part in the conversion. E.g., for a value of 3, then         for a conversion of 1.123456789 wrapped tokens, only 1.123 is         convertible (i.e., 3 decimal places), and 0.000456789 is left.\"},\"constructor\":{\"notice\":\"Sets the reference to `wrappedToken` and `tToken`. Initializes         conversion `ratio` between wrapped token and T based on the         provided `_tTokenAllocation` and `_wrappedTokenAllocation`.\"},\"conversionFromT(uint256)\":{\"notice\":\"The amount of wrapped tokens (KEEP/NU) that's obtained from         `amount` T tokens, and the remainder that can't be downgraded.\"},\"conversionToT(uint256)\":{\"notice\":\"Returns the T token amount that's obtained from `amount` wrapped         tokens (KEEP/NU), and the remainder that can't be upgraded.\"},\"ratio()\":{\"notice\":\"The ratio with which T token is converted based on the provided         token being wrapped (KEEP/NU), expressed in 1e18 precision.         When wrapping:           x [T] = amount [KEEP/NU] * ratio / FLOATING_POINT_DIVISOR         When unwrapping:           x [KEEP/NU] = amount [T] * FLOATING_POINT_DIVISOR / ratio\"},\"receiveApproval(address,uint256,address,bytes)\":{\"notice\":\"Wraps up to the given amount of the token (KEEP/NU) and releases         T token proportionally to the amount being wrapped with respect         to the wrap ratio. This is a shortcut to `wrap` function that         avoids a separate approval transaction. Only KEEP/NU token         is allowed as a caller, so please call this function via         token's `approveAndCall`.\"},\"tToken()\":{\"notice\":\"T token contract.\"},\"unwrap(uint256)\":{\"notice\":\"Unwraps up to the given `amount` of T back to the legacy token         (KEEP/NU) according to the wrap ratio. It can only be called by         a token holder who previously wrapped their tokens in this         vending machine contract. The token holder can't unwrap more         tokens than they originally wrapped. The token holder needs to         have at least the given amount of T tokens approved to transfer         to the Vending Machine before calling this function.\"},\"wrap(uint256)\":{\"notice\":\"Wraps up to the the given `amount` of the token (KEEP/NU) and         releases T token proportionally to the amount being wrapped with         respect to the wrap ratio. The token holder needs to have at         least the given amount of the wrapped token (KEEP/NU) approved         to transfer to the Vending Machine before calling this function.\"},\"wrappedBalance(address)\":{\"notice\":\"The total balance of wrapped tokens for the given holder         account. Only holders that have previously wrapped KEEP/NU to T         can unwrap, up to the amount previously wrapped.\"},\"wrappedToken()\":{\"notice\":\"The token being wrapped to T (KEEP/NU).\"}},\"notice\":\"Contract implements a special update protocol to enable KEEP/NU         token holders to wrap their tokens and obtain T tokens according         to a fixed ratio. This will go on indefinitely and enable NU and         KEEP token holders to join T network without needing to buy or         sell any assets. Logistically, anyone holding NU or KEEP can wrap         those assets in order to upgrade to T. They can also unwrap T in         order to downgrade back to the underlying asset. There is a separate         instance of this contract deployed for KEEP holders and a separate         instance of this contract deployed for NU holders.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vending/VendingMachine.sol\":\"VendingMachine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcec885ecdf113b4265ed0856972d7ff167bfeb3802604b18cbb782bf47ecc4ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IERC20WithPermit.sol\\\";\\nimport \\\"./IReceiveApproval.sol\\\";\\n\\n/// @title  ERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ncontract ERC20WithPermit is IERC20WithPermit, Ownable {\\n    /// @notice The amount of tokens owned by the given account.\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /// @notice The remaining number of tokens that spender will be\\n    ///         allowed to spend on behalf of owner through `transferFrom` and\\n    ///         `burnFrom`. This is zero by default.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    mapping(address => uint256) public override nonce;\\n\\n    uint256 public immutable cachedChainId;\\n    bytes32 public immutable cachedDomainSeparator;\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /// @notice The amount of tokens in existence.\\n    uint256 public override totalSupply;\\n\\n    /// @notice The name of the token.\\n    string public override name;\\n\\n    /// @notice The symbol of the token.\\n    string public override symbol;\\n\\n    /// @notice The decimals places of the token.\\n    uint8 public constant override decimals = 18;\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n\\n        cachedChainId = block.chainid;\\n        cachedDomainSeparator = buildDomainSeparator();\\n    }\\n\\n    /// @notice Moves `amount` tokens from the caller's account to `recipient`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///       - `recipient` cannot be the zero address,\\n    ///       - the caller must have a balance of at least `amount`.\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Moves `amount` tokens from `spender` to `recipient` using the\\n    ///         allowance mechanism. `amount` is then deducted from the caller's\\n    ///         allowance unless the allowance was made for `type(uint256).max`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///      - `spender` and `recipient` cannot be the zero address,\\n    ///      - `spender` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `spender`'s tokens of at least\\n    ///        `amount`.\\n    function transferFrom(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = allowance[spender][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            );\\n            _approve(spender, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(spender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.  If the `amount` is set\\n    ///         to `type(uint256).max` then `transferFrom` and `burnFrom` will\\n    ///         not reduce an allowance.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Permission expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        amount,\\n                        nonce[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Invalid signature\\\"\\n        );\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /// @notice Creates `amount` tokens and assigns them to `account`,\\n    ///         increasing the total supply.\\n    /// @dev Requirements:\\n    ///      - `recipient` cannot be the zero address.\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(recipient != address(0), \\\"Mint to the zero address\\\");\\n\\n        beforeTokenTransfer(address(0), recipient, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    /// @dev Requirements:\\n    ///       - the caller must have a balance of at least `amount`.\\n    function burn(uint256 amount) external override {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of tokens from `account` using the allowance\\n    ///         mechanism. `amount` is then deducted from the caller's allowance\\n    ///         unless the allowance was made for `type(uint256).max`.\\n    /// @dev Requirements:\\n    ///      - `account` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `account`'s tokens of at least\\n    ///        `amount`.\\n    function burnFrom(address account, uint256 amount) external override {\\n        uint256 currentAllowance = allowance[account][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Burn amount exceeds allowance\\\"\\n            );\\n            _approve(account, msg.sender, currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n\\n    /// @notice Calls `receiveApproval` function on spender previously approving\\n    ///         the spender to withdraw from the caller multiple times, up to\\n    ///         the `amount` amount. If this function is called again, it\\n    ///         overwrites the current allowance with `amount`. Reverts if the\\n    ///         approval reverted or if `receiveApproval` call on the spender\\n    ///         reverted.\\n    /// @return True if both approval and `receiveApproval` calls succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external override returns (bool) {\\n        if (approve(spender, amount)) {\\n            IReceiveApproval(spender).receiveApproval(\\n                msg.sender,\\n                amount,\\n                address(this),\\n                extraData\\n            );\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's\\n    ///         tokens.\\n    /// @return True if the operation succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    ///      Beware that changing an allowance with this method brings the risk\\n    ///      that someone may use both the old and the new allowance by\\n    ///      unfortunate transaction ordering. One possible solution to mitigate\\n    ///      this race condition is to first reduce the spender's allowance to 0\\n    ///      and set the desired value afterwards:\\n    ///      https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        // As explained in EIP-2612, if the DOMAIN_SEPARATOR contains the\\n        // chainId and is defined at contract deployment instead of\\n        // reconstructed for every signature, there is a risk of possible replay\\n        // attacks between chains in the event of a future chain split.\\n        // To address this issue, we check the cached chain ID against the\\n        // current one and in case they are different, we build domain separator\\n        // from scratch.\\n        if (block.chainid == cachedChainId) {\\n            return cachedDomainSeparator;\\n        } else {\\n            return buildDomainSeparator();\\n        }\\n    }\\n\\n    /// @dev Hook that is called before any transfer of tokens. This includes\\n    ///      minting and burning.\\n    ///\\n    /// Calling conditions:\\n    /// - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n    ///   will be to transferred to `to`.\\n    /// - when `from` is zero, `amount` tokens will be minted for `to`.\\n    /// - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n    /// - `from` and `to` are never both zero.\\n    // slither-disable-next-line dead-code\\n    function beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _burn(address account, uint256 amount) internal {\\n        uint256 currentBalance = balanceOf[account];\\n        require(currentBalance >= amount, \\\"Burn amount exceeds balance\\\");\\n\\n        beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] = currentBalance - amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _transfer(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(spender != address(0), \\\"Transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"Transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"Transfer to the token address\\\");\\n\\n        beforeTokenTransfer(spender, recipient, amount);\\n\\n        uint256 spenderBalance = balanceOf[spender];\\n        require(spenderBalance >= amount, \\\"Transfer amount exceeds balance\\\");\\n        balanceOf[spender] = spenderBalance - amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(spender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"Approve from the zero address\\\");\\n        require(spender != address(0), \\\"Approve to the zero address\\\");\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function buildDomainSeparator() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1e1bf4ec5c9d6fe70f6f834316482aeff3f122ff4ffaa7178099e7ae71a0b16d\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by tokens supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IApproveAndCall {\\n    /// @notice Executes `receiveApproval` function on spender as specified in\\n    ///         `IReceiveApproval` interface. Approves spender to withdraw from\\n    ///         the caller multiple times, up to the `amount`. If this\\n    ///         function is called again, it overwrites the current allowance\\n    ///         with `amount`. Reverts if the approval reverted or if\\n    ///         `receiveApproval` call on the spender reverted.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x393d18ef81a57dcc96fff4c340cc2945deaebb37b9796c322cf2bc96872c3df8\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IApproveAndCall.sol\\\";\\n\\n/// @title  IERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ninterface IERC20WithPermit is IERC20, IERC20Metadata, IApproveAndCall {\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    function burn(uint256 amount) external;\\n\\n    /// @notice Destroys `amount` of tokens from `account`, deducting the amount\\n    ///         from caller's allowance.\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    function nonce(address owner) external view returns (uint256);\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdac9a5086c19a7128b505a7be1ab0ac1aa314f6989cb88d2417e9d7383f89fa9\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by contracts supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IReceiveApproval {\\n    /// @notice Receives approval to spend tokens. Called as a result of\\n    ///         `approveAndCall` call on the token.\\n    function receiveApproval(\\n        address from,\\n        uint256 amount,\\n        address token,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6a30d83ad230548b1e7839737affc8489a035314209de14b89dbef7fb0f66395\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title  MisfundRecovery\\n/// @notice Allows the owner of the token contract extending MisfundRecovery\\n///         to recover any ERC20 and ERC721 sent mistakenly to the token\\n///         contract address.\\ncontract MisfundRecovery is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    function recoverERC20(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    function recoverERC721(\\n        IERC721 token,\\n        address recipient,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        token.safeTransferFrom(address(this), recipient, tokenId, data);\\n    }\\n}\\n\",\"keccak256\":\"0xbbfea02bf20e2a6df5a497bbc05c7540a3b7c7dfb8b1feeaffef7f6b8ba65d65\",\"license\":\"MIT\"},\"contracts/governance/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IVotesHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\n/// @title Checkpoints\\n/// @dev Abstract contract to support checkpoints for Compound-like voting and\\n///      delegation. This implementation supports token supply up to 2^96 - 1.\\n///      This contract keeps a history (checkpoints) of each account's vote\\n///      power. Vote power can be delegated either by calling the {delegate}\\n///      function directly, or by providing a signature to be used with\\n///      {delegateBySig}. Voting power can be publicly queried through\\n///      {getVotes} and {getPastVotes}.\\n///      NOTE: Extracted from OpenZeppelin ERCVotes.sol.\\n/// @dev This contract is upgrade-safe.\\nabstract contract Checkpoints is IVotesHistory {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) internal _delegates;\\n    mapping(address => uint128[]) internal _checkpoints;\\n    uint128[] internal _totalSupplyCheckpoints;\\n\\n    // Reserved storage space in case we need to add more variables,\\n    // since there are upgradeable contracts that inherit from this one.\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    // slither-disable-next-line unused-state\\n    uint256[47] private __gap;\\n\\n    /// @notice Emitted when an account changes their delegate.\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice Emitted when a balance or delegate change results in changes\\n    ///         to an account's voting power.\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    function checkpoints(address account, uint32 pos)\\n        public\\n        view\\n        virtual\\n        returns (Checkpoint memory checkpoint)\\n    {\\n        (uint32 fromBlock, uint96 votes) = decodeCheckpoint(\\n            _checkpoints[account][pos]\\n        );\\n        checkpoint = Checkpoint(fromBlock, votes);\\n    }\\n\\n    /// @notice Get number of checkpoints for `account`.\\n    function numCheckpoints(address account)\\n        public\\n        view\\n        virtual\\n        returns (uint32)\\n    {\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /// @notice Get the address `account` is currently delegating to.\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /// @notice Gets the current votes balance for `account`.\\n    /// @param account The address to get votes balance\\n    /// @return The number of current votes for `account`\\n    function getVotes(address account) public view returns (uint96) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : decodeValue(_checkpoints[account][pos - 1]);\\n    }\\n\\n    /// @notice Determine the prior number of votes for an account as of\\n    ///         a block number.\\n    /// @dev Block number must be a finalized block or else this function will\\n    ///      revert to prevent misinformation.\\n    /// @param account The address of the account to check\\n    /// @param blockNumber The block number to get the vote balance at\\n    /// @return The number of votes the account had as of the given block\\n    function getPastVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        return lookupCheckpoint(_checkpoints[account], blockNumber);\\n    }\\n\\n    /// @notice Retrieve the `totalSupply` at the end of `blockNumber`.\\n    ///         Note, this value is the sum of all balances, but it is NOT the\\n    ///         sum of all the delegated votes!\\n    /// @param blockNumber The block number to get the total supply at\\n    /// @dev `blockNumber` must have been already mined\\n    function getPastTotalSupply(uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        return lookupCheckpoint(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /// @notice Change delegation for `delegator` to `delegatee`.\\n    // slither-disable-next-line dead-code\\n    function delegate(address delegator, address delegatee) internal virtual;\\n\\n    /// @notice Moves voting power from one delegate to another\\n    /// @param src Address of old delegate\\n    /// @param dst Address of new delegate\\n    /// @param amount Voting power amount to transfer between delegates\\n    function moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) internal {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                // https://github.com/crytic/slither/issues/960\\n                // slither-disable-next-line variable-scope\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                    _checkpoints[src],\\n                    subtract,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                // https://github.com/crytic/slither/issues/959\\n                // slither-disable-next-line uninitialized-local\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                    _checkpoints[dst],\\n                    add,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    /// @notice Writes a new checkpoint based on operating last stored value\\n    ///         with a `delta`. Usually, said operation is the `add` or\\n    ///         `subtract` functions from this contract, but more complex\\n    ///         functions can be passed as parameters.\\n    /// @param ckpts The checkpoints array to use\\n    /// @param op The function to apply over the last value and the `delta`\\n    /// @param delta Variation with respect to last stored value to be used\\n    ///              for new checkpoint\\n    function writeCheckpoint(\\n        uint128[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : decodeValue(ckpts[pos - 1]);\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0) {\\n            uint32 fromBlock = decodeBlockNumber(ckpts[pos - 1]);\\n            // slither-disable-next-line incorrect-equality\\n            if (fromBlock == block.number) {\\n                ckpts[pos - 1] = encodeCheckpoint(\\n                    fromBlock,\\n                    SafeCastUpgradeable.toUint96(newWeight)\\n                );\\n                return (oldWeight, newWeight);\\n            }\\n        }\\n\\n        ckpts.push(\\n            encodeCheckpoint(\\n                SafeCastUpgradeable.toUint32(block.number),\\n                SafeCastUpgradeable.toUint96(newWeight)\\n            )\\n        );\\n    }\\n\\n    /// @notice Lookup a value in a list of (sorted) checkpoints.\\n    /// @param ckpts The checkpoints array to use\\n    /// @param blockNumber Block number when we want to get the checkpoint at\\n    function lookupCheckpoint(uint128[] storage ckpts, uint256 blockNumber)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        // We run a binary search to look for the earliest checkpoint taken\\n        // after `blockNumber`. During the loop, the index of the wanted\\n        // checkpoint remains in the range [low-1, high). With each iteration,\\n        // either `low` or `high` is moved towards the middle of the range to\\n        // maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`,\\n        //   we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`,\\n        //   we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the\\n        // right checkpoint at the index high-1, if not out of bounds (in that\\n        // case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for\\n        // `blockNumber`, we end up with an index that is past the end of the\\n        // array, so we technically don't find a checkpoint after\\n        // `blockNumber`, but it works out the same.\\n        require(blockNumber < block.number, \\\"Block not yet determined\\\");\\n\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            uint32 midBlock = decodeBlockNumber(ckpts[mid]);\\n            if (midBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : decodeValue(ckpts[high - 1]);\\n    }\\n\\n    /// @notice Maximum token supply. Defaults to `type(uint96).max` (2^96 - 1)\\n    // slither-disable-next-line dead-code\\n    function maxSupply() internal view virtual returns (uint96) {\\n        return type(uint96).max;\\n    }\\n\\n    /// @notice Encodes a `blockNumber` and `value` into a single `uint128`\\n    ///         checkpoint.\\n    /// @dev `blockNumber` is stored in the first 32 bits, while `value` in the\\n    ///      remaining 96 bits.\\n    function encodeCheckpoint(uint32 blockNumber, uint96 value)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return (uint128(blockNumber) << 96) | uint128(value);\\n    }\\n\\n    /// @notice Decodes a block number from a `uint128` `checkpoint`.\\n    function decodeBlockNumber(uint128 checkpoint)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return uint32(bytes4(bytes16(checkpoint)));\\n    }\\n\\n    /// @notice Decodes a voting value from a `uint128` `checkpoint`.\\n    function decodeValue(uint128 checkpoint) internal pure returns (uint96) {\\n        return uint96(checkpoint);\\n    }\\n\\n    /// @notice Decodes a block number and voting value from a `uint128`\\n    ///         `checkpoint`.\\n    function decodeCheckpoint(uint128 checkpoint)\\n        internal\\n        pure\\n        returns (uint32 blockNumber, uint96 value)\\n    {\\n        blockNumber = decodeBlockNumber(checkpoint);\\n        value = decodeValue(checkpoint);\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x67b28349e88afe7440c43df93ba5de56873d850a25147161e4469731750efb16\",\"license\":\"GPL-3.0-or-later\"},\"contracts/governance/IVotesHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\ninterface IVotesHistory {\\n    function getPastVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    function getPastTotalSupply(uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n}\\n\",\"keccak256\":\"0x535e87cf4c2e9a9439d99cf0918f013965fa6c4ddfbab07ff6ca4b195c8edc9f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/T.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../governance/Checkpoints.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\\\";\\nimport \\\"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\\\";\\n\\n/// @title T token\\n/// @notice Threshold Network T token\\n/// @dev By default, token balance does not account for voting power.\\n///      This makes transfers cheaper. The downside is that it requires users\\n///      to delegate to themselves to activate checkpoints and have their\\n///      voting power tracked.\\ncontract T is ERC20WithPermit, MisfundRecovery, Checkpoints {\\n    /// @notice The EIP-712 typehash for the delegation struct used by\\n    ///         `delegateBySig`.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\n            \\\"Delegation(address delegatee,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    constructor() ERC20WithPermit(\\\"Threshold Network Token\\\", \\\"T\\\") {}\\n\\n    /// @notice Delegates votes from signatory to `delegatee`\\n    /// @param delegatee The address to delegate votes to\\n    /// @param deadline The time at which to expire the signature\\n    /// @param v The recovery byte of the signature\\n    /// @param r Half of the ECDSA signature pair\\n    /// @param s Half of the ECDSA signature pair\\n    function delegateBySig(\\n        address signatory,\\n        address delegatee,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Delegation expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        DELEGATION_TYPEHASH,\\n                        delegatee,\\n                        nonce[signatory]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == signatory,\\n            \\\"Invalid signature\\\"\\n        );\\n\\n        return delegate(signatory, delegatee);\\n    }\\n\\n    /// @notice Delegate votes from `msg.sender` to `delegatee`.\\n    /// @param delegatee The address to delegate votes to\\n    function delegate(address delegatee) public virtual {\\n        return delegate(msg.sender, delegatee);\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        uint96 safeAmount = SafeCast.toUint96(amount);\\n\\n        // When minting:\\n        if (from == address(0)) {\\n            // Does not allow to mint more than uint96 can fit. Otherwise, the\\n            // Checkpoint might not fit the balance.\\n            require(\\n                totalSupply + amount <= maxSupply(),\\n                \\\"Maximum total supply exceeded\\\"\\n            );\\n            writeCheckpoint(_totalSupplyCheckpoints, add, safeAmount);\\n        }\\n\\n        // When burning:\\n        if (to == address(0)) {\\n            writeCheckpoint(_totalSupplyCheckpoints, subtract, safeAmount);\\n        }\\n\\n        moveVotingPower(delegates(from), delegates(to), safeAmount);\\n    }\\n\\n    function delegate(address delegator, address delegatee)\\n        internal\\n        virtual\\n        override\\n    {\\n        address currentDelegate = delegates(delegator);\\n        uint96 delegatorBalance = SafeCast.toUint96(balanceOf[delegator]);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x6265416225fd15b1108fce13d570b53a862a5d256ba2e6329bccf658eccac430\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vending/VendingMachine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\\\";\\nimport \\\"../token/T.sol\\\";\\n\\n/// @title T token vending machine\\n/// @notice Contract implements a special update protocol to enable KEEP/NU\\n///         token holders to wrap their tokens and obtain T tokens according\\n///         to a fixed ratio. This will go on indefinitely and enable NU and\\n///         KEEP token holders to join T network without needing to buy or\\n///         sell any assets. Logistically, anyone holding NU or KEEP can wrap\\n///         those assets in order to upgrade to T. They can also unwrap T in\\n///         order to downgrade back to the underlying asset. There is a separate\\n///         instance of this contract deployed for KEEP holders and a separate\\n///         instance of this contract deployed for NU holders.\\ncontract VendingMachine is IReceiveApproval {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for T;\\n\\n    /// @notice Number of decimal places of precision in conversion to/from\\n    ///         wrapped tokens (assuming typical ERC20 token with 18 decimals).\\n    ///         This implies that amounts of wrapped tokens below this precision\\n    ///         won't take part in the conversion. E.g., for a value of 3, then\\n    ///         for a conversion of 1.123456789 wrapped tokens, only 1.123 is\\n    ///         convertible (i.e., 3 decimal places), and 0.000456789 is left.\\n    uint256 public constant WRAPPED_TOKEN_CONVERSION_PRECISION = 3;\\n\\n    /// @notice Divisor for precision purposes, used to represent fractions.\\n    uint256 public constant FLOATING_POINT_DIVISOR =\\n        10**(18 - WRAPPED_TOKEN_CONVERSION_PRECISION);\\n\\n    /// @notice The token being wrapped to T (KEEP/NU).\\n    IERC20 public immutable wrappedToken;\\n\\n    /// @notice T token contract.\\n    T public immutable tToken;\\n\\n    /// @notice The ratio with which T token is converted based on the provided\\n    ///         token being wrapped (KEEP/NU), expressed in 1e18 precision.\\n    ///\\n    ///         When wrapping:\\n    ///           x [T] = amount [KEEP/NU] * ratio / FLOATING_POINT_DIVISOR\\n    ///\\n    ///         When unwrapping:\\n    ///           x [KEEP/NU] = amount [T] * FLOATING_POINT_DIVISOR / ratio\\n    uint256 public immutable ratio;\\n\\n    /// @notice The total balance of wrapped tokens for the given holder\\n    ///         account. Only holders that have previously wrapped KEEP/NU to T\\n    ///         can unwrap, up to the amount previously wrapped.\\n    mapping(address => uint256) public wrappedBalance;\\n\\n    event Wrapped(\\n        address indexed recipient,\\n        uint256 wrappedTokenAmount,\\n        uint256 tTokenAmount\\n    );\\n    event Unwrapped(\\n        address indexed recipient,\\n        uint256 tTokenAmount,\\n        uint256 wrappedTokenAmount\\n    );\\n\\n    /// @notice Sets the reference to `wrappedToken` and `tToken`. Initializes\\n    ///         conversion `ratio` between wrapped token and T based on the\\n    ///         provided `_tTokenAllocation` and `_wrappedTokenAllocation`.\\n    /// @param _wrappedToken Address to ERC20 token that will be wrapped to T\\n    /// @param _tToken Address of T token\\n    /// @param _wrappedTokenAllocation The total supply of the token that will be\\n    ///       wrapped to T\\n    /// @param _tTokenAllocation The allocation of T this instance of Vending\\n    ///        Machine will receive\\n    /// @dev Multiplications in this contract can't overflow uint256 as we\\n    ///     restrict `_wrappedTokenAllocation` and `_tTokenAllocation` to\\n    ///     96 bits and FLOATING_POINT_DIVISOR fits in less than 60 bits.\\n    constructor(\\n        IERC20 _wrappedToken,\\n        T _tToken,\\n        uint96 _wrappedTokenAllocation,\\n        uint96 _tTokenAllocation\\n    ) {\\n        wrappedToken = _wrappedToken;\\n        tToken = _tToken;\\n        ratio =\\n            (FLOATING_POINT_DIVISOR * _tTokenAllocation) /\\n            _wrappedTokenAllocation;\\n    }\\n\\n    /// @notice Wraps up to the the given `amount` of the token (KEEP/NU) and\\n    ///         releases T token proportionally to the amount being wrapped with\\n    ///         respect to the wrap ratio. The token holder needs to have at\\n    ///         least the given amount of the wrapped token (KEEP/NU) approved\\n    ///         to transfer to the Vending Machine before calling this function.\\n    /// @param amount The amount of KEEP/NU to be wrapped\\n    function wrap(uint256 amount) external {\\n        _wrap(msg.sender, amount);\\n    }\\n\\n    /// @notice Wraps up to the given amount of the token (KEEP/NU) and releases\\n    ///         T token proportionally to the amount being wrapped with respect\\n    ///         to the wrap ratio. This is a shortcut to `wrap` function that\\n    ///         avoids a separate approval transaction. Only KEEP/NU token\\n    ///         is allowed as a caller, so please call this function via\\n    ///         token's `approveAndCall`.\\n    /// @param from Caller's address, must be the same as `wrappedToken` field\\n    /// @param amount The amount of KEEP/NU to be wrapped\\n    /// @param token Token's address, must be the same as `wrappedToken` field\\n    function receiveApproval(\\n        address from,\\n        uint256 amount,\\n        address token,\\n        bytes calldata\\n    ) external override {\\n        require(\\n            token == address(wrappedToken),\\n            \\\"Token is not the wrapped token\\\"\\n        );\\n        require(\\n            msg.sender == address(wrappedToken),\\n            \\\"Only wrapped token caller allowed\\\"\\n        );\\n        _wrap(from, amount);\\n    }\\n\\n    /// @notice Unwraps up to the given `amount` of T back to the legacy token\\n    ///         (KEEP/NU) according to the wrap ratio. It can only be called by\\n    ///         a token holder who previously wrapped their tokens in this\\n    ///         vending machine contract. The token holder can't unwrap more\\n    ///         tokens than they originally wrapped. The token holder needs to\\n    ///         have at least the given amount of T tokens approved to transfer\\n    ///         to the Vending Machine before calling this function.\\n    /// @param amount The amount of T to unwrap back to the collateral (KEEP/NU)\\n    function unwrap(uint256 amount) external {\\n        _unwrap(msg.sender, amount);\\n    }\\n\\n    /// @notice Returns the T token amount that's obtained from `amount` wrapped\\n    ///         tokens (KEEP/NU), and the remainder that can't be upgraded.\\n    function conversionToT(uint256 amount)\\n        public\\n        view\\n        returns (uint256 tAmount, uint256 wrappedRemainder)\\n    {\\n        wrappedRemainder = amount % FLOATING_POINT_DIVISOR;\\n        uint256 convertibleAmount = amount - wrappedRemainder;\\n        tAmount = (convertibleAmount * ratio) / FLOATING_POINT_DIVISOR;\\n    }\\n\\n    /// @notice The amount of wrapped tokens (KEEP/NU) that's obtained from\\n    ///         `amount` T tokens, and the remainder that can't be downgraded.\\n    function conversionFromT(uint256 amount)\\n        public\\n        view\\n        returns (uint256 wrappedAmount, uint256 tRemainder)\\n    {\\n        tRemainder = amount % ratio;\\n        uint256 convertibleAmount = amount - tRemainder;\\n        wrappedAmount = (convertibleAmount * FLOATING_POINT_DIVISOR) / ratio;\\n    }\\n\\n    function _wrap(address tokenHolder, uint256 wrappedTokenAmount) internal {\\n        (uint256 tTokenAmount, uint256 remainder) = conversionToT(\\n            wrappedTokenAmount\\n        );\\n        wrappedTokenAmount -= remainder;\\n        require(wrappedTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\n        emit Wrapped(tokenHolder, wrappedTokenAmount, tTokenAmount);\\n\\n        wrappedBalance[tokenHolder] += wrappedTokenAmount;\\n        wrappedToken.safeTransferFrom(\\n            tokenHolder,\\n            address(this),\\n            wrappedTokenAmount\\n        );\\n        tToken.safeTransfer(tokenHolder, tTokenAmount);\\n    }\\n\\n    function _unwrap(address tokenHolder, uint256 tTokenAmount) internal {\\n        (uint256 wrappedTokenAmount, uint256 remainder) = conversionFromT(\\n            tTokenAmount\\n        );\\n        tTokenAmount -= remainder;\\n        require(tTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\n        require(\\n            wrappedBalance[tokenHolder] >= wrappedTokenAmount,\\n            \\\"Can not unwrap more than previously wrapped\\\"\\n        );\\n\\n        emit Unwrapped(tokenHolder, tTokenAmount, wrappedTokenAmount);\\n        wrappedBalance[tokenHolder] -= wrappedTokenAmount;\\n        tToken.safeTransferFrom(tokenHolder, address(this), tTokenAmount);\\n        wrappedToken.safeTransfer(tokenHolder, wrappedTokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa4e7de5a9063db09b32ca97fa0fb5d8d1cc7b539387d1b44d74d15d3c2ed4134\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 18594,
        "contract": "contracts/vending/VendingMachine.sol:VendingMachine",
        "label": "wrappedBalance",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FLOATING_POINT_DIVISOR()": {
        "notice": "Divisor for precision purposes, used to represent fractions."
      },
      "WRAPPED_TOKEN_CONVERSION_PRECISION()": {
        "notice": "Number of decimal places of precision in conversion to/from         wrapped tokens (assuming typical ERC20 token with 18 decimals).         This implies that amounts of wrapped tokens below this precision         won't take part in the conversion. E.g., for a value of 3, then         for a conversion of 1.123456789 wrapped tokens, only 1.123 is         convertible (i.e., 3 decimal places), and 0.000456789 is left."
      },
      "constructor": {
        "notice": "Sets the reference to `wrappedToken` and `tToken`. Initializes         conversion `ratio` between wrapped token and T based on the         provided `_tTokenAllocation` and `_wrappedTokenAllocation`."
      },
      "conversionFromT(uint256)": {
        "notice": "The amount of wrapped tokens (KEEP/NU) that's obtained from         `amount` T tokens, and the remainder that can't be downgraded."
      },
      "conversionToT(uint256)": {
        "notice": "Returns the T token amount that's obtained from `amount` wrapped         tokens (KEEP/NU), and the remainder that can't be upgraded."
      },
      "ratio()": {
        "notice": "The ratio with which T token is converted based on the provided         token being wrapped (KEEP/NU), expressed in 1e18 precision.         When wrapping:           x [T] = amount [KEEP/NU] * ratio / FLOATING_POINT_DIVISOR         When unwrapping:           x [KEEP/NU] = amount [T] * FLOATING_POINT_DIVISOR / ratio"
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "notice": "Wraps up to the given amount of the token (KEEP/NU) and releases         T token proportionally to the amount being wrapped with respect         to the wrap ratio. This is a shortcut to `wrap` function that         avoids a separate approval transaction. Only KEEP/NU token         is allowed as a caller, so please call this function via         token's `approveAndCall`."
      },
      "tToken()": {
        "notice": "T token contract."
      },
      "unwrap(uint256)": {
        "notice": "Unwraps up to the given `amount` of T back to the legacy token         (KEEP/NU) according to the wrap ratio. It can only be called by         a token holder who previously wrapped their tokens in this         vending machine contract. The token holder can't unwrap more         tokens than they originally wrapped. The token holder needs to         have at least the given amount of T tokens approved to transfer         to the Vending Machine before calling this function."
      },
      "wrap(uint256)": {
        "notice": "Wraps up to the the given `amount` of the token (KEEP/NU) and         releases T token proportionally to the amount being wrapped with         respect to the wrap ratio. The token holder needs to have at         least the given amount of the wrapped token (KEEP/NU) approved         to transfer to the Vending Machine before calling this function."
      },
      "wrappedBalance(address)": {
        "notice": "The total balance of wrapped tokens for the given holder         account. Only holders that have previously wrapped KEEP/NU to T         can unwrap, up to the amount previously wrapped."
      },
      "wrappedToken()": {
        "notice": "The token being wrapped to T (KEEP/NU)."
      }
    },
    "notice": "Contract implements a special update protocol to enable KEEP/NU         token holders to wrap their tokens and obtain T tokens according         to a fixed ratio. This will go on indefinitely and enable NU and         KEEP token holders to join T network without needing to buy or         sell any assets. Logistically, anyone holding NU or KEEP can wrap         those assets in order to upgrade to T. They can also unwrap T in         order to downgrade back to the underlying asset. There is a separate         instance of this contract deployed for KEEP holders and a separate         instance of this contract deployed for NU holders.",
    "version": 1
  }
}