"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var func = function (hre) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var getNamedAccounts, deployments, helpers, log, deployer, execute, read, _c, to1e18, from1e18, KeepToken, KEEP_SUPPLY, _d, _e, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    getNamedAccounts = hre.getNamedAccounts, deployments = hre.deployments, helpers = hre.helpers;
                    log = deployments.log;
                    return [4 /*yield*/, getNamedAccounts()];
                case 1:
                    deployer = (_g.sent()).deployer;
                    execute = deployments.execute, read = deployments.read;
                    _c = helpers.number, to1e18 = _c.to1e18, from1e18 = _c.from1e18;
                    return [4 /*yield*/, deployments.getOrNull("KeepToken")];
                case 2:
                    KeepToken = _g.sent();
                    if (!(KeepToken && helpers.address.isValid(KeepToken.address))) return [3 /*break*/, 4];
                    log("using existing KeepToken at ".concat(KeepToken.address));
                    // Save deployment artifact of external contract to include it in the package.
                    return [4 /*yield*/, deployments.save("KeepToken", KeepToken)];
                case 3:
                    // Save deployment artifact of external contract to include it in the package.
                    _g.sent();
                    return [3 /*break*/, 9];
                case 4:
                    if (!(!hre.network.tags.allowStubs ||
                        ((_b = (_a = hre.network.config) === null || _a === void 0 ? void 0 : _a.forking) === null || _b === void 0 ? void 0 : _b.enabled))) return [3 /*break*/, 5];
                    throw new Error("deployed KeepToken contract not found");
                case 5:
                    log("deploying KeepToken stub");
                    KEEP_SUPPLY = to1e18("1000000000") // 1B KEEP
                    ;
                    return [4 /*yield*/, deployments.deploy("KeepToken", {
                            contract: "TestToken",
                            from: deployer,
                            log: true,
                        })];
                case 6:
                    _g.sent();
                    return [4 /*yield*/, execute("KeepToken", { from: deployer }, "mint", deployer, KEEP_SUPPLY)];
                case 7:
                    _g.sent();
                    _d = log;
                    _e = "minted ".concat;
                    _f = from1e18;
                    return [4 /*yield*/, read("KeepToken", "totalSupply")];
                case 8:
                    _d.apply(void 0, [_e.apply("minted ", [_f.apply(void 0, [_g.sent()]), " KEEP"])]);
                    _g.label = 9;
                case 9: return [2 /*return*/];
            }
        });
    });
};
exports.default = func;
func.tags = ["KeepToken"];
